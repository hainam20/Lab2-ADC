
Lab2_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080085f8  080085f8  000185f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a0c  08008a0c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a0c  08008a0c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  08008be8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08008be8  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000caa4  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210f  00000000  00000000  0002cce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094d  00000000  00000000  0002f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ab7  00000000  00000000  00030335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010601  00000000  00000000  00048dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ba24  00000000  00000000  000593ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004224  00000000  00000000  000e4e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e9038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080085dc 	.word	0x080085dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080085dc 	.word	0x080085dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Ina219_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Ina219_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af02      	add	r7, sp, #8
	uint8_t buffer[3];
	buffer[0] = INA219_CALLIB_REG;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0x01; //MSB callib reg
 8000a92:	2301      	movs	r3, #1
 8000a94:	717b      	strb	r3, [r7, #5]
	buffer[2] = 0x9A; //LSB callib reg
 8000a96:	239a      	movs	r3, #154	; 0x9a
 8000a98:	71bb      	strb	r3, [r7, #6]
	//init ina219 callibration
	//28ms is time out value based on ina219 datasheet corresponding to SMBus
	if(HAL_I2C_Master_Transmit(&hi2c1, INA219_SLAVE_ADDRESS,buffer,3,28) != HAL_OK) //that ra neu de noi ma init successfully thi phai check gia tri duoc ghi co that sư ghi chua
 8000a9a:	1d3a      	adds	r2, r7, #4
 8000a9c:	231c      	movs	r3, #28
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	4817      	ldr	r0, [pc, #92]	; (8000b04 <Ina219_Init+0x7c>)
 8000aa6:	f001 fd1d 	bl	80024e4 <HAL_I2C_Master_Transmit>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d018      	beq.n	8000ae2 <Ina219_Init+0x5a>
	{
		 memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000ab0:	2264      	movs	r2, #100	; 0x64
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <Ina219_Init+0x80>)
 8000ab6:	f005 fca6 	bl	8006406 <memset>
		 sprintf((char*)Tx_Buffer,"INA219: I2C TRANSMIT CALLIB SUCCESSFULLY!\n");
 8000aba:	4914      	ldr	r1, [pc, #80]	; (8000b0c <Ina219_Init+0x84>)
 8000abc:	4812      	ldr	r0, [pc, #72]	; (8000b08 <Ina219_Init+0x80>)
 8000abe:	f005 fc3f 	bl	8006340 <siprintf>
		 HAL_Delay(100);
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f000 fc42 	bl	800134c <HAL_Delay>
		 memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000ac8:	2264      	movs	r2, #100	; 0x64
 8000aca:	2100      	movs	r1, #0
 8000acc:	480e      	ldr	r0, [pc, #56]	; (8000b08 <Ina219_Init+0x80>)
 8000ace:	f005 fc9a 	bl	8006406 <memset>
		 sprintf((char*)Tx_Buffer,"Ready to read data...\n");
 8000ad2:	490f      	ldr	r1, [pc, #60]	; (8000b10 <Ina219_Init+0x88>)
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <Ina219_Init+0x80>)
 8000ad6:	f005 fc33 	bl	8006340 <siprintf>
		 HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f000 fc36 	bl	800134c <HAL_Delay>
	else {
		memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
		sprintf((char*)Tx_Buffer,"INA219: TRANSMIT CALLIB FAILED!\n");
		HAL_Delay(100);
	}
}
 8000ae0:	e00b      	b.n	8000afa <Ina219_Init+0x72>
		memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <Ina219_Init+0x80>)
 8000ae8:	f005 fc8d 	bl	8006406 <memset>
		sprintf((char*)Tx_Buffer,"INA219: TRANSMIT CALLIB FAILED!\n");
 8000aec:	4909      	ldr	r1, [pc, #36]	; (8000b14 <Ina219_Init+0x8c>)
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <Ina219_Init+0x80>)
 8000af0:	f005 fc26 	bl	8006340 <siprintf>
		HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fc29 	bl	800134c <HAL_Delay>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000220 	.word	0x20000220
 8000b08:	200002c0 	.word	0x200002c0
 8000b0c:	080085f8 	.word	0x080085f8
 8000b10:	08008624 	.word	0x08008624
 8000b14:	0800863c 	.word	0x0800863c

08000b18 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 	if(hadc->Instance == hadc1.Instance)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d105      	bne.n	8000b38 <HAL_ADC_ConvCpltCallback+0x20>
 	{
 		raw_temperature_val = HAL_ADC_GetValue(&hadc1);
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b2e:	f000 fdbf 	bl	80016b0 <HAL_ADC_GetValue>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b36:	6013      	str	r3, [r2, #0]
 	}
 	//if the continous ADC read disable we will start again here
 	//HAL_ADC_Start_IT(&hadc1);
 }
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001f0 	.word	0x200001f0
 8000b44:	200002bc 	.word	0x200002bc

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fb9c 	bl	8001288 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f810 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f900 	bl	8000d58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b58:	f000 f868 	bl	8000c2c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b5c:	f000 f8d2 	bl	8000d04 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b60:	f000 f8a2 	bl	8000ca8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <main+0x28>)
 8000b66:	f000 fced 	bl	8001544 <HAL_ADC_Start_IT>
  Ina219_Init();
 8000b6a:	f7ff ff8d 	bl	8000a88 <Ina219_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x26>
 8000b70:	200001f0 	.word	0x200001f0

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	2228      	movs	r2, #40	; 0x28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 fc3f 	bl	8006406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fca0 	bl	8004510 <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bd6:	f000 f8ed 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 ff0c 	bl	8004a14 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c02:	f000 f8d7 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c06:	2302      	movs	r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 f88c 	bl	8004d30 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c1e:	f000 f8c9 	bl	8000db4 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c3e:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <MX_ADC1_Init+0x78>)
 8000c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c6a:	f000 fb93 	bl	8001394 <HAL_ADC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f89e 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c80:	2307      	movs	r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_ADC1_Init+0x74>)
 8000c8a:	f000 fde5 	bl	8001858 <HAL_ADC_ConfigChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c94:	f000 f88e 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200001f0 	.word	0x200001f0
 8000ca4:	40012400 	.word	0x40012400

08000ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <MX_I2C1_Init+0x54>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_I2C1_Init+0x58>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_I2C1_Init+0x50>)
 8000ce6:	f001 faa5 	bl	8002234 <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 f860 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000220 	.word	0x20000220
 8000cfc:	40005400 	.word	0x40005400
 8000d00:	000186a0 	.word	0x000186a0

08000d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART1_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	f004 f8ae 	bl	8004e9c <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f000 f835 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000274 	.word	0x20000274
 8000d54:	40013800 	.word	0x40013800

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d64:	f043 0320 	orr.w	r3, r3, #32
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0304 	and.w	r3, r3, #4
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <MX_GPIO_Init+0x58>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000dbc:	2264      	movs	r2, #100	; 0x64
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <Error_Handler+0x24>)
 8000dc2:	f005 fb20 	bl	8006406 <memset>
	  sprintf((char*)Tx_Buffer,"System init error\n");
 8000dc6:	4905      	ldr	r1, [pc, #20]	; (8000ddc <Error_Handler+0x28>)
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <Error_Handler+0x24>)
 8000dca:	f005 fab9 	bl	8006340 <siprintf>
	  HAL_Delay(500);
 8000dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd2:	f000 fabb 	bl	800134c <HAL_Delay>
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000dd6:	e7f1      	b.n	8000dbc <Error_Handler+0x8>
 8000dd8:	200002c0 	.word	0x200002c0
 8000ddc:	08008660 	.word	0x08008660

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_MspInit+0x5c>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_MspInit+0x5c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6193      	str	r3, [r2, #24]
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_MspInit+0x5c>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x5c>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_MspInit+0x60>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_MspInit+0x60>)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000

08000e44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0x7c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d129      	bne.n	8000eb8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_ADC_MspInit+0x80>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e94:	2310      	movs	r3, #16
 8000e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_ADC_MspInit+0x84>)
 8000ea4:	f001 f842 	bl	8001f2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2012      	movs	r0, #18
 8000eae:	f000 ff46 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eb2:	2012      	movs	r0, #18
 8000eb4:	f000 ff5f 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40012400 	.word	0x40012400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010800 	.word	0x40010800

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_I2C_MspInit+0x90>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d133      	bne.n	8000f54 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f04:	23c0      	movs	r3, #192	; 0xc0
 8000f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <HAL_I2C_MspInit+0x98>)
 8000f18:	f001 f808 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f26:	61d3      	str	r3, [r2, #28]
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_I2C_MspInit+0x94>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	201f      	movs	r0, #31
 8000f3a:	f000 ff00 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f3e:	201f      	movs	r0, #31
 8000f40:	f000 ff19 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2020      	movs	r0, #32
 8000f4a:	f000 fef8 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f4e:	2020      	movs	r0, #32
 8000f50:	f000 ff11 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010c00 	.word	0x40010c00

08000f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <HAL_UART_MspInit+0x9c>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d139      	bne.n	8000ffc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6193      	str	r3, [r2, #24]
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_UART_MspInit+0xa0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <HAL_UART_MspInit+0xa4>)
 8000fce:	f000 ffad 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <HAL_UART_MspInit+0xa4>)
 8000fe8:	f000 ffa0 	bl	8001f2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2025      	movs	r0, #37	; 0x25
 8000ff2:	f000 fea4 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff6:	2025      	movs	r0, #37	; 0x25
 8000ff8:	f000 febd 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40013800 	.word	0x40013800
 8001008:	40021000 	.word	0x40021000
 800100c:	40010800 	.word	0x40010800

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001056:	f000 f95d 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <ADC1_2_IRQHandler+0x10>)
 8001066:	f000 fb2f 	bl	80016c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001f0 	.word	0x200001f0

08001074 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <I2C1_EV_IRQHandler+0x10>)
 800107a:	f001 fb31 	bl	80026e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000220 	.word	0x20000220

08001088 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <I2C1_ER_IRQHandler+0x10>)
 800108e:	f001 fc7a 	bl	8002986 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000220 	.word	0x20000220

0800109c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <USART1_IRQHandler+0x10>)
 80010a2:	f003 ff4b 	bl	8004f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000274 	.word	0x20000274

080010b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <_kill>:

int _kill(int pid, int sig)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010c8:	f005 f9f0 	bl	80064ac <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2216      	movs	r2, #22
 80010d0:	601a      	str	r2, [r3, #0]
  return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_exit>:

void _exit (int status)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffe7 	bl	80010be <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f0:	e7fe      	b.n	80010f0 <_exit+0x12>

080010f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e00a      	b.n	800111a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001104:	f3af 8000 	nop.w
 8001108:	4601      	mov	r1, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	60ba      	str	r2, [r7, #8]
 8001110:	b2ca      	uxtb	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	dbf0      	blt.n	8001104 <_read+0x12>
  }

  return len;
 8001122:	687b      	ldr	r3, [r7, #4]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e009      	b.n	8001152 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	60ba      	str	r2, [r7, #8]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	429a      	cmp	r2, r3
 8001158:	dbf1      	blt.n	800113e <_write+0x12>
  }
  return len;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <_close>:

int _close(int file)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
  return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <_isatty>:

int _isatty(int file)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f005 f95a 	bl	80064ac <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20005000 	.word	0x20005000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000324 	.word	0x20000324
 800122c:	20000478 	.word	0x20000478

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff fff8 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001258:	4c09      	ldr	r4, [pc, #36]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f005 f927 	bl	80064b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff fc6d 	bl	8000b48 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001278:	08008a14 	.word	0x08008a14
  ldr r2, =_sbss
 800127c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001280:	20000478 	.word	0x20000478

08001284 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <CAN1_RX1_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fd45 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fd9c 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fd5d 	bl	8001d92 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 fd25 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000008 	.word	0x20000008
 8001334:	20000328 	.word	0x20000328

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000328 	.word	0x20000328

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffe0 	bl	8001338 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0be      	b.n	8001534 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd36 	bl	8000e44 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fb8f 	bl	8001afc <ADC_ConversionStop_Disable>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8099 	bne.w	8001522 <HAL_ADC_Init+0x18e>
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8095 	bne.w	8001522 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001400:	f023 0302 	bic.w	r3, r3, #2
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001414:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800141c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142c:	d003      	beq.n	8001436 <HAL_ADC_Init+0xa2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d102      	bne.n	800143c <HAL_ADC_Init+0xa8>
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	e000      	b.n	800143e <HAL_ADC_Init+0xaa>
 800143c:	2300      	movs	r3, #0
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d119      	bne.n	8001480 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b1b      	ldrb	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	3b01      	subs	r3, #1
 800145a:	035a      	lsls	r2, r3, #13
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_ADC_Init+0x1a8>)
 800149c:	4013      	ands	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_Init+0x126>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	3b01      	subs	r3, #1
 80014c0:	051b      	lsls	r3, r3, #20
 80014c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_ADC_Init+0x1ac>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014fe:	e018      	b.n	8001532 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f023 0312 	bic.w	r3, r3, #18
 8001508:	f043 0210 	orr.w	r2, r3, #16
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001520:	e007      	b.n	8001532 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001532:	7dfb      	ldrb	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	ffe1f7fd 	.word	0xffe1f7fd
 8001540:	ff1f0efe 	.word	0xff1f0efe

08001544 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_Start_IT+0x1a>
 800155a:	2302      	movs	r3, #2
 800155c:	e0a0      	b.n	80016a0 <HAL_ADC_Start_IT+0x15c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fa6e 	bl	8001a48 <ADC_Enable>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 808f 	bne.w	8001696 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a45      	ldr	r2, [pc, #276]	; (80016a8 <HAL_ADC_Start_IT+0x164>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_Start_IT+0x5e>
 8001596:	4b45      	ldr	r3, [pc, #276]	; (80016ac <HAL_ADC_Start_IT+0x168>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d115      	bne.n	80015ce <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d026      	beq.n	800160a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015cc:	e01d      	b.n	800160a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_ADC_Start_IT+0x168>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d004      	beq.n	80015ee <HAL_ADC_Start_IT+0xaa>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <HAL_ADC_Start_IT+0x164>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10d      	bne.n	800160a <HAL_ADC_Start_IT+0xc6>
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_ADC_Start_IT+0x168>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001602:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	f023 0206 	bic.w	r2, r3, #6
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
 8001622:	e002      	b.n	800162a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0202 	mvn.w	r2, #2
 800163a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0220 	orr.w	r2, r2, #32
 800164a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001656:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800165a:	d113      	bne.n	8001684 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001660:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_ADC_Start_IT+0x164>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d105      	bne.n	8001672 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_ADC_Start_IT+0x168>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	e00c      	b.n	800169e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e003      	b.n	800169e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40012800 	.word	0x40012800
 80016ac:	40012400 	.word	0x40012400

080016b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d03e      	beq.n	8001768 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d039      	beq.n	8001768 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001716:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800171a:	d11d      	bne.n	8001758 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001720:	2b00      	cmp	r3, #0
 8001722:	d119      	bne.n	8001758 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0220 	bic.w	r2, r2, #32
 8001732:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff f9dd 	bl	8000b18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0212 	mvn.w	r2, #18
 8001766:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	2b00      	cmp	r3, #0
 8001770:	d04d      	beq.n	800180e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d048      	beq.n	800180e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800179e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80017a2:	d012      	beq.n	80017ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d125      	bne.n	80017fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017c0:	d11d      	bne.n	80017fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f9bd 	bl	8001b7e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 020c 	mvn.w	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f809 	bl	8001846 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0201 	mvn.w	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x20>
 8001874:	2302      	movs	r3, #2
 8001876:	e0dc      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1da>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b06      	cmp	r3, #6
 8001886:	d81c      	bhi.n	80018c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b05      	subs	r3, #5
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4019      	ands	r1, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	3b05      	subs	r3, #5
 80018b4:	fa00 f203 	lsl.w	r2, r0, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
 80018c0:	e03c      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d81c      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	3b23      	subs	r3, #35	; 0x23
 80018dc:	221f      	movs	r2, #31
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4019      	ands	r1, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b23      	subs	r3, #35	; 0x23
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
 8001902:	e01b      	b.n	800193c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b41      	subs	r3, #65	; 0x41
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b41      	subs	r3, #65	; 0x41
 8001930:	fa00 f203 	lsl.w	r2, r0, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d91c      	bls.n	800197e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68d9      	ldr	r1, [r3, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6898      	ldr	r0, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	3b1e      	subs	r3, #30
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e019      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6919      	ldr	r1, [r3, #16]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	4019      	ands	r1, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6898      	ldr	r0, [r3, #8]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019be:	2b11      	cmp	r3, #17
 80019c0:	d132      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_ADC_ConfigChannel+0x1e4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d125      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d126      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d11a      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_ADC_ConfigChannel+0x1e8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_ADC_ConfigChannel+0x1ec>)
 80019f8:	fba2 2303 	umull	r2, r3, r2, r3
 80019fc:	0c9a      	lsrs	r2, r3, #18
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a08:	e002      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f9      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x1b2>
 8001a16:	e007      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012400 	.word	0x40012400
 8001a40:	20000000 	.word	0x20000000
 8001a44:	431bde83 	.word	0x431bde83

08001a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d040      	beq.n	8001ae8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <ADC_Enable+0xac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <ADC_Enable+0xb0>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a84:	e002      	b.n	8001a8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a92:	f7ff fc51 	bl	8001338 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a98:	e01f      	b.n	8001ada <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a9a:	f7ff fc4d 	bl	8001338 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d918      	bls.n	8001ada <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d011      	beq.n	8001ada <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e007      	b.n	8001aea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d1d8      	bne.n	8001a9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d12e      	bne.n	8001b74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b26:	f7ff fc07 	bl	8001338 <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b2c:	e01b      	b.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b2e:	f7ff fc03 	bl	8001338 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d914      	bls.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d10d      	bne.n	8001b66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	f043 0210 	orr.w	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e007      	b.n	8001b76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d0dc      	beq.n	8001b2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f003 0307 	and.w	r3, r3, #7
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	db0b      	blt.n	8001c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4906      	ldr	r1, [pc, #24]	; (8001c28 <__NVIC_EnableIRQ+0x34>)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	095b      	lsrs	r3, r3, #5
 8001c14:	2001      	movs	r0, #1
 8001c16:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff90 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff2d 	bl	8001b90 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff42 	bl	8001bd8 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff90 	bl	8001c80 <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5f 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff35 	bl	8001bf4 <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d008      	beq.n	8001dd4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e020      	b.n	8001e16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d005      	beq.n	8001e44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e051      	b.n	8001ee8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 020e 	bic.w	r2, r2, #14
 8001e52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a22      	ldr	r2, [pc, #136]	; (8001ef4 <HAL_DMA_Abort_IT+0xd4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d029      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_DMA_Abort_IT+0xd8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x9e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_DMA_Abort_IT+0xdc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01a      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x98>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_DMA_Abort_IT+0xe0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x92>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_DMA_Abort_IT+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00a      	beq.n	8001eac <HAL_DMA_Abort_IT+0x8c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_DMA_Abort_IT+0xe8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d102      	bne.n	8001ea6 <HAL_DMA_Abort_IT+0x86>
 8001ea0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ea4:	e00e      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eaa:	e00b      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb0:	e008      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb6:	e005      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebc:	e002      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	e000      	b.n	8001ec4 <HAL_DMA_Abort_IT+0xa4>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_DMA_Abort_IT+0xec>)
 8001ec6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
    } 
  }
  return status;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40020008 	.word	0x40020008
 8001ef8:	4002001c 	.word	0x4002001c
 8001efc:	40020030 	.word	0x40020030
 8001f00:	40020044 	.word	0x40020044
 8001f04:	40020058 	.word	0x40020058
 8001f08:	4002006c 	.word	0x4002006c
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f1e:	b2db      	uxtb	r3, r3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b08b      	sub	sp, #44	; 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3e:	e169      	b.n	8002214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f40:	2201      	movs	r2, #1
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 8158 	bne.w	800220e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a9a      	ldr	r2, [pc, #616]	; (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d05e      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f68:	4a98      	ldr	r2, [pc, #608]	; (80021cc <HAL_GPIO_Init+0x2a0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d875      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f6e:	4a98      	ldr	r2, [pc, #608]	; (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d058      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f74:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_GPIO_Init+0x2a4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d86f      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f7a:	4a96      	ldr	r2, [pc, #600]	; (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d052      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f80:	4a94      	ldr	r2, [pc, #592]	; (80021d4 <HAL_GPIO_Init+0x2a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d869      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f86:	4a94      	ldr	r2, [pc, #592]	; (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04c      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f8c:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_GPIO_Init+0x2ac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d863      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f92:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d046      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
 8001f98:	4a90      	ldr	r2, [pc, #576]	; (80021dc <HAL_GPIO_Init+0x2b0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d85d      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d82a      	bhi.n	8001ff8 <HAL_GPIO_Init+0xcc>
 8001fa2:	2b12      	cmp	r3, #18
 8001fa4:	d859      	bhi.n	800205a <HAL_GPIO_Init+0x12e>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_GPIO_Init+0x80>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08002027 	.word	0x08002027
 8001fb0:	08002001 	.word	0x08002001
 8001fb4:	08002013 	.word	0x08002013
 8001fb8:	08002055 	.word	0x08002055
 8001fbc:	0800205b 	.word	0x0800205b
 8001fc0:	0800205b 	.word	0x0800205b
 8001fc4:	0800205b 	.word	0x0800205b
 8001fc8:	0800205b 	.word	0x0800205b
 8001fcc:	0800205b 	.word	0x0800205b
 8001fd0:	0800205b 	.word	0x0800205b
 8001fd4:	0800205b 	.word	0x0800205b
 8001fd8:	0800205b 	.word	0x0800205b
 8001fdc:	0800205b 	.word	0x0800205b
 8001fe0:	0800205b 	.word	0x0800205b
 8001fe4:	0800205b 	.word	0x0800205b
 8001fe8:	0800205b 	.word	0x0800205b
 8001fec:	0800205b 	.word	0x0800205b
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	0800201d 	.word	0x0800201d
 8001ff8:	4a79      	ldr	r2, [pc, #484]	; (80021e0 <HAL_GPIO_Init+0x2b4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ffe:	e02c      	b.n	800205a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e029      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	3304      	adds	r3, #4
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e024      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	3308      	adds	r3, #8
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e01f      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	330c      	adds	r3, #12
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e01a      	b.n	800205c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800202e:	2304      	movs	r3, #4
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e013      	b.n	800205c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	611a      	str	r2, [r3, #16]
          break;
 8002046:	e009      	b.n	800205c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002048:	2308      	movs	r3, #8
 800204a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	615a      	str	r2, [r3, #20]
          break;
 8002052:	e003      	b.n	800205c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x130>
          break;
 800205a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2bff      	cmp	r3, #255	; 0xff
 8002060:	d801      	bhi.n	8002066 <HAL_GPIO_Init+0x13a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	e001      	b.n	800206a <HAL_GPIO_Init+0x13e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2bff      	cmp	r3, #255	; 0xff
 8002070:	d802      	bhi.n	8002078 <HAL_GPIO_Init+0x14c>
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	e002      	b.n	800207e <HAL_GPIO_Init+0x152>
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	3b08      	subs	r3, #8
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	210f      	movs	r1, #15
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	6a39      	ldr	r1, [r7, #32]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	431a      	orrs	r2, r3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80b1 	beq.w	800220e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ac:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_GPIO_Init+0x2b8>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_GPIO_Init+0x2bc>)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3302      	adds	r3, #2
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a40      	ldr	r2, [pc, #256]	; (80021ec <HAL_GPIO_Init+0x2c0>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d013      	beq.n	8002118 <HAL_GPIO_Init+0x1ec>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3f      	ldr	r2, [pc, #252]	; (80021f0 <HAL_GPIO_Init+0x2c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00d      	beq.n	8002114 <HAL_GPIO_Init+0x1e8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3e      	ldr	r2, [pc, #248]	; (80021f4 <HAL_GPIO_Init+0x2c8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1e4>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <HAL_GPIO_Init+0x2cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d101      	bne.n	800210c <HAL_GPIO_Init+0x1e0>
 8002108:	2303      	movs	r3, #3
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 800210c:	2304      	movs	r3, #4
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x1ee>
 8002118:	2300      	movs	r3, #0
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800212a:	492f      	ldr	r1, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x2bc>)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	492c      	ldr	r1, [pc, #176]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	4928      	ldr	r1, [pc, #160]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	491e      	ldr	r1, [pc, #120]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4914      	ldr	r1, [pc, #80]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d021      	beq.n	8002200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e021      	b.n	800220e <HAL_GPIO_Init+0x2e2>
 80021ca:	bf00      	nop
 80021cc:	10320000 	.word	0x10320000
 80021d0:	10310000 	.word	0x10310000
 80021d4:	10220000 	.word	0x10220000
 80021d8:	10210000 	.word	0x10210000
 80021dc:	10120000 	.word	0x10120000
 80021e0:	10110000 	.word	0x10110000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40010800 	.word	0x40010800
 80021f0:	40010c00 	.word	0x40010c00
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40011400 	.word	0x40011400
 80021fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_GPIO_Init+0x304>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	4909      	ldr	r1, [pc, #36]	; (8002230 <HAL_GPIO_Init+0x304>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f ae8e 	bne.w	8001f40 <HAL_GPIO_Init+0x14>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	372c      	adds	r7, #44	; 0x2c
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e12b      	b.n	800249e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fe36 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2224      	movs	r2, #36	; 0x24
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002298:	f002 fd04 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 800229c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4a81      	ldr	r2, [pc, #516]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d807      	bhi.n	80022b8 <HAL_I2C_Init+0x84>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a80      	ldr	r2, [pc, #512]	; (80024ac <HAL_I2C_Init+0x278>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	bf94      	ite	ls
 80022b0:	2301      	movls	r3, #1
 80022b2:	2300      	movhi	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e006      	b.n	80022c6 <HAL_I2C_Init+0x92>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a7d      	ldr	r2, [pc, #500]	; (80024b0 <HAL_I2C_Init+0x27c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	bf94      	ite	ls
 80022c0:	2301      	movls	r3, #1
 80022c2:	2300      	movhi	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e7      	b.n	800249e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <HAL_I2C_Init+0x280>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a6a      	ldr	r2, [pc, #424]	; (80024a8 <HAL_I2C_Init+0x274>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d802      	bhi.n	8002308 <HAL_I2C_Init+0xd4>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	e009      	b.n	800231c <HAL_I2C_Init+0xe8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_I2C_Init+0x284>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	3301      	adds	r3, #1
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	495c      	ldr	r1, [pc, #368]	; (80024a8 <HAL_I2C_Init+0x274>)
 8002338:	428b      	cmp	r3, r1
 800233a:	d819      	bhi.n	8002370 <HAL_I2C_Init+0x13c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fbb1 f3f3 	udiv	r3, r1, r3
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_I2C_Init+0x138>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e59      	subs	r1, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236a:	e051      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 800236c:	2304      	movs	r3, #4
 800236e:	e04f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d111      	bne.n	800239c <HAL_I2C_Init+0x168>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e58      	subs	r0, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e012      	b.n	80023c2 <HAL_I2C_Init+0x18e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Init+0x196>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e022      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10e      	bne.n	80023f0 <HAL_I2C_Init+0x1bc>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e58      	subs	r0, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	440b      	add	r3, r1
 80023e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Init+0x1dc>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	6809      	ldr	r1, [r1, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6911      	ldr	r1, [r2, #16]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	000186a0 	.word	0x000186a0
 80024ac:	001e847f 	.word	0x001e847f
 80024b0:	003d08ff 	.word	0x003d08ff
 80024b4:	431bde83 	.word	0x431bde83
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d103      	bne.n	80024da <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7fe ff1e 	bl	8001338 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	; (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f001 fdd6 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	; (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f001 fc66 	bl	8003e74 <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f001 fe94 	bl	80042fc <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 fe8b 	bl	800438c <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002700:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	2b10      	cmp	r3, #16
 800270e:	d003      	beq.n	8002718 <HAL_I2C_EV_IRQHandler+0x38>
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	f040 80b1 	bne.w	800287a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_I2C_EV_IRQHandler+0x6e>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002738:	d003      	beq.n	8002742 <HAL_I2C_EV_IRQHandler+0x62>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002740:	d101      	bne.n	8002746 <HAL_I2C_EV_IRQHandler+0x66>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_I2C_EV_IRQHandler+0x68>
 8002746:	2300      	movs	r3, #0
 8002748:	2b01      	cmp	r3, #1
 800274a:	f000 8114 	beq.w	8002976 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x90>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f001 feba 	bl	80044dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fd60 	bl	800322e <I2C_Master_SB>
 800276e:	e083      	b.n	8002878 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d008      	beq.n	800278c <HAL_I2C_EV_IRQHandler+0xac>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fdd7 	bl	8003338 <I2C_Master_ADD10>
 800278a:	e075      	b.n	8002878 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fdf2 	bl	800338a <I2C_Master_ADDR>
 80027a6:	e067      	b.n	8002878 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d036      	beq.n	8002820 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	f000 80db 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <HAL_I2C_EV_IRQHandler+0x10a>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_I2C_EV_IRQHandler+0x10a>
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f9d4 	bl	8002b90 <I2C_MasterTransmit_TXE>
 80027e8:	e046      	b.n	8002878 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80c2 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80bc 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	2b21      	cmp	r3, #33	; 0x21
 8002806:	d103      	bne.n	8002810 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fa5d 	bl	8002cc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800280e:	e0b4      	b.n	800297a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	f040 80b1 	bne.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 facb 	bl	8002db4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800281e:	e0ac      	b.n	800297a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282e:	f000 80a4 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00d      	beq.n	8002858 <HAL_I2C_EV_IRQHandler+0x178>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_I2C_EV_IRQHandler+0x178>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fb47 	bl	8002ee4 <I2C_MasterReceive_RXNE>
 8002856:	e00f      	b.n	8002878 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 808b 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8085 	beq.w	800297a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fbf2 	bl	800305a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002876:	e080      	b.n	800297a <HAL_I2C_EV_IRQHandler+0x29a>
 8002878:	e07f      	b.n	800297a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d004      	beq.n	800288c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e007      	b.n	800289c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_I2C_EV_IRQHandler+0x1ea>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80028c0:	69b9      	ldr	r1, [r7, #24]
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 ffb8 	bl	8003838 <I2C_Slave_ADDR>
 80028c8:	e05a      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0x206>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fff2 	bl	80038c8 <I2C_Slave_STOPF>
 80028e4:	e04c      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028e6:	7bbb      	ldrb	r3, [r7, #14]
 80028e8:	2b21      	cmp	r3, #33	; 0x21
 80028ea:	d002      	beq.n	80028f2 <HAL_I2C_EV_IRQHandler+0x212>
 80028ec:	7bbb      	ldrb	r3, [r7, #14]
 80028ee:	2b29      	cmp	r3, #41	; 0x29
 80028f0:	d120      	bne.n	8002934 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x238>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x238>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fed5 	bl	80036c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002916:	e032      	b.n	800297e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d02d      	beq.n	800297e <HAL_I2C_EV_IRQHandler+0x29e>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d028      	beq.n	800297e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 ff04 	bl	800373a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002932:	e024      	b.n	800297e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <HAL_I2C_EV_IRQHandler+0x27a>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_I2C_EV_IRQHandler+0x27a>
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 ff11 	bl	800377a <I2C_SlaveReceive_RXNE>
 8002958:	e012      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 ff41 	bl	80037f6 <I2C_SlaveReceive_BTF>
 8002974:	e004      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800297e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b08a      	sub	sp, #40	; 0x28
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_I2C_ER_IRQHandler+0x5a>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029ce:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029de:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <HAL_I2C_ER_IRQHandler+0x80>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002a04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03e      	beq.n	8002a8e <HAL_I2C_ER_IRQHandler+0x108>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d039      	beq.n	8002a8e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002a1a:	7efb      	ldrb	r3, [r7, #27]
 8002a1c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a34:	7ebb      	ldrb	r3, [r7, #26]
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	d112      	bne.n	8002a60 <HAL_I2C_ER_IRQHandler+0xda>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10f      	bne.n	8002a60 <HAL_I2C_ER_IRQHandler+0xda>
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	2b21      	cmp	r3, #33	; 0x21
 8002a44:	d008      	beq.n	8002a58 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b29      	cmp	r3, #41	; 0x29
 8002a4a:	d005      	beq.n	8002a58 <HAL_I2C_ER_IRQHandler+0xd2>
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b28      	cmp	r3, #40	; 0x28
 8002a50:	d106      	bne.n	8002a60 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b21      	cmp	r3, #33	; 0x21
 8002a56:	d103      	bne.n	8002a60 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f001 f865 	bl	8003b28 <I2C_Slave_AF>
 8002a5e:	e016      	b.n	8002a8e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a68:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a72:	7efb      	ldrb	r3, [r7, #27]
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d002      	beq.n	8002a7e <HAL_I2C_ER_IRQHandler+0xf8>
 8002a78:	7efb      	ldrb	r3, [r7, #27]
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ab2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f001 f8a2 	bl	8003c10 <I2C_ITError>
  }
}
 8002acc:	bf00      	nop
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ba6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d150      	bne.n	8002c58 <I2C_MasterTransmit_TXE+0xc8>
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d14d      	bne.n	8002c58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d01d      	beq.n	8002bfe <I2C_MasterTransmit_TXE+0x6e>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d01a      	beq.n	8002bfe <I2C_MasterTransmit_TXE+0x6e>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bce:	d016      	beq.n	8002bfe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bde:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2211      	movs	r2, #17
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff6c 	bl	8002ad4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bfc:	e060      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d107      	bne.n	8002c48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff81 	bl	8002b48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c46:	e03b      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff3f 	bl	8002ad4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c56:	e033      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b21      	cmp	r3, #33	; 0x21
 8002c5c:	d005      	beq.n	8002c6a <I2C_MasterTransmit_TXE+0xda>
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d12d      	bne.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b22      	cmp	r3, #34	; 0x22
 8002c68:	d12a      	bne.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d108      	bne.n	8002c86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002c84:	e01c      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d103      	bne.n	8002c9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f88e 	bl	8002db4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002c98:	e012      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cbe:	e7ff      	b.n	8002cc0 <I2C_MasterTransmit_TXE+0x130>
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b21      	cmp	r3, #33	; 0x21
 8002ce0:	d164      	bne.n	8002dac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d10:	e04c      	b.n	8002dac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d01d      	beq.n	8002d54 <I2C_MasterTransmit_BTF+0x8c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d01a      	beq.n	8002d54 <I2C_MasterTransmit_BTF+0x8c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d24:	d016      	beq.n	8002d54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2211      	movs	r2, #17
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fec1 	bl	8002ad4 <HAL_I2C_MasterTxCpltCallback>
}
 8002d52:	e02b      	b.n	8002dac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d107      	bne.n	8002d9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fed6 	bl	8002b48 <HAL_I2C_MemTxCpltCallback>
}
 8002d9c:	e006      	b.n	8002dac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fe94 	bl	8002ad4 <HAL_I2C_MasterTxCpltCallback>
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11d      	bne.n	8002e08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10b      	bne.n	8002dec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	1c9a      	adds	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002dea:	e077      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	121b      	asrs	r3, r3, #8
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e06:	e069      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10b      	bne.n	8002e28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e26:	e059      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d152      	bne.n	8002ed6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b22      	cmp	r3, #34	; 0x22
 8002e34:	d10d      	bne.n	8002e52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e50:	e044      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b21      	cmp	r3, #33	; 0x21
 8002e60:	d112      	bne.n	8002e88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e86:	e029      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d124      	bne.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d121      	bne.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ea6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fe3a 	bl	8002b48 <HAL_I2C_MemTxCpltCallback>
}
 8002ed4:	e002      	b.n	8002edc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff faf0 	bl	80024bc <I2C_Flush_DR>
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b22      	cmp	r3, #34	; 0x22
 8002ef6:	f040 80ac 	bne.w	8003052 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d921      	bls.n	8002f4c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	f040 808c 	bne.w	8003052 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002f4a:	e082      	b.n	8003052 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d075      	beq.n	8003040 <I2C_MasterReceive_RXNE+0x15c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <I2C_MasterReceive_RXNE+0x7c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d16f      	bne.n	8003040 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 fa5b 	bl	800441c <I2C_WaitOnSTOPRequestThroughIT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d142      	bne.n	8002ff2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d10a      	bne.n	8002fdc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fdc0 	bl	8002b5a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fda:	e03a      	b.n	8003052 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2212      	movs	r2, #18
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fd7b 	bl	8002ae6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ff0:	e02f      	b.n	8003052 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003000:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fd97 	bl	8002b6c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800303e:	e008      	b.n	8003052 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	605a      	str	r2, [r3, #4]
}
 8003050:	e7ff      	b.n	8003052 <I2C_MasterReceive_RXNE+0x16e>
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b04      	cmp	r3, #4
 8003070:	d11b      	bne.n	80030aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003080:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80030a8:	e0bd      	b.n	8003226 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d129      	bne.n	8003108 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00a      	beq.n	80030e0 <I2C_MasterReceive_BTF+0x86>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d007      	beq.n	80030e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003106:	e08e      	b.n	8003226 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d176      	bne.n	8003200 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d002      	beq.n	800311e <I2C_MasterReceive_BTF+0xc4>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d108      	bne.n	8003130 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e019      	b.n	8003164 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d002      	beq.n	800313c <I2C_MasterReceive_BTF+0xe2>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d108      	bne.n	800314e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e00a      	b.n	8003164 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b10      	cmp	r3, #16
 8003152:	d007      	beq.n	8003164 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003162:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d10a      	bne.n	80031ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fcb9 	bl	8002b5a <HAL_I2C_MemRxCpltCallback>
}
 80031e8:	e01d      	b.n	8003226 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2212      	movs	r2, #18
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fc74 	bl	8002ae6 <HAL_I2C_MasterRxCpltCallback>
}
 80031fe:	e012      	b.n	8003226 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d117      	bne.n	8003272 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800325a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800325c:	e067      	b.n	800332e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
}
 8003270:	e05d      	b.n	800332e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800327a:	d133      	bne.n	80032e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b21      	cmp	r3, #33	; 0x21
 8003286:	d109      	bne.n	800329c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	e008      	b.n	80032ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <I2C_Master_SB+0x92>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d032      	beq.n	800332e <I2C_Master_SB+0x100>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02d      	beq.n	800332e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e0:	605a      	str	r2, [r3, #4]
}
 80032e2:	e024      	b.n	800332e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10e      	bne.n	800330a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	11db      	asrs	r3, r3, #7
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 0306 	and.w	r3, r3, #6
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f063 030f 	orn	r3, r3, #15
 8003300:	b2da      	uxtb	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]
}
 8003308:	e011      	b.n	800332e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10d      	bne.n	800332e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	b29b      	uxth	r3, r3
 8003318:	11db      	asrs	r3, r3, #7
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f003 0306 	and.w	r3, r3, #6
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f063 030e 	orn	r3, r3, #14
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	b2da      	uxtb	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <I2C_Master_ADD10+0x26>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <I2C_Master_ADD10+0x48>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	605a      	str	r2, [r3, #4]
  }
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800338a:	b480      	push	{r7}
 800338c:	b091      	sub	sp, #68	; 0x44
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003398:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b22      	cmp	r3, #34	; 0x22
 80033b2:	f040 8174 	bne.w	800369e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <I2C_Master_ADDR+0x54>
 80033be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d10b      	bne.n	80033de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	e16b      	b.n	80036b6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d11d      	bne.n	8003422 <I2C_Master_ADDR+0x98>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ee:	d118      	bne.n	8003422 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003414:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
 8003420:	e149      	b.n	80036b6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d113      	bne.n	8003454 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e120      	b.n	8003696 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	f040 808a 	bne.w	8003574 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003466:	d137      	bne.n	80034d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003476:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003486:	d113      	bne.n	80034b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003496:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	e0f2      	b.n	8003696 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e0de      	b.n	8003696 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d02e      	beq.n	800353c <I2C_Master_ADDR+0x1b2>
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d02b      	beq.n	800353c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	d102      	bne.n	80034f0 <I2C_Master_ADDR+0x166>
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d125      	bne.n	800353c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00e      	beq.n	8003514 <I2C_Master_ADDR+0x18a>
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d00b      	beq.n	8003514 <I2C_Master_ADDR+0x18a>
 80034fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d008      	beq.n	8003514 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003522:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	e0ac      	b.n	8003696 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e090      	b.n	8003696 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d158      	bne.n	8003630 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b04      	cmp	r3, #4
 8003582:	d021      	beq.n	80035c8 <I2C_Master_ADDR+0x23e>
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	2b02      	cmp	r3, #2
 8003588:	d01e      	beq.n	80035c8 <I2C_Master_ADDR+0x23e>
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b10      	cmp	r3, #16
 800358e:	d01b      	beq.n	80035c8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e012      	b.n	80035ee <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fc:	d14b      	bne.n	8003696 <I2C_Master_ADDR+0x30c>
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003604:	d00b      	beq.n	800361e <I2C_Master_ADDR+0x294>
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	2b01      	cmp	r3, #1
 800360a:	d008      	beq.n	800361e <I2C_Master_ADDR+0x294>
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	2b08      	cmp	r3, #8
 8003610:	d005      	beq.n	800361e <I2C_Master_ADDR+0x294>
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b10      	cmp	r3, #16
 8003616:	d002      	beq.n	800361e <I2C_Master_ADDR+0x294>
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	2b20      	cmp	r3, #32
 800361c:	d13b      	bne.n	8003696 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e032      	b.n	8003696 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800363e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364e:	d117      	bne.n	8003680 <I2C_Master_ADDR+0x2f6>
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003656:	d00b      	beq.n	8003670 <I2C_Master_ADDR+0x2e6>
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2b01      	cmp	r3, #1
 800365c:	d008      	beq.n	8003670 <I2C_Master_ADDR+0x2e6>
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b08      	cmp	r3, #8
 8003662:	d005      	beq.n	8003670 <I2C_Master_ADDR+0x2e6>
 8003664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003666:	2b10      	cmp	r3, #16
 8003668:	d002      	beq.n	8003670 <I2C_Master_ADDR+0x2e6>
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	2b20      	cmp	r3, #32
 800366e:	d107      	bne.n	8003680 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800367e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800369c:	e00b      	b.n	80036b6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
}
 80036b4:	e7ff      	b.n	80036b6 <I2C_Master_ADDR+0x32c>
 80036b6:	bf00      	nop
 80036b8:	3744      	adds	r7, #68	; 0x44
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d02b      	beq.n	8003732 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <I2C_SlaveTransmit_TXE+0x72>
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b29      	cmp	r3, #41	; 0x29
 800370c:	d111      	bne.n	8003732 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2228      	movs	r2, #40	; 0x28
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff f9e3 	bl	8002af8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d011      	beq.n	8003770 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02c      	beq.n	80037ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d114      	bne.n	80037ee <I2C_SlaveReceive_RXNE+0x74>
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b2a      	cmp	r3, #42	; 0x2a
 80037c8:	d111      	bne.n	80037ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2222      	movs	r2, #34	; 0x22
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2228      	movs	r2, #40	; 0x28
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff f98e 	bl	8002b0a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003852:	2b28      	cmp	r3, #40	; 0x28
 8003854:	d125      	bne.n	80038a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	81bb      	strh	r3, [r7, #12]
 8003884:	e002      	b.n	800388c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003894:	89ba      	ldrh	r2, [r7, #12]
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff f93e 	bl	8002b1c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038a0:	e00e      	b.n	80038c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003924:	d172      	bne.n	8003a0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b22      	cmp	r3, #34	; 0x22
 800392a:	d002      	beq.n	8003932 <I2C_Slave_STOPF+0x6a>
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b2a      	cmp	r3, #42	; 0x2a
 8003930:	d135      	bne.n	800399e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0204 	orr.w	r2, r3, #4
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003964:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fad0 	bl	8001f10 <HAL_DMA_GetState>
 8003970:	4603      	mov	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d049      	beq.n	8003a0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	4a69      	ldr	r2, [pc, #420]	; (8003b20 <I2C_Slave_STOPF+0x258>)
 800397c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fa4c 	bl	8001e20 <HAL_DMA_Abort_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03d      	beq.n	8003a0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800399c:	e035      	b.n	8003a0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f043 0204 	orr.w	r2, r3, #4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fa9a 	bl	8001f10 <HAL_DMA_GetState>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d014      	beq.n	8003a0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e6:	4a4e      	ldr	r2, [pc, #312]	; (8003b20 <I2C_Slave_STOPF+0x258>)
 80039e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fa16 	bl	8001e20 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
 8003a08:	e000      	b.n	8003a0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03e      	beq.n	8003a94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d112      	bne.n	8003a4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d112      	bne.n	8003a7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8b7 	bl	8003c10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003aa2:	e039      	b.n	8003b18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa8:	d109      	bne.n	8003abe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2228      	movs	r2, #40	; 0x28
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff f826 	bl	8002b0a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b28      	cmp	r3, #40	; 0x28
 8003ac8:	d111      	bne.n	8003aee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <I2C_Slave_STOPF+0x25c>)
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff f825 	bl	8002b36 <HAL_I2C_ListenCpltCallback>
}
 8003aec:	e014      	b.n	8003b18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	2b22      	cmp	r3, #34	; 0x22
 8003af4:	d002      	beq.n	8003afc <I2C_Slave_STOPF+0x234>
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	2b22      	cmp	r3, #34	; 0x22
 8003afa:	d10d      	bne.n	8003b18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fff9 	bl	8002b0a <HAL_I2C_SlaveRxCpltCallback>
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	08003f79 	.word	0x08003f79
 8003b24:	ffff0000 	.word	0xffff0000

08003b28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d002      	beq.n	8003b4a <I2C_Slave_AF+0x22>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d129      	bne.n	8003b9e <I2C_Slave_AF+0x76>
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b28      	cmp	r3, #40	; 0x28
 8003b4e:	d126      	bne.n	8003b9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <I2C_Slave_AF+0xe4>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fe ffcd 	bl	8002b36 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003b9c:	e031      	b.n	8003c02 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	2b21      	cmp	r3, #33	; 0x21
 8003ba2:	d129      	bne.n	8003bf8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <I2C_Slave_AF+0xe4>)
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2221      	movs	r2, #33	; 0x21
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fc66 	bl	80024bc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fe ff81 	bl	8002af8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bf6:	e004      	b.n	8003c02 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c00:	615a      	str	r2, [r3, #20]
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c28:	7bbb      	ldrb	r3, [r7, #14]
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d002      	beq.n	8003c34 <I2C_ITError+0x24>
 8003c2e:	7bbb      	ldrb	r3, [r7, #14]
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d10a      	bne.n	8003c4a <I2C_ITError+0x3a>
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b22      	cmp	r3, #34	; 0x22
 8003c38:	d107      	bne.n	8003c4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c50:	2b28      	cmp	r3, #40	; 0x28
 8003c52:	d107      	bne.n	8003c64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2228      	movs	r2, #40	; 0x28
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c62:	e015      	b.n	8003c90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d00a      	beq.n	8003c8a <I2C_ITError+0x7a>
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b60      	cmp	r3, #96	; 0x60
 8003c78:	d007      	beq.n	8003c8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9e:	d162      	bne.n	8003d66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d020      	beq.n	8003d00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc2:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <I2C_ITError+0x25c>)
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe f8a8 	bl	8001e20 <HAL_DMA_Abort_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8089 	beq.w	8003dea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4798      	blx	r3
 8003cfe:	e074      	b.n	8003dea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	4a59      	ldr	r2, [pc, #356]	; (8003e6c <I2C_ITError+0x25c>)
 8003d06:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe f887 	bl	8001e20 <HAL_DMA_Abort_IT>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d068      	beq.n	8003dea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d10b      	bne.n	8003d3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d60:	4610      	mov	r0, r2
 8003d62:	4798      	blx	r3
 8003d64:	e041      	b.n	8003dea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b60      	cmp	r3, #96	; 0x60
 8003d70:	d125      	bne.n	8003dbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10b      	bne.n	8003da6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe fee1 	bl	8002b7e <HAL_I2C_AbortCpltCallback>
 8003dbc:	e015      	b.n	8003dea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d10b      	bne.n	8003de4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fe fec1 	bl	8002b6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10e      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d104      	bne.n	8003e18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d113      	bne.n	8003e64 <I2C_ITError+0x254>
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b28      	cmp	r3, #40	; 0x28
 8003e40:	d110      	bne.n	8003e64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <I2C_ITError+0x260>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe fe69 	bl	8002b36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08003f79 	.word	0x08003f79
 8003e70:	ffff0000 	.word	0xffff0000

08003e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	460b      	mov	r3, r1
 8003e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d006      	beq.n	8003e9e <I2C_MasterRequestWrite+0x2a>
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d003      	beq.n	8003e9e <I2C_MasterRequestWrite+0x2a>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e00b      	b.n	8003ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	2b12      	cmp	r3, #18
 8003eb6:	d107      	bne.n	8003ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f8f7 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00d      	beq.n	8003efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eee:	d103      	bne.n	8003ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e035      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f04:	d108      	bne.n	8003f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f14:	611a      	str	r2, [r3, #16]
 8003f16:	e01b      	b.n	8003f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f18:	897b      	ldrh	r3, [r7, #10]
 8003f1a:	11db      	asrs	r3, r3, #7
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f063 030f 	orn	r3, r3, #15
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <I2C_MasterRequestWrite+0xfc>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f940 	bl	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e010      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f46:	897b      	ldrh	r3, [r7, #10]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4907      	ldr	r1, [pc, #28]	; (8003f74 <I2C_MasterRequestWrite+0x100>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f930 	bl	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	00010008 	.word	0x00010008
 8003f74:	00010002 	.word	0x00010002

08003f78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f92:	4b4b      	ldr	r3, [pc, #300]	; (80040c0 <I2C_DMAAbort+0x148>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	08db      	lsrs	r3, r3, #3
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <I2C_DMAAbort+0x14c>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0a1a      	lsrs	r2, r3, #8
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00da      	lsls	r2, r3, #3
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003fbe:	e00a      	b.n	8003fd6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d0ea      	beq.n	8003fac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004004:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004018:	2200      	movs	r2, #0
 800401a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	2200      	movs	r2, #0
 800402a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d10e      	bne.n	8004066 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7fe fd8d 	bl	8002b7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004064:	e027      	b.n	80040b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004066:	7cfb      	ldrb	r3, [r7, #19]
 8004068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800406c:	2b28      	cmp	r3, #40	; 0x28
 800406e:	d117      	bne.n	80040a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2228      	movs	r2, #40	; 0x28
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800409e:	e007      	b.n	80040b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040b0:	6978      	ldr	r0, [r7, #20]
 80040b2:	f7fe fd5b 	bl	8002b6c <HAL_I2C_ErrorCallback>
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000
 80040c4:	14f8b589 	.word	0x14f8b589

080040c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d8:	e048      	b.n	800416c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d044      	beq.n	800416c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fd f929 	bl	8001338 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d139      	bne.n	800416c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d10d      	bne.n	800411e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	43da      	mvns	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	e00c      	b.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x70>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	43da      	mvns	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	429a      	cmp	r2, r3
 800413c:	d116      	bne.n	800416c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e023      	b.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10d      	bne.n	8004192 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	43da      	mvns	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4013      	ands	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	e00c      	b.n	80041ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	43da      	mvns	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d093      	beq.n	80040da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ca:	e071      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d123      	bne.n	8004224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f043 0204 	orr.w	r2, r3, #4
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e067      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d041      	beq.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fd f884 	bl	8001338 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d136      	bne.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10c      	bne.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	43da      	mvns	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4013      	ands	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e00b      	b.n	800427e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	43da      	mvns	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f043 0220 	orr.w	r2, r3, #32
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e021      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10c      	bne.n	80042d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e00b      	b.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	43da      	mvns	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f af6d 	bne.w	80041cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004308:	e034      	b.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f8b8 	bl	8004480 <I2C_IsAcknowledgeFailed>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e034      	b.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d028      	beq.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd f809 	bl	8001338 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b80      	cmp	r3, #128	; 0x80
 8004344:	d016      	beq.n	8004374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e007      	b.n	8004384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d1c3      	bne.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004398:	e034      	b.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f870 	bl	8004480 <I2C_IsAcknowledgeFailed>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e034      	b.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d028      	beq.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fc ffc1 	bl	8001338 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d016      	beq.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b04      	cmp	r3, #4
 8004410:	d1c3      	bne.n	800439a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	4a13      	ldr	r2, [pc, #76]	; (800447c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	0a1a      	lsrs	r2, r3, #8
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b01      	subs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d107      	bne.n	800445a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f043 0220 	orr.w	r2, r3, #32
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e008      	b.n	800446c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004468:	d0e9      	beq.n	800443e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000
 800447c:	14f8b589 	.word	0x14f8b589

08004480 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004496:	d11b      	bne.n	80044d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044ec:	d103      	bne.n	80044f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044f4:	e007      	b.n	8004506 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044fe:	d102      	bne.n	8004506 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2208      	movs	r2, #8
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e272      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8087 	beq.w	800463e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004530:	4b92      	ldr	r3, [pc, #584]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b04      	cmp	r3, #4
 800453a:	d00c      	beq.n	8004556 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800453c:	4b8f      	ldr	r3, [pc, #572]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b08      	cmp	r3, #8
 8004546:	d112      	bne.n	800456e <HAL_RCC_OscConfig+0x5e>
 8004548:	4b8c      	ldr	r3, [pc, #560]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d10b      	bne.n	800456e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004556:	4b89      	ldr	r3, [pc, #548]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d06c      	beq.n	800463c <HAL_RCC_OscConfig+0x12c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d168      	bne.n	800463c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e24c      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x76>
 8004578:	4b80      	ldr	r3, [pc, #512]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a7f      	ldr	r2, [pc, #508]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	e02e      	b.n	80045e4 <HAL_RCC_OscConfig+0xd4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x98>
 800458e:	4b7b      	ldr	r3, [pc, #492]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7a      	ldr	r2, [pc, #488]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b78      	ldr	r3, [pc, #480]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a77      	ldr	r2, [pc, #476]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e01d      	b.n	80045e4 <HAL_RCC_OscConfig+0xd4>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0xbc>
 80045b2:	4b72      	ldr	r3, [pc, #456]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a71      	ldr	r2, [pc, #452]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6e      	ldr	r2, [pc, #440]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xd4>
 80045cc:	4b6b      	ldr	r3, [pc, #428]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a6a      	ldr	r2, [pc, #424]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b68      	ldr	r3, [pc, #416]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a67      	ldr	r2, [pc, #412]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fc fea4 	bl	8001338 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fc fea0 	bl	8001338 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e200      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b5d      	ldr	r3, [pc, #372]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe4>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fc fe90 	bl	8001338 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fc fe8c 	bl	8001338 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e1ec      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800462e:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x10c>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d063      	beq.n	8004712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800464a:	4b4c      	ldr	r3, [pc, #304]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004656:	4b49      	ldr	r3, [pc, #292]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	2b08      	cmp	r3, #8
 8004660:	d11c      	bne.n	800469c <HAL_RCC_OscConfig+0x18c>
 8004662:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d116      	bne.n	800469c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466e:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_RCC_OscConfig+0x176>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e1c0      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4939      	ldr	r1, [pc, #228]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469a:	e03a      	b.n	8004712 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fc fe45 	bl	8001338 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fc fe41 	bl	8001338 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1a1      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c4:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d0:	4b2a      	ldr	r3, [pc, #168]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4927      	ldr	r1, [pc, #156]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
 80046e4:	e015      	b.n	8004712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e6:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_RCC_OscConfig+0x270>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fe24 	bl	8001338 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fc fe20 	bl	8001338 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e180      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d03a      	beq.n	8004794 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d019      	beq.n	800475a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004726:	4b17      	ldr	r3, [pc, #92]	; (8004784 <HAL_RCC_OscConfig+0x274>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472c:	f7fc fe04 	bl	8001338 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fc fe00 	bl	8001338 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e160      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_RCC_OscConfig+0x26c>)
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004752:	2001      	movs	r0, #1
 8004754:	f000 face 	bl	8004cf4 <RCC_Delay>
 8004758:	e01c      	b.n	8004794 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_OscConfig+0x274>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004760:	f7fc fdea 	bl	8001338 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004766:	e00f      	b.n	8004788 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004768:	f7fc fde6 	bl	8001338 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d908      	bls.n	8004788 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e146      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	42420000 	.word	0x42420000
 8004784:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004788:	4b92      	ldr	r3, [pc, #584]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e9      	bne.n	8004768 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a6 	beq.w	80048ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a6:	4b8b      	ldr	r3, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4a87      	ldr	r2, [pc, #540]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	61d3      	str	r3, [r2, #28]
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b82      	ldr	r3, [pc, #520]	; (80049d8 <HAL_RCC_OscConfig+0x4c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d118      	bne.n	800480c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047da:	4b7f      	ldr	r3, [pc, #508]	; (80049d8 <HAL_RCC_OscConfig+0x4c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7e      	ldr	r2, [pc, #504]	; (80049d8 <HAL_RCC_OscConfig+0x4c8>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e6:	f7fc fda7 	bl	8001338 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ee:	f7fc fda3 	bl	8001338 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b64      	cmp	r3, #100	; 0x64
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e103      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	4b75      	ldr	r3, [pc, #468]	; (80049d8 <HAL_RCC_OscConfig+0x4c8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x312>
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a6e      	ldr	r2, [pc, #440]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6213      	str	r3, [r2, #32]
 8004820:	e02d      	b.n	800487e <HAL_RCC_OscConfig+0x36e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x334>
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4a69      	ldr	r2, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6213      	str	r3, [r2, #32]
 8004836:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	4a66      	ldr	r2, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6213      	str	r3, [r2, #32]
 8004842:	e01c      	b.n	800487e <HAL_RCC_OscConfig+0x36e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d10c      	bne.n	8004866 <HAL_RCC_OscConfig+0x356>
 800484c:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	4a60      	ldr	r2, [pc, #384]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004852:	f043 0304 	orr.w	r3, r3, #4
 8004856:	6213      	str	r3, [r2, #32]
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6213      	str	r3, [r2, #32]
 8004864:	e00b      	b.n	800487e <HAL_RCC_OscConfig+0x36e>
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4a5a      	ldr	r2, [pc, #360]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6213      	str	r3, [r2, #32]
 8004872:	4b58      	ldr	r3, [pc, #352]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4a57      	ldr	r2, [pc, #348]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d015      	beq.n	80048b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004886:	f7fc fd57 	bl	8001338 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fc fd53 	bl	8001338 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	; 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e0b1      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ee      	beq.n	800488e <HAL_RCC_OscConfig+0x37e>
 80048b0:	e014      	b.n	80048dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fc fd41 	bl	8001338 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b8:	e00a      	b.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ba:	f7fc fd3d 	bl	8001338 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e09b      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d0:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ee      	bne.n	80048ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d105      	bne.n	80048ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e2:	4b3c      	ldr	r3, [pc, #240]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4a3b      	ldr	r2, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8087 	beq.w	8004a06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 030c 	and.w	r3, r3, #12
 8004900:	2b08      	cmp	r3, #8
 8004902:	d061      	beq.n	80049c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d146      	bne.n	800499a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490c:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_RCC_OscConfig+0x4cc>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fc fd11 	bl	8001338 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fc fd0d 	bl	8001338 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e06d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f0      	bne.n	800491a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004940:	d108      	bne.n	8004954 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4921      	ldr	r1, [pc, #132]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004954:	4b1f      	ldr	r3, [pc, #124]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a19      	ldr	r1, [r3, #32]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	430b      	orrs	r3, r1
 8004966:	491b      	ldr	r1, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x4cc>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fc fce1 	bl	8001338 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7fc fcdd 	bl	8001338 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e03d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x46a>
 8004998:	e035      	b.n	8004a06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_OscConfig+0x4cc>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fc fcca 	bl	8001338 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fc fcc6 	bl	8001338 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e026      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x498>
 80049c6:	e01e      	b.n	8004a06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e019      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_OscConfig+0x500>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000

08004a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d0      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a28:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d910      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 0207 	bic.w	r2, r3, #7
 8004a3e:	4965      	ldr	r1, [pc, #404]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b63      	ldr	r3, [pc, #396]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0b8      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a70:	4b59      	ldr	r3, [pc, #356]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a58      	ldr	r2, [pc, #352]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a88:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a52      	ldr	r2, [pc, #328]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b50      	ldr	r3, [pc, #320]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	494d      	ldr	r1, [pc, #308]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d040      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b47      	ldr	r3, [pc, #284]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d115      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07f      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad2:	4b41      	ldr	r3, [pc, #260]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e073      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae2:	4b3d      	ldr	r3, [pc, #244]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e06b      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af2:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f023 0203 	bic.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4936      	ldr	r1, [pc, #216]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b04:	f7fc fc18 	bl	8001338 <HAL_GetTick>
 8004b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fc fc14 	bl	8001338 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e053      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 020c 	and.w	r2, r3, #12
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1eb      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d210      	bcs.n	8004b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 0207 	bic.w	r2, r3, #7
 8004b4a:	4922      	ldr	r1, [pc, #136]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b52:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e032      	b.n	8004bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4916      	ldr	r1, [pc, #88]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	490e      	ldr	r1, [pc, #56]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba2:	f000 f821 	bl	8004be8 <HAL_RCC_GetSysClockFreq>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490a      	ldr	r1, [pc, #40]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1cc>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1d0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fb76 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	08008674 	.word	0x08008674
 8004be0:	20000000 	.word	0x20000000
 8004be4:	20000004 	.word	0x20000004

08004be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x30>
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x36>
 8004c16:	e027      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c1a:	613b      	str	r3, [r7, #16]
      break;
 8004c1c:	e027      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	0c9b      	lsrs	r3, r3, #18
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c28:	5cd3      	ldrb	r3, [r2, r3]
 8004c2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	0c5b      	lsrs	r3, r3, #17
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c4a:	fb03 f202 	mul.w	r2, r3, r2
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e004      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	613b      	str	r3, [r7, #16]
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c6a:	613b      	str	r3, [r7, #16]
      break;
 8004c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6e:	693b      	ldr	r3, [r7, #16]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	007a1200 	.word	0x007a1200
 8004c84:	0800868c 	.word	0x0800868c
 8004c88:	0800869c 	.word	0x0800869c
 8004c8c:	003d0900 	.word	0x003d0900

08004c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	20000000 	.word	0x20000000

08004ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca8:	f7ff fff2 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	0a1b      	lsrs	r3, r3, #8
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	4903      	ldr	r1, [pc, #12]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40021000 	.word	0x40021000
 8004cc8:	08008684 	.word	0x08008684

08004ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd0:	f7ff ffde 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	0adb      	lsrs	r3, r3, #11
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	4903      	ldr	r1, [pc, #12]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce2:	5ccb      	ldrb	r3, [r1, r3]
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	08008684 	.word	0x08008684

08004cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <RCC_Delay+0x34>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <RCC_Delay+0x38>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0a5b      	lsrs	r3, r3, #9
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d10:	bf00      	nop
  }
  while (Delay --);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	60fa      	str	r2, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f9      	bne.n	8004d10 <RCC_Delay+0x1c>
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	20000000 	.word	0x20000000
 8004d2c:	10624dd3 	.word	0x10624dd3

08004d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d07d      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d50:	4b4f      	ldr	r3, [pc, #316]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	4a4b      	ldr	r2, [pc, #300]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	61d3      	str	r3, [r2, #28]
 8004d68:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d118      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d90:	f7fc fad2 	bl	8001338 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	e008      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d98:	f7fc face 	bl	8001338 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b64      	cmp	r3, #100	; 0x64
 8004da4:	d901      	bls.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e06d      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db6:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02e      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d027      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004de0:	2201      	movs	r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dea:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d014      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfa:	f7fc fa9d 	bl	8001338 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e02:	f7fc fa99 	bl	8001338 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e036      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e24:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4917      	ldr	r1, [pc, #92]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	490b      	ldr	r1, [pc, #44]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e72:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4904      	ldr	r1, [pc, #16]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
 8004e94:	40007000 	.word	0x40007000
 8004e98:	42420440 	.word	0x42420440

08004e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e042      	b.n	8004f34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc f850 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2224      	movs	r2, #36	; 0x24
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fc7f 	bl	80057e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b0ba      	sub	sp, #232	; 0xe8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
 8004f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb63 	bl	8005666 <UART_Receive_IT>
      return;
 8004fa0:	e25b      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80de 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80d1 	beq.w	8005168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
 8004fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
 8004ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
 800501a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f043 0204 	orr.w	r2, r3, #4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
 800503e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d105      	bne.n	8005056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 81f2 	beq.w	8005450 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d008      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 faee 	bl	8005666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_UART_IRQHandler+0x17a>
 80050ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d04f      	beq.n	8005156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9f8 	bl	80054ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d041      	beq.n	800514e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3314      	adds	r3, #20
 80050f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d9      	bne.n	80050ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d013      	beq.n	8005146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	4a7e      	ldr	r2, [pc, #504]	; (800531c <HAL_UART_IRQHandler+0x3e0>)
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc fe78 	bl	8001e20 <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00e      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f99c 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00a      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f998 	bl	8005484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e006      	b.n	8005164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f994 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005162:	e175      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	bf00      	nop
    return;
 8005166:	e173      	b.n	8005450 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 814f 	bne.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8148 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f003 0310 	and.w	r3, r3, #16
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8141 	beq.w	8005410 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 80b6 	beq.w	8005320 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8145 	beq.w	8005454 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f080 813e 	bcs.w	8005454 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	f000 8088 	beq.w	80052fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005218:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800521c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005224:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1d9      	bne.n	80051ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800525c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005260:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800526e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e1      	bne.n	8005238 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3314      	adds	r3, #20
 800527a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005298:	66fa      	str	r2, [r7, #108]	; 0x6c
 800529a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800529e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	330c      	adds	r3, #12
 80052da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052de:	65ba      	str	r2, [r7, #88]	; 0x58
 80052e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fc fd57 	bl	8001daa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530a:	b29b      	uxth	r3, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8bf 	bl	8005496 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005318:	e09c      	b.n	8005454 <HAL_UART_IRQHandler+0x518>
 800531a:	bf00      	nop
 800531c:	08005571 	.word	0x08005571
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 808e 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800533c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8089 	beq.w	8005458 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800535c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800536a:	647a      	str	r2, [r7, #68]	; 0x44
 800536c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e3      	bne.n	8005346 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3314      	adds	r3, #20
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	623b      	str	r3, [r7, #32]
   return(result);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a2:	633a      	str	r2, [r7, #48]	; 0x30
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e3      	bne.n	800537e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053e8:	61fa      	str	r2, [r7, #28]
 80053ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f844 	bl	8005496 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540e:	e023      	b.n	8005458 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8b5 	bl	8005598 <UART_Transmit_IT>
    return;
 800542e:	e014      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8f4 	bl	8005636 <UART_EndTransmit_IT>
    return;
 800544e:	e004      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
    return;
 8005450:	bf00      	nop
 8005452:	e002      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005454:	bf00      	nop
 8005456:	e000      	b.n	800545a <HAL_UART_IRQHandler+0x51e>
      return;
 8005458:	bf00      	nop
  }
}
 800545a:	37e8      	adds	r7, #232	; 0xe8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr

08005484 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr

08005496 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b095      	sub	sp, #84	; 0x54
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d4:	643a      	str	r2, [r7, #64]	; 0x40
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	2b01      	cmp	r3, #1
 8005522:	d119      	bne.n	8005558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60bb      	str	r3, [r7, #8]
   return(result);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005544:	61ba      	str	r2, [r7, #24]
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005566:	bf00      	nop
 8005568:	3754      	adds	r7, #84	; 0x54
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff7a 	bl	8005484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b21      	cmp	r3, #33	; 0x21
 80055aa:	d13e      	bne.n	800562a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d114      	bne.n	80055e0 <UART_Transmit_IT+0x48>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d110      	bne.n	80055e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]
 80055de:	e008      	b.n	80055f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6211      	str	r1, [r2, #32]
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4619      	mov	r1, r3
 8005600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e000      	b.n	800562c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff02 	bl	8005460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08c      	sub	sp, #48	; 0x30
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b22      	cmp	r3, #34	; 0x22
 8005678:	f040 80ae 	bne.w	80057d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d117      	bne.n	80056b6 <UART_Receive_IT+0x50>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d113      	bne.n	80056b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
 80056b4:	e026      	b.n	8005704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d007      	beq.n	80056da <UART_Receive_IT+0x74>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <UART_Receive_IT+0x82>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005714:	2b00      	cmp	r3, #0
 8005716:	d15d      	bne.n	80057d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0220 	bic.w	r2, r2, #32
 8005726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	2b01      	cmp	r3, #1
 800575c:	d135      	bne.n	80057ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	613b      	str	r3, [r7, #16]
   return(result);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	623a      	str	r2, [r7, #32]
 8005786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	61bb      	str	r3, [r7, #24]
   return(result);
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e5      	bne.n	8005764 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d10a      	bne.n	80057bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a6:	2300      	movs	r3, #0
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fe67 	bl	8005496 <HAL_UARTEx_RxEventCallback>
 80057c8:	e002      	b.n	80057d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fe51 	bl	8005472 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e002      	b.n	80057da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e000      	b.n	80057da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3730      	adds	r7, #48	; 0x30
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800581e:	f023 030c 	bic.w	r3, r3, #12
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6812      	ldr	r2, [r2, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	430b      	orrs	r3, r1
 800582a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2c      	ldr	r2, [pc, #176]	; (80058f8 <UART_SetConfig+0x114>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7ff fa3e 	bl	8004ccc <HAL_RCC_GetPCLK2Freq>
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	e002      	b.n	800585a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7ff fa26 	bl	8004ca4 <HAL_RCC_GetPCLK1Freq>
 8005858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009a      	lsls	r2, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <UART_SetConfig+0x118>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	0119      	lsls	r1, r3, #4
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009a      	lsls	r2, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <UART_SetConfig+0x118>)
 8005892:	fba3 0302 	umull	r0, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2064      	movs	r0, #100	; 0x64
 800589a:	fb00 f303 	mul.w	r3, r0, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a15      	ldr	r2, [pc, #84]	; (80058fc <UART_SetConfig+0x118>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b0:	4419      	add	r1, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009a      	lsls	r2, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <UART_SetConfig+0x118>)
 80058ca:	fba3 0302 	umull	r0, r3, r3, r2
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2064      	movs	r0, #100	; 0x64
 80058d2:	fb00 f303 	mul.w	r3, r0, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	3332      	adds	r3, #50	; 0x32
 80058dc:	4a07      	ldr	r2, [pc, #28]	; (80058fc <UART_SetConfig+0x118>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	440a      	add	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40013800 	.word	0x40013800
 80058fc:	51eb851f 	.word	0x51eb851f

08005900 <__cvt>:
 8005900:	2b00      	cmp	r3, #0
 8005902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005906:	461f      	mov	r7, r3
 8005908:	bfbb      	ittet	lt
 800590a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800590e:	461f      	movlt	r7, r3
 8005910:	2300      	movge	r3, #0
 8005912:	232d      	movlt	r3, #45	; 0x2d
 8005914:	b088      	sub	sp, #32
 8005916:	4614      	mov	r4, r2
 8005918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800591a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800591c:	7013      	strb	r3, [r2, #0]
 800591e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005920:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005924:	f023 0820 	bic.w	r8, r3, #32
 8005928:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800592c:	d005      	beq.n	800593a <__cvt+0x3a>
 800592e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005932:	d100      	bne.n	8005936 <__cvt+0x36>
 8005934:	3501      	adds	r5, #1
 8005936:	2302      	movs	r3, #2
 8005938:	e000      	b.n	800593c <__cvt+0x3c>
 800593a:	2303      	movs	r3, #3
 800593c:	aa07      	add	r2, sp, #28
 800593e:	9204      	str	r2, [sp, #16]
 8005940:	aa06      	add	r2, sp, #24
 8005942:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005946:	e9cd 3500 	strd	r3, r5, [sp]
 800594a:	4622      	mov	r2, r4
 800594c:	463b      	mov	r3, r7
 800594e:	f000 fe73 	bl	8006638 <_dtoa_r>
 8005952:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005956:	4606      	mov	r6, r0
 8005958:	d102      	bne.n	8005960 <__cvt+0x60>
 800595a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800595c:	07db      	lsls	r3, r3, #31
 800595e:	d522      	bpl.n	80059a6 <__cvt+0xa6>
 8005960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005964:	eb06 0905 	add.w	r9, r6, r5
 8005968:	d110      	bne.n	800598c <__cvt+0x8c>
 800596a:	7833      	ldrb	r3, [r6, #0]
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d10a      	bne.n	8005986 <__cvt+0x86>
 8005970:	2200      	movs	r2, #0
 8005972:	2300      	movs	r3, #0
 8005974:	4620      	mov	r0, r4
 8005976:	4639      	mov	r1, r7
 8005978:	f7fb f816 	bl	80009a8 <__aeabi_dcmpeq>
 800597c:	b918      	cbnz	r0, 8005986 <__cvt+0x86>
 800597e:	f1c5 0501 	rsb	r5, r5, #1
 8005982:	f8ca 5000 	str.w	r5, [sl]
 8005986:	f8da 3000 	ldr.w	r3, [sl]
 800598a:	4499      	add	r9, r3
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	4620      	mov	r0, r4
 8005992:	4639      	mov	r1, r7
 8005994:	f7fb f808 	bl	80009a8 <__aeabi_dcmpeq>
 8005998:	b108      	cbz	r0, 800599e <__cvt+0x9e>
 800599a:	f8cd 901c 	str.w	r9, [sp, #28]
 800599e:	2230      	movs	r2, #48	; 0x30
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	454b      	cmp	r3, r9
 80059a4:	d307      	bcc.n	80059b6 <__cvt+0xb6>
 80059a6:	4630      	mov	r0, r6
 80059a8:	9b07      	ldr	r3, [sp, #28]
 80059aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059ac:	1b9b      	subs	r3, r3, r6
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	b008      	add	sp, #32
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b6:	1c59      	adds	r1, r3, #1
 80059b8:	9107      	str	r1, [sp, #28]
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e7f0      	b.n	80059a0 <__cvt+0xa0>

080059be <__exponent>:
 80059be:	4603      	mov	r3, r0
 80059c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059c2:	2900      	cmp	r1, #0
 80059c4:	f803 2b02 	strb.w	r2, [r3], #2
 80059c8:	bfb6      	itet	lt
 80059ca:	222d      	movlt	r2, #45	; 0x2d
 80059cc:	222b      	movge	r2, #43	; 0x2b
 80059ce:	4249      	neglt	r1, r1
 80059d0:	2909      	cmp	r1, #9
 80059d2:	7042      	strb	r2, [r0, #1]
 80059d4:	dd2a      	ble.n	8005a2c <__exponent+0x6e>
 80059d6:	f10d 0207 	add.w	r2, sp, #7
 80059da:	4617      	mov	r7, r2
 80059dc:	260a      	movs	r6, #10
 80059de:	fb91 f5f6 	sdiv	r5, r1, r6
 80059e2:	4694      	mov	ip, r2
 80059e4:	fb06 1415 	mls	r4, r6, r5, r1
 80059e8:	3430      	adds	r4, #48	; 0x30
 80059ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80059ee:	460c      	mov	r4, r1
 80059f0:	2c63      	cmp	r4, #99	; 0x63
 80059f2:	4629      	mov	r1, r5
 80059f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80059f8:	dcf1      	bgt.n	80059de <__exponent+0x20>
 80059fa:	3130      	adds	r1, #48	; 0x30
 80059fc:	f1ac 0402 	sub.w	r4, ip, #2
 8005a00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a04:	4622      	mov	r2, r4
 8005a06:	1c41      	adds	r1, r0, #1
 8005a08:	42ba      	cmp	r2, r7
 8005a0a:	d30a      	bcc.n	8005a22 <__exponent+0x64>
 8005a0c:	f10d 0209 	add.w	r2, sp, #9
 8005a10:	eba2 020c 	sub.w	r2, r2, ip
 8005a14:	42bc      	cmp	r4, r7
 8005a16:	bf88      	it	hi
 8005a18:	2200      	movhi	r2, #0
 8005a1a:	4413      	add	r3, r2
 8005a1c:	1a18      	subs	r0, r3, r0
 8005a1e:	b003      	add	sp, #12
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a22:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a26:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a2a:	e7ed      	b.n	8005a08 <__exponent+0x4a>
 8005a2c:	2330      	movs	r3, #48	; 0x30
 8005a2e:	3130      	adds	r1, #48	; 0x30
 8005a30:	7083      	strb	r3, [r0, #2]
 8005a32:	70c1      	strb	r1, [r0, #3]
 8005a34:	1d03      	adds	r3, r0, #4
 8005a36:	e7f1      	b.n	8005a1c <__exponent+0x5e>

08005a38 <_printf_float>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	b091      	sub	sp, #68	; 0x44
 8005a3e:	460c      	mov	r4, r1
 8005a40:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a44:	4616      	mov	r6, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	4605      	mov	r5, r0
 8005a4a:	f000 fce5 	bl	8006418 <_localeconv_r>
 8005a4e:	6803      	ldr	r3, [r0, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	9309      	str	r3, [sp, #36]	; 0x24
 8005a54:	f7fa fb7c 	bl	8000150 <strlen>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a60:	900a      	str	r0, [sp, #40]	; 0x28
 8005a62:	3307      	adds	r3, #7
 8005a64:	f023 0307 	bic.w	r3, r3, #7
 8005a68:	f103 0208 	add.w	r2, r3, #8
 8005a6c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a70:	f8d4 b000 	ldr.w	fp, [r4]
 8005a74:	f8c8 2000 	str.w	r2, [r8]
 8005a78:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	4643      	mov	r3, r8
 8005a80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a84:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	4650      	mov	r0, sl
 8005a90:	4b9c      	ldr	r3, [pc, #624]	; (8005d04 <_printf_float+0x2cc>)
 8005a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a94:	f7fa ffba 	bl	8000a0c <__aeabi_dcmpun>
 8005a98:	bb70      	cbnz	r0, 8005af8 <_printf_float+0xc0>
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4b98      	ldr	r3, [pc, #608]	; (8005d04 <_printf_float+0x2cc>)
 8005aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa4:	f7fa ff94 	bl	80009d0 <__aeabi_dcmple>
 8005aa8:	bb30      	cbnz	r0, 8005af8 <_printf_float+0xc0>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	4650      	mov	r0, sl
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	f7fa ff83 	bl	80009bc <__aeabi_dcmplt>
 8005ab6:	b110      	cbz	r0, 8005abe <_printf_float+0x86>
 8005ab8:	232d      	movs	r3, #45	; 0x2d
 8005aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abe:	4a92      	ldr	r2, [pc, #584]	; (8005d08 <_printf_float+0x2d0>)
 8005ac0:	4b92      	ldr	r3, [pc, #584]	; (8005d0c <_printf_float+0x2d4>)
 8005ac2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ac6:	bf94      	ite	ls
 8005ac8:	4690      	movls	r8, r2
 8005aca:	4698      	movhi	r8, r3
 8005acc:	2303      	movs	r3, #3
 8005ace:	f04f 0a00 	mov.w	sl, #0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f02b 0304 	bic.w	r3, fp, #4
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	4633      	mov	r3, r6
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	9700      	str	r7, [sp, #0]
 8005ae2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ae4:	f000 f9d6 	bl	8005e94 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f040 8090 	bne.w	8005c0e <_printf_float+0x1d6>
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	b011      	add	sp, #68	; 0x44
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	4652      	mov	r2, sl
 8005afa:	4643      	mov	r3, r8
 8005afc:	4650      	mov	r0, sl
 8005afe:	4641      	mov	r1, r8
 8005b00:	f7fa ff84 	bl	8000a0c <__aeabi_dcmpun>
 8005b04:	b148      	cbz	r0, 8005b1a <_printf_float+0xe2>
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	232d      	movlt	r3, #45	; 0x2d
 8005b0e:	4a80      	ldr	r2, [pc, #512]	; (8005d10 <_printf_float+0x2d8>)
 8005b10:	bfb8      	it	lt
 8005b12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b16:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <_printf_float+0x2dc>)
 8005b18:	e7d3      	b.n	8005ac2 <_printf_float+0x8a>
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	d142      	bne.n	8005baa <_printf_float+0x172>
 8005b24:	2306      	movs	r3, #6
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	9206      	str	r2, [sp, #24]
 8005b2c:	aa0e      	add	r2, sp, #56	; 0x38
 8005b2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b32:	aa0d      	add	r2, sp, #52	; 0x34
 8005b34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b38:	9203      	str	r2, [sp, #12]
 8005b3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	4652      	mov	r2, sl
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b50:	f7ff fed6 	bl	8005900 <__cvt>
 8005b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b56:	4680      	mov	r8, r0
 8005b58:	2947      	cmp	r1, #71	; 0x47
 8005b5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b5c:	d108      	bne.n	8005b70 <_printf_float+0x138>
 8005b5e:	1cc8      	adds	r0, r1, #3
 8005b60:	db02      	blt.n	8005b68 <_printf_float+0x130>
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	4299      	cmp	r1, r3
 8005b66:	dd40      	ble.n	8005bea <_printf_float+0x1b2>
 8005b68:	f1a9 0902 	sub.w	r9, r9, #2
 8005b6c:	fa5f f989 	uxtb.w	r9, r9
 8005b70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b74:	d81f      	bhi.n	8005bb6 <_printf_float+0x17e>
 8005b76:	464a      	mov	r2, r9
 8005b78:	3901      	subs	r1, #1
 8005b7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b7e:	910d      	str	r1, [sp, #52]	; 0x34
 8005b80:	f7ff ff1d 	bl	80059be <__exponent>
 8005b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b86:	4682      	mov	sl, r0
 8005b88:	1813      	adds	r3, r2, r0
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	dc02      	bgt.n	8005b96 <_printf_float+0x15e>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	07d2      	lsls	r2, r2, #31
 8005b94:	d501      	bpl.n	8005b9a <_printf_float+0x162>
 8005b96:	3301      	adds	r3, #1
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d09b      	beq.n	8005ada <_printf_float+0xa2>
 8005ba2:	232d      	movs	r3, #45	; 0x2d
 8005ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba8:	e797      	b.n	8005ada <_printf_float+0xa2>
 8005baa:	2947      	cmp	r1, #71	; 0x47
 8005bac:	d1bc      	bne.n	8005b28 <_printf_float+0xf0>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1ba      	bne.n	8005b28 <_printf_float+0xf0>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7b7      	b.n	8005b26 <_printf_float+0xee>
 8005bb6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005bba:	d118      	bne.n	8005bee <_printf_float+0x1b6>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	dd0b      	ble.n	8005bda <_printf_float+0x1a2>
 8005bc2:	6121      	str	r1, [r4, #16]
 8005bc4:	b913      	cbnz	r3, 8005bcc <_printf_float+0x194>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d502      	bpl.n	8005bd2 <_printf_float+0x19a>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	f04f 0a00 	mov.w	sl, #0
 8005bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd8:	e7df      	b.n	8005b9a <_printf_float+0x162>
 8005bda:	b913      	cbnz	r3, 8005be2 <_printf_float+0x1aa>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d2      	lsls	r2, r2, #31
 8005be0:	d501      	bpl.n	8005be6 <_printf_float+0x1ae>
 8005be2:	3302      	adds	r3, #2
 8005be4:	e7f4      	b.n	8005bd0 <_printf_float+0x198>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e7f2      	b.n	8005bd0 <_printf_float+0x198>
 8005bea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	db05      	blt.n	8005c00 <_printf_float+0x1c8>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	6121      	str	r1, [r4, #16]
 8005bf8:	07d8      	lsls	r0, r3, #31
 8005bfa:	d5ea      	bpl.n	8005bd2 <_printf_float+0x19a>
 8005bfc:	1c4b      	adds	r3, r1, #1
 8005bfe:	e7e7      	b.n	8005bd0 <_printf_float+0x198>
 8005c00:	2900      	cmp	r1, #0
 8005c02:	bfcc      	ite	gt
 8005c04:	2201      	movgt	r2, #1
 8005c06:	f1c1 0202 	rsble	r2, r1, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	e7e0      	b.n	8005bd0 <_printf_float+0x198>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	055a      	lsls	r2, r3, #21
 8005c12:	d407      	bmi.n	8005c24 <_printf_float+0x1ec>
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	4642      	mov	r2, r8
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d12b      	bne.n	8005c7a <_printf_float+0x242>
 8005c22:	e764      	b.n	8005aee <_printf_float+0xb6>
 8005c24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c28:	f240 80dd 	bls.w	8005de6 <_printf_float+0x3ae>
 8005c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	f7fa feb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d033      	beq.n	8005ca4 <_printf_float+0x26c>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <_printf_float+0x2e0>)
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af51 	beq.w	8005aee <_printf_float+0xb6>
 8005c4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c50:	429a      	cmp	r2, r3
 8005c52:	db02      	blt.n	8005c5a <_printf_float+0x222>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07d8      	lsls	r0, r3, #31
 8005c58:	d50f      	bpl.n	8005c7a <_printf_float+0x242>
 8005c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f af42 	beq.w	8005aee <_printf_float+0xb6>
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	f104 091a 	add.w	r9, r4, #26
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4543      	cmp	r3, r8
 8005c78:	dc09      	bgt.n	8005c8e <_printf_float+0x256>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	079b      	lsls	r3, r3, #30
 8005c7e:	f100 8104 	bmi.w	8005e8a <_printf_float+0x452>
 8005c82:	68e0      	ldr	r0, [r4, #12]
 8005c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c86:	4298      	cmp	r0, r3
 8005c88:	bfb8      	it	lt
 8005c8a:	4618      	movlt	r0, r3
 8005c8c:	e731      	b.n	8005af2 <_printf_float+0xba>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	464a      	mov	r2, r9
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f43f af28 	beq.w	8005aee <_printf_float+0xb6>
 8005c9e:	f108 0801 	add.w	r8, r8, #1
 8005ca2:	e7e6      	b.n	8005c72 <_printf_float+0x23a>
 8005ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	dc38      	bgt.n	8005d1c <_printf_float+0x2e4>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <_printf_float+0x2e0>)
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f af1a 	beq.w	8005aee <_printf_float+0xb6>
 8005cba:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d102      	bne.n	8005cc8 <_printf_float+0x290>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	07d9      	lsls	r1, r3, #31
 8005cc6:	d5d8      	bpl.n	8005c7a <_printf_float+0x242>
 8005cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af0b 	beq.w	8005aee <_printf_float+0xb6>
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	f104 0a1a 	add.w	sl, r4, #26
 8005ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	dc01      	bgt.n	8005cec <_printf_float+0x2b4>
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cea:	e794      	b.n	8005c16 <_printf_float+0x1de>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f aef9 	beq.w	8005aee <_printf_float+0xb6>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7ee      	b.n	8005ce0 <_printf_float+0x2a8>
 8005d02:	bf00      	nop
 8005d04:	7fefffff 	.word	0x7fefffff
 8005d08:	0800869e 	.word	0x0800869e
 8005d0c:	080086a2 	.word	0x080086a2
 8005d10:	080086a6 	.word	0x080086a6
 8005d14:	080086aa 	.word	0x080086aa
 8005d18:	080086ae 	.word	0x080086ae
 8005d1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dc37      	bgt.n	8005d9c <_printf_float+0x364>
 8005d2c:	f04f 0b00 	mov.w	fp, #0
 8005d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d34:	f104 021a 	add.w	r2, r4, #26
 8005d38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d3c:	ebaa 0309 	sub.w	r3, sl, r9
 8005d40:	455b      	cmp	r3, fp
 8005d42:	dc33      	bgt.n	8005dac <_printf_float+0x374>
 8005d44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db3b      	blt.n	8005dc4 <_printf_float+0x38c>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d438      	bmi.n	8005dc4 <_printf_float+0x38c>
 8005d52:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005d56:	eba2 0903 	sub.w	r9, r2, r3
 8005d5a:	eba2 020a 	sub.w	r2, r2, sl
 8005d5e:	4591      	cmp	r9, r2
 8005d60:	bfa8      	it	ge
 8005d62:	4691      	movge	r9, r2
 8005d64:	f1b9 0f00 	cmp.w	r9, #0
 8005d68:	dc34      	bgt.n	8005dd4 <_printf_float+0x39c>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d72:	f104 0a1a 	add.w	sl, r4, #26
 8005d76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	eba3 0309 	sub.w	r3, r3, r9
 8005d80:	4543      	cmp	r3, r8
 8005d82:	f77f af7a 	ble.w	8005c7a <_printf_float+0x242>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f aeac 	beq.w	8005aee <_printf_float+0xb6>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e7ec      	b.n	8005d76 <_printf_float+0x33e>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x2f4>
 8005daa:	e6a0      	b.n	8005aee <_printf_float+0xb6>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae99 	beq.w	8005aee <_printf_float+0xb6>
 8005dbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e7b9      	b.n	8005d38 <_printf_float+0x300>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d1bf      	bne.n	8005d52 <_printf_float+0x31a>
 8005dd2:	e68c      	b.n	8005aee <_printf_float+0xb6>
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	eb08 020a 	add.w	r2, r8, sl
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1c2      	bne.n	8005d6a <_printf_float+0x332>
 8005de4:	e683      	b.n	8005aee <_printf_float+0xb6>
 8005de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de8:	2a01      	cmp	r2, #1
 8005dea:	dc01      	bgt.n	8005df0 <_printf_float+0x3b8>
 8005dec:	07db      	lsls	r3, r3, #31
 8005dee:	d539      	bpl.n	8005e64 <_printf_float+0x42c>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f ae77 	beq.w	8005aee <_printf_float+0xb6>
 8005e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f ae6f 	beq.w	8005aee <_printf_float+0xb6>
 8005e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005e1c:	f7fa fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005e20:	b9d8      	cbnz	r0, 8005e5a <_printf_float+0x422>
 8005e22:	f109 33ff 	add.w	r3, r9, #4294967295
 8005e26:	f108 0201 	add.w	r2, r8, #1
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	d10e      	bne.n	8005e52 <_printf_float+0x41a>
 8005e34:	e65b      	b.n	8005aee <_printf_float+0xb6>
 8005e36:	2301      	movs	r3, #1
 8005e38:	464a      	mov	r2, r9
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	f43f ae54 	beq.w	8005aee <_printf_float+0xb6>
 8005e46:	f108 0801 	add.w	r8, r8, #1
 8005e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4543      	cmp	r3, r8
 8005e50:	dcf1      	bgt.n	8005e36 <_printf_float+0x3fe>
 8005e52:	4653      	mov	r3, sl
 8005e54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e58:	e6de      	b.n	8005c18 <_printf_float+0x1e0>
 8005e5a:	f04f 0800 	mov.w	r8, #0
 8005e5e:	f104 091a 	add.w	r9, r4, #26
 8005e62:	e7f2      	b.n	8005e4a <_printf_float+0x412>
 8005e64:	2301      	movs	r3, #1
 8005e66:	4642      	mov	r2, r8
 8005e68:	e7df      	b.n	8005e2a <_printf_float+0x3f2>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	464a      	mov	r2, r9
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f ae3a 	beq.w	8005aee <_printf_float+0xb6>
 8005e7a:	f108 0801 	add.w	r8, r8, #1
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e82:	1a5b      	subs	r3, r3, r1
 8005e84:	4543      	cmp	r3, r8
 8005e86:	dcf0      	bgt.n	8005e6a <_printf_float+0x432>
 8005e88:	e6fb      	b.n	8005c82 <_printf_float+0x24a>
 8005e8a:	f04f 0800 	mov.w	r8, #0
 8005e8e:	f104 0919 	add.w	r9, r4, #25
 8005e92:	e7f4      	b.n	8005e7e <_printf_float+0x446>

08005e94 <_printf_common>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	4616      	mov	r6, r2
 8005e9a:	4699      	mov	r9, r3
 8005e9c:	688a      	ldr	r2, [r1, #8]
 8005e9e:	690b      	ldr	r3, [r1, #16]
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	bfb8      	it	lt
 8005ea6:	4613      	movlt	r3, r2
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eae:	460c      	mov	r4, r1
 8005eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb4:	b10a      	cbz	r2, 8005eba <_printf_common+0x26>
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	0699      	lsls	r1, r3, #26
 8005ebe:	bf42      	ittt	mi
 8005ec0:	6833      	ldrmi	r3, [r6, #0]
 8005ec2:	3302      	addmi	r3, #2
 8005ec4:	6033      	strmi	r3, [r6, #0]
 8005ec6:	6825      	ldr	r5, [r4, #0]
 8005ec8:	f015 0506 	ands.w	r5, r5, #6
 8005ecc:	d106      	bne.n	8005edc <_printf_common+0x48>
 8005ece:	f104 0a19 	add.w	sl, r4, #25
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	6832      	ldr	r2, [r6, #0]
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dc2b      	bgt.n	8005f34 <_printf_common+0xa0>
 8005edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee0:	1e13      	subs	r3, r2, #0
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	bf18      	it	ne
 8005ee6:	2301      	movne	r3, #1
 8005ee8:	0692      	lsls	r2, r2, #26
 8005eea:	d430      	bmi.n	8005f4e <_printf_common+0xba>
 8005eec:	4649      	mov	r1, r9
 8005eee:	4638      	mov	r0, r7
 8005ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef4:	47c0      	blx	r8
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d023      	beq.n	8005f42 <_printf_common+0xae>
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6922      	ldr	r2, [r4, #16]
 8005efe:	f003 0306 	and.w	r3, r3, #6
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	bf14      	ite	ne
 8005f06:	2500      	movne	r5, #0
 8005f08:	6833      	ldreq	r3, [r6, #0]
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	bf08      	it	eq
 8005f10:	68e5      	ldreq	r5, [r4, #12]
 8005f12:	f104 041a 	add.w	r4, r4, #26
 8005f16:	bf08      	it	eq
 8005f18:	1aed      	subeq	r5, r5, r3
 8005f1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f1e:	bf08      	it	eq
 8005f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f24:	4293      	cmp	r3, r2
 8005f26:	bfc4      	itt	gt
 8005f28:	1a9b      	subgt	r3, r3, r2
 8005f2a:	18ed      	addgt	r5, r5, r3
 8005f2c:	42b5      	cmp	r5, r6
 8005f2e:	d11a      	bne.n	8005f66 <_printf_common+0xd2>
 8005f30:	2000      	movs	r0, #0
 8005f32:	e008      	b.n	8005f46 <_printf_common+0xb2>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4652      	mov	r2, sl
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d103      	bne.n	8005f4a <_printf_common+0xb6>
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	3501      	adds	r5, #1
 8005f4c:	e7c1      	b.n	8005ed2 <_printf_common+0x3e>
 8005f4e:	2030      	movs	r0, #48	; 0x30
 8005f50:	18e1      	adds	r1, r4, r3
 8005f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f5c:	4422      	add	r2, r4
 8005f5e:	3302      	adds	r3, #2
 8005f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f64:	e7c2      	b.n	8005eec <_printf_common+0x58>
 8005f66:	2301      	movs	r3, #1
 8005f68:	4622      	mov	r2, r4
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	47c0      	blx	r8
 8005f70:	3001      	adds	r0, #1
 8005f72:	d0e6      	beq.n	8005f42 <_printf_common+0xae>
 8005f74:	3601      	adds	r6, #1
 8005f76:	e7d9      	b.n	8005f2c <_printf_common+0x98>

08005f78 <_printf_i>:
 8005f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	7e0f      	ldrb	r7, [r1, #24]
 8005f7e:	4691      	mov	r9, r2
 8005f80:	2f78      	cmp	r7, #120	; 0x78
 8005f82:	4680      	mov	r8, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	469a      	mov	sl, r3
 8005f88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8e:	d807      	bhi.n	8005fa0 <_printf_i+0x28>
 8005f90:	2f62      	cmp	r7, #98	; 0x62
 8005f92:	d80a      	bhi.n	8005faa <_printf_i+0x32>
 8005f94:	2f00      	cmp	r7, #0
 8005f96:	f000 80d5 	beq.w	8006144 <_printf_i+0x1cc>
 8005f9a:	2f58      	cmp	r7, #88	; 0x58
 8005f9c:	f000 80c1 	beq.w	8006122 <_printf_i+0x1aa>
 8005fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa8:	e03a      	b.n	8006020 <_printf_i+0xa8>
 8005faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fae:	2b15      	cmp	r3, #21
 8005fb0:	d8f6      	bhi.n	8005fa0 <_printf_i+0x28>
 8005fb2:	a101      	add	r1, pc, #4	; (adr r1, 8005fb8 <_printf_i+0x40>)
 8005fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb8:	08006011 	.word	0x08006011
 8005fbc:	08006025 	.word	0x08006025
 8005fc0:	08005fa1 	.word	0x08005fa1
 8005fc4:	08005fa1 	.word	0x08005fa1
 8005fc8:	08005fa1 	.word	0x08005fa1
 8005fcc:	08005fa1 	.word	0x08005fa1
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08005fa1 	.word	0x08005fa1
 8005fd8:	08005fa1 	.word	0x08005fa1
 8005fdc:	08005fa1 	.word	0x08005fa1
 8005fe0:	08005fa1 	.word	0x08005fa1
 8005fe4:	0800612b 	.word	0x0800612b
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	080060e5 	.word	0x080060e5
 8005ff0:	08005fa1 	.word	0x08005fa1
 8005ff4:	08005fa1 	.word	0x08005fa1
 8005ff8:	0800614d 	.word	0x0800614d
 8005ffc:	08005fa1 	.word	0x08005fa1
 8006000:	08006051 	.word	0x08006051
 8006004:	08005fa1 	.word	0x08005fa1
 8006008:	08005fa1 	.word	0x08005fa1
 800600c:	080060ed 	.word	0x080060ed
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	602a      	str	r2, [r5, #0]
 8006018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800601c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006020:	2301      	movs	r3, #1
 8006022:	e0a0      	b.n	8006166 <_printf_i+0x1ee>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	0607      	lsls	r7, r0, #24
 800602a:	f103 0104 	add.w	r1, r3, #4
 800602e:	6029      	str	r1, [r5, #0]
 8006030:	d501      	bpl.n	8006036 <_printf_i+0xbe>
 8006032:	681e      	ldr	r6, [r3, #0]
 8006034:	e003      	b.n	800603e <_printf_i+0xc6>
 8006036:	0646      	lsls	r6, r0, #25
 8006038:	d5fb      	bpl.n	8006032 <_printf_i+0xba>
 800603a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603e:	2e00      	cmp	r6, #0
 8006040:	da03      	bge.n	800604a <_printf_i+0xd2>
 8006042:	232d      	movs	r3, #45	; 0x2d
 8006044:	4276      	negs	r6, r6
 8006046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800604a:	230a      	movs	r3, #10
 800604c:	4859      	ldr	r0, [pc, #356]	; (80061b4 <_printf_i+0x23c>)
 800604e:	e012      	b.n	8006076 <_printf_i+0xfe>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	6820      	ldr	r0, [r4, #0]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	6029      	str	r1, [r5, #0]
 8006058:	0605      	lsls	r5, r0, #24
 800605a:	d501      	bpl.n	8006060 <_printf_i+0xe8>
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	e002      	b.n	8006066 <_printf_i+0xee>
 8006060:	0641      	lsls	r1, r0, #25
 8006062:	d5fb      	bpl.n	800605c <_printf_i+0xe4>
 8006064:	881e      	ldrh	r6, [r3, #0]
 8006066:	2f6f      	cmp	r7, #111	; 0x6f
 8006068:	bf0c      	ite	eq
 800606a:	2308      	moveq	r3, #8
 800606c:	230a      	movne	r3, #10
 800606e:	4851      	ldr	r0, [pc, #324]	; (80061b4 <_printf_i+0x23c>)
 8006070:	2100      	movs	r1, #0
 8006072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006076:	6865      	ldr	r5, [r4, #4]
 8006078:	2d00      	cmp	r5, #0
 800607a:	bfa8      	it	ge
 800607c:	6821      	ldrge	r1, [r4, #0]
 800607e:	60a5      	str	r5, [r4, #8]
 8006080:	bfa4      	itt	ge
 8006082:	f021 0104 	bicge.w	r1, r1, #4
 8006086:	6021      	strge	r1, [r4, #0]
 8006088:	b90e      	cbnz	r6, 800608e <_printf_i+0x116>
 800608a:	2d00      	cmp	r5, #0
 800608c:	d04b      	beq.n	8006126 <_printf_i+0x1ae>
 800608e:	4615      	mov	r5, r2
 8006090:	fbb6 f1f3 	udiv	r1, r6, r3
 8006094:	fb03 6711 	mls	r7, r3, r1, r6
 8006098:	5dc7      	ldrb	r7, [r0, r7]
 800609a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800609e:	4637      	mov	r7, r6
 80060a0:	42bb      	cmp	r3, r7
 80060a2:	460e      	mov	r6, r1
 80060a4:	d9f4      	bls.n	8006090 <_printf_i+0x118>
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d10b      	bne.n	80060c2 <_printf_i+0x14a>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	07de      	lsls	r6, r3, #31
 80060ae:	d508      	bpl.n	80060c2 <_printf_i+0x14a>
 80060b0:	6923      	ldr	r3, [r4, #16]
 80060b2:	6861      	ldr	r1, [r4, #4]
 80060b4:	4299      	cmp	r1, r3
 80060b6:	bfde      	ittt	le
 80060b8:	2330      	movle	r3, #48	; 0x30
 80060ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060c2:	1b52      	subs	r2, r2, r5
 80060c4:	6122      	str	r2, [r4, #16]
 80060c6:	464b      	mov	r3, r9
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f8cd a000 	str.w	sl, [sp]
 80060d0:	aa03      	add	r2, sp, #12
 80060d2:	f7ff fedf 	bl	8005e94 <_printf_common>
 80060d6:	3001      	adds	r0, #1
 80060d8:	d14a      	bne.n	8006170 <_printf_i+0x1f8>
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	b004      	add	sp, #16
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	f043 0320 	orr.w	r3, r3, #32
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	2778      	movs	r7, #120	; 0x78
 80060ee:	4832      	ldr	r0, [pc, #200]	; (80061b8 <_printf_i+0x240>)
 80060f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060f4:	6823      	ldr	r3, [r4, #0]
 80060f6:	6829      	ldr	r1, [r5, #0]
 80060f8:	061f      	lsls	r7, r3, #24
 80060fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80060fe:	d402      	bmi.n	8006106 <_printf_i+0x18e>
 8006100:	065f      	lsls	r7, r3, #25
 8006102:	bf48      	it	mi
 8006104:	b2b6      	uxthmi	r6, r6
 8006106:	07df      	lsls	r7, r3, #31
 8006108:	bf48      	it	mi
 800610a:	f043 0320 	orrmi.w	r3, r3, #32
 800610e:	6029      	str	r1, [r5, #0]
 8006110:	bf48      	it	mi
 8006112:	6023      	strmi	r3, [r4, #0]
 8006114:	b91e      	cbnz	r6, 800611e <_printf_i+0x1a6>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	f023 0320 	bic.w	r3, r3, #32
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	2310      	movs	r3, #16
 8006120:	e7a6      	b.n	8006070 <_printf_i+0xf8>
 8006122:	4824      	ldr	r0, [pc, #144]	; (80061b4 <_printf_i+0x23c>)
 8006124:	e7e4      	b.n	80060f0 <_printf_i+0x178>
 8006126:	4615      	mov	r5, r2
 8006128:	e7bd      	b.n	80060a6 <_printf_i+0x12e>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	6826      	ldr	r6, [r4, #0]
 800612e:	1d18      	adds	r0, r3, #4
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	6028      	str	r0, [r5, #0]
 8006134:	0635      	lsls	r5, r6, #24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	d501      	bpl.n	800613e <_printf_i+0x1c6>
 800613a:	6019      	str	r1, [r3, #0]
 800613c:	e002      	b.n	8006144 <_printf_i+0x1cc>
 800613e:	0670      	lsls	r0, r6, #25
 8006140:	d5fb      	bpl.n	800613a <_printf_i+0x1c2>
 8006142:	8019      	strh	r1, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	4615      	mov	r5, r2
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	e7bc      	b.n	80060c6 <_printf_i+0x14e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	2100      	movs	r1, #0
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	602a      	str	r2, [r5, #0]
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	4628      	mov	r0, r5
 800615a:	f000 f9d4 	bl	8006506 <memchr>
 800615e:	b108      	cbz	r0, 8006164 <_printf_i+0x1ec>
 8006160:	1b40      	subs	r0, r0, r5
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616e:	e7aa      	b.n	80060c6 <_printf_i+0x14e>
 8006170:	462a      	mov	r2, r5
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	47d0      	blx	sl
 800617a:	3001      	adds	r0, #1
 800617c:	d0ad      	beq.n	80060da <_printf_i+0x162>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	079b      	lsls	r3, r3, #30
 8006182:	d413      	bmi.n	80061ac <_printf_i+0x234>
 8006184:	68e0      	ldr	r0, [r4, #12]
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	4298      	cmp	r0, r3
 800618a:	bfb8      	it	lt
 800618c:	4618      	movlt	r0, r3
 800618e:	e7a6      	b.n	80060de <_printf_i+0x166>
 8006190:	2301      	movs	r3, #1
 8006192:	4632      	mov	r2, r6
 8006194:	4649      	mov	r1, r9
 8006196:	4640      	mov	r0, r8
 8006198:	47d0      	blx	sl
 800619a:	3001      	adds	r0, #1
 800619c:	d09d      	beq.n	80060da <_printf_i+0x162>
 800619e:	3501      	adds	r5, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	9903      	ldr	r1, [sp, #12]
 80061a4:	1a5b      	subs	r3, r3, r1
 80061a6:	42ab      	cmp	r3, r5
 80061a8:	dcf2      	bgt.n	8006190 <_printf_i+0x218>
 80061aa:	e7eb      	b.n	8006184 <_printf_i+0x20c>
 80061ac:	2500      	movs	r5, #0
 80061ae:	f104 0619 	add.w	r6, r4, #25
 80061b2:	e7f5      	b.n	80061a0 <_printf_i+0x228>
 80061b4:	080086b0 	.word	0x080086b0
 80061b8:	080086c1 	.word	0x080086c1

080061bc <std>:
 80061bc:	2300      	movs	r3, #0
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	e9c0 3300 	strd	r3, r3, [r0]
 80061c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	6183      	str	r3, [r0, #24]
 80061d4:	4619      	mov	r1, r3
 80061d6:	2208      	movs	r2, #8
 80061d8:	305c      	adds	r0, #92	; 0x5c
 80061da:	f000 f914 	bl	8006406 <memset>
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <std+0x58>)
 80061e0:	6224      	str	r4, [r4, #32]
 80061e2:	6263      	str	r3, [r4, #36]	; 0x24
 80061e4:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <std+0x5c>)
 80061e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <std+0x60>)
 80061ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <std+0x64>)
 80061ee:	6323      	str	r3, [r4, #48]	; 0x30
 80061f0:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <std+0x68>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d006      	beq.n	8006204 <std+0x48>
 80061f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80061fa:	4294      	cmp	r4, r2
 80061fc:	d002      	beq.n	8006204 <std+0x48>
 80061fe:	33d0      	adds	r3, #208	; 0xd0
 8006200:	429c      	cmp	r4, r3
 8006202:	d105      	bne.n	8006210 <std+0x54>
 8006204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620c:	f000 b978 	b.w	8006500 <__retarget_lock_init_recursive>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	08006381 	.word	0x08006381
 8006218:	080063a3 	.word	0x080063a3
 800621c:	080063db 	.word	0x080063db
 8006220:	080063ff 	.word	0x080063ff
 8006224:	2000032c 	.word	0x2000032c

08006228 <stdio_exit_handler>:
 8006228:	4a02      	ldr	r2, [pc, #8]	; (8006234 <stdio_exit_handler+0xc>)
 800622a:	4903      	ldr	r1, [pc, #12]	; (8006238 <stdio_exit_handler+0x10>)
 800622c:	4803      	ldr	r0, [pc, #12]	; (800623c <stdio_exit_handler+0x14>)
 800622e:	f000 b869 	b.w	8006304 <_fwalk_sglue>
 8006232:	bf00      	nop
 8006234:	2000000c 	.word	0x2000000c
 8006238:	08007e9d 	.word	0x08007e9d
 800623c:	20000018 	.word	0x20000018

08006240 <cleanup_stdio>:
 8006240:	6841      	ldr	r1, [r0, #4]
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <cleanup_stdio+0x34>)
 8006244:	b510      	push	{r4, lr}
 8006246:	4299      	cmp	r1, r3
 8006248:	4604      	mov	r4, r0
 800624a:	d001      	beq.n	8006250 <cleanup_stdio+0x10>
 800624c:	f001 fe26 	bl	8007e9c <_fflush_r>
 8006250:	68a1      	ldr	r1, [r4, #8]
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <cleanup_stdio+0x38>)
 8006254:	4299      	cmp	r1, r3
 8006256:	d002      	beq.n	800625e <cleanup_stdio+0x1e>
 8006258:	4620      	mov	r0, r4
 800625a:	f001 fe1f 	bl	8007e9c <_fflush_r>
 800625e:	68e1      	ldr	r1, [r4, #12]
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <cleanup_stdio+0x3c>)
 8006262:	4299      	cmp	r1, r3
 8006264:	d004      	beq.n	8006270 <cleanup_stdio+0x30>
 8006266:	4620      	mov	r0, r4
 8006268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626c:	f001 be16 	b.w	8007e9c <_fflush_r>
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop
 8006274:	2000032c 	.word	0x2000032c
 8006278:	20000394 	.word	0x20000394
 800627c:	200003fc 	.word	0x200003fc

08006280 <global_stdio_init.part.0>:
 8006280:	b510      	push	{r4, lr}
 8006282:	4b0b      	ldr	r3, [pc, #44]	; (80062b0 <global_stdio_init.part.0+0x30>)
 8006284:	4c0b      	ldr	r4, [pc, #44]	; (80062b4 <global_stdio_init.part.0+0x34>)
 8006286:	4a0c      	ldr	r2, [pc, #48]	; (80062b8 <global_stdio_init.part.0+0x38>)
 8006288:	4620      	mov	r0, r4
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	2104      	movs	r1, #4
 800628e:	2200      	movs	r2, #0
 8006290:	f7ff ff94 	bl	80061bc <std>
 8006294:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006298:	2201      	movs	r2, #1
 800629a:	2109      	movs	r1, #9
 800629c:	f7ff ff8e 	bl	80061bc <std>
 80062a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062a4:	2202      	movs	r2, #2
 80062a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062aa:	2112      	movs	r1, #18
 80062ac:	f7ff bf86 	b.w	80061bc <std>
 80062b0:	20000464 	.word	0x20000464
 80062b4:	2000032c 	.word	0x2000032c
 80062b8:	08006229 	.word	0x08006229

080062bc <__sfp_lock_acquire>:
 80062bc:	4801      	ldr	r0, [pc, #4]	; (80062c4 <__sfp_lock_acquire+0x8>)
 80062be:	f000 b920 	b.w	8006502 <__retarget_lock_acquire_recursive>
 80062c2:	bf00      	nop
 80062c4:	2000046d 	.word	0x2000046d

080062c8 <__sfp_lock_release>:
 80062c8:	4801      	ldr	r0, [pc, #4]	; (80062d0 <__sfp_lock_release+0x8>)
 80062ca:	f000 b91b 	b.w	8006504 <__retarget_lock_release_recursive>
 80062ce:	bf00      	nop
 80062d0:	2000046d 	.word	0x2000046d

080062d4 <__sinit>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	4604      	mov	r4, r0
 80062d8:	f7ff fff0 	bl	80062bc <__sfp_lock_acquire>
 80062dc:	6a23      	ldr	r3, [r4, #32]
 80062de:	b11b      	cbz	r3, 80062e8 <__sinit+0x14>
 80062e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e4:	f7ff bff0 	b.w	80062c8 <__sfp_lock_release>
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <__sinit+0x28>)
 80062ea:	6223      	str	r3, [r4, #32]
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <__sinit+0x2c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1f5      	bne.n	80062e0 <__sinit+0xc>
 80062f4:	f7ff ffc4 	bl	8006280 <global_stdio_init.part.0>
 80062f8:	e7f2      	b.n	80062e0 <__sinit+0xc>
 80062fa:	bf00      	nop
 80062fc:	08006241 	.word	0x08006241
 8006300:	20000464 	.word	0x20000464

08006304 <_fwalk_sglue>:
 8006304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006308:	4607      	mov	r7, r0
 800630a:	4688      	mov	r8, r1
 800630c:	4614      	mov	r4, r2
 800630e:	2600      	movs	r6, #0
 8006310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006314:	f1b9 0901 	subs.w	r9, r9, #1
 8006318:	d505      	bpl.n	8006326 <_fwalk_sglue+0x22>
 800631a:	6824      	ldr	r4, [r4, #0]
 800631c:	2c00      	cmp	r4, #0
 800631e:	d1f7      	bne.n	8006310 <_fwalk_sglue+0xc>
 8006320:	4630      	mov	r0, r6
 8006322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006326:	89ab      	ldrh	r3, [r5, #12]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d907      	bls.n	800633c <_fwalk_sglue+0x38>
 800632c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006330:	3301      	adds	r3, #1
 8006332:	d003      	beq.n	800633c <_fwalk_sglue+0x38>
 8006334:	4629      	mov	r1, r5
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	4306      	orrs	r6, r0
 800633c:	3568      	adds	r5, #104	; 0x68
 800633e:	e7e9      	b.n	8006314 <_fwalk_sglue+0x10>

08006340 <siprintf>:
 8006340:	b40e      	push	{r1, r2, r3}
 8006342:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006346:	b500      	push	{lr}
 8006348:	b09c      	sub	sp, #112	; 0x70
 800634a:	ab1d      	add	r3, sp, #116	; 0x74
 800634c:	9002      	str	r0, [sp, #8]
 800634e:	9006      	str	r0, [sp, #24]
 8006350:	9107      	str	r1, [sp, #28]
 8006352:	9104      	str	r1, [sp, #16]
 8006354:	4808      	ldr	r0, [pc, #32]	; (8006378 <siprintf+0x38>)
 8006356:	4909      	ldr	r1, [pc, #36]	; (800637c <siprintf+0x3c>)
 8006358:	f853 2b04 	ldr.w	r2, [r3], #4
 800635c:	9105      	str	r1, [sp, #20]
 800635e:	6800      	ldr	r0, [r0, #0]
 8006360:	a902      	add	r1, sp, #8
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	f001 fc1a 	bl	8007b9c <_svfiprintf_r>
 8006368:	2200      	movs	r2, #0
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	b01c      	add	sp, #112	; 0x70
 8006370:	f85d eb04 	ldr.w	lr, [sp], #4
 8006374:	b003      	add	sp, #12
 8006376:	4770      	bx	lr
 8006378:	20000064 	.word	0x20000064
 800637c:	ffff0208 	.word	0xffff0208

08006380 <__sread>:
 8006380:	b510      	push	{r4, lr}
 8006382:	460c      	mov	r4, r1
 8006384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006388:	f000 f86c 	bl	8006464 <_read_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	bfab      	itete	ge
 8006390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006392:	89a3      	ldrhlt	r3, [r4, #12]
 8006394:	181b      	addge	r3, r3, r0
 8006396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800639a:	bfac      	ite	ge
 800639c:	6563      	strge	r3, [r4, #84]	; 0x54
 800639e:	81a3      	strhlt	r3, [r4, #12]
 80063a0:	bd10      	pop	{r4, pc}

080063a2 <__swrite>:
 80063a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a6:	461f      	mov	r7, r3
 80063a8:	898b      	ldrh	r3, [r1, #12]
 80063aa:	4605      	mov	r5, r0
 80063ac:	05db      	lsls	r3, r3, #23
 80063ae:	460c      	mov	r4, r1
 80063b0:	4616      	mov	r6, r2
 80063b2:	d505      	bpl.n	80063c0 <__swrite+0x1e>
 80063b4:	2302      	movs	r3, #2
 80063b6:	2200      	movs	r2, #0
 80063b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063bc:	f000 f840 	bl	8006440 <_lseek_r>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	4632      	mov	r2, r6
 80063c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	4628      	mov	r0, r5
 80063cc:	463b      	mov	r3, r7
 80063ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	f000 b857 	b.w	8006488 <_write_r>

080063da <__sseek>:
 80063da:	b510      	push	{r4, lr}
 80063dc:	460c      	mov	r4, r1
 80063de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e2:	f000 f82d 	bl	8006440 <_lseek_r>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	bf15      	itete	ne
 80063ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80063ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063f6:	81a3      	strheq	r3, [r4, #12]
 80063f8:	bf18      	it	ne
 80063fa:	81a3      	strhne	r3, [r4, #12]
 80063fc:	bd10      	pop	{r4, pc}

080063fe <__sclose>:
 80063fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006402:	f000 b80d 	b.w	8006420 <_close_r>

08006406 <memset>:
 8006406:	4603      	mov	r3, r0
 8006408:	4402      	add	r2, r0
 800640a:	4293      	cmp	r3, r2
 800640c:	d100      	bne.n	8006410 <memset+0xa>
 800640e:	4770      	bx	lr
 8006410:	f803 1b01 	strb.w	r1, [r3], #1
 8006414:	e7f9      	b.n	800640a <memset+0x4>
	...

08006418 <_localeconv_r>:
 8006418:	4800      	ldr	r0, [pc, #0]	; (800641c <_localeconv_r+0x4>)
 800641a:	4770      	bx	lr
 800641c:	20000158 	.word	0x20000158

08006420 <_close_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	2300      	movs	r3, #0
 8006424:	4d05      	ldr	r5, [pc, #20]	; (800643c <_close_r+0x1c>)
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	602b      	str	r3, [r5, #0]
 800642c:	f7fa fe9a 	bl	8001164 <_close>
 8006430:	1c43      	adds	r3, r0, #1
 8006432:	d102      	bne.n	800643a <_close_r+0x1a>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	b103      	cbz	r3, 800643a <_close_r+0x1a>
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	bd38      	pop	{r3, r4, r5, pc}
 800643c:	20000468 	.word	0x20000468

08006440 <_lseek_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	2200      	movs	r2, #0
 800644a:	4d05      	ldr	r5, [pc, #20]	; (8006460 <_lseek_r+0x20>)
 800644c:	602a      	str	r2, [r5, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	f7fa feac 	bl	80011ac <_lseek>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_lseek_r+0x1e>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_lseek_r+0x1e>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20000468 	.word	0x20000468

08006464 <_read_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	2200      	movs	r2, #0
 800646e:	4d05      	ldr	r5, [pc, #20]	; (8006484 <_read_r+0x20>)
 8006470:	602a      	str	r2, [r5, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	f7fa fe3d 	bl	80010f2 <_read>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_read_r+0x1e>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_read_r+0x1e>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	20000468 	.word	0x20000468

08006488 <_write_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	2200      	movs	r2, #0
 8006492:	4d05      	ldr	r5, [pc, #20]	; (80064a8 <_write_r+0x20>)
 8006494:	602a      	str	r2, [r5, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	f7fa fe48 	bl	800112c <_write>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_write_r+0x1e>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_write_r+0x1e>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	20000468 	.word	0x20000468

080064ac <__errno>:
 80064ac:	4b01      	ldr	r3, [pc, #4]	; (80064b4 <__errno+0x8>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000064 	.word	0x20000064

080064b8 <__libc_init_array>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	2600      	movs	r6, #0
 80064bc:	4d0c      	ldr	r5, [pc, #48]	; (80064f0 <__libc_init_array+0x38>)
 80064be:	4c0d      	ldr	r4, [pc, #52]	; (80064f4 <__libc_init_array+0x3c>)
 80064c0:	1b64      	subs	r4, r4, r5
 80064c2:	10a4      	asrs	r4, r4, #2
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	d109      	bne.n	80064dc <__libc_init_array+0x24>
 80064c8:	f002 f888 	bl	80085dc <_init>
 80064cc:	2600      	movs	r6, #0
 80064ce:	4d0a      	ldr	r5, [pc, #40]	; (80064f8 <__libc_init_array+0x40>)
 80064d0:	4c0a      	ldr	r4, [pc, #40]	; (80064fc <__libc_init_array+0x44>)
 80064d2:	1b64      	subs	r4, r4, r5
 80064d4:	10a4      	asrs	r4, r4, #2
 80064d6:	42a6      	cmp	r6, r4
 80064d8:	d105      	bne.n	80064e6 <__libc_init_array+0x2e>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e0:	4798      	blx	r3
 80064e2:	3601      	adds	r6, #1
 80064e4:	e7ee      	b.n	80064c4 <__libc_init_array+0xc>
 80064e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ea:	4798      	blx	r3
 80064ec:	3601      	adds	r6, #1
 80064ee:	e7f2      	b.n	80064d6 <__libc_init_array+0x1e>
 80064f0:	08008a0c 	.word	0x08008a0c
 80064f4:	08008a0c 	.word	0x08008a0c
 80064f8:	08008a0c 	.word	0x08008a0c
 80064fc:	08008a10 	.word	0x08008a10

08006500 <__retarget_lock_init_recursive>:
 8006500:	4770      	bx	lr

08006502 <__retarget_lock_acquire_recursive>:
 8006502:	4770      	bx	lr

08006504 <__retarget_lock_release_recursive>:
 8006504:	4770      	bx	lr

08006506 <memchr>:
 8006506:	4603      	mov	r3, r0
 8006508:	b510      	push	{r4, lr}
 800650a:	b2c9      	uxtb	r1, r1
 800650c:	4402      	add	r2, r0
 800650e:	4293      	cmp	r3, r2
 8006510:	4618      	mov	r0, r3
 8006512:	d101      	bne.n	8006518 <memchr+0x12>
 8006514:	2000      	movs	r0, #0
 8006516:	e003      	b.n	8006520 <memchr+0x1a>
 8006518:	7804      	ldrb	r4, [r0, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	428c      	cmp	r4, r1
 800651e:	d1f6      	bne.n	800650e <memchr+0x8>
 8006520:	bd10      	pop	{r4, pc}

08006522 <quorem>:
 8006522:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006526:	6903      	ldr	r3, [r0, #16]
 8006528:	690c      	ldr	r4, [r1, #16]
 800652a:	4607      	mov	r7, r0
 800652c:	42a3      	cmp	r3, r4
 800652e:	db7f      	blt.n	8006630 <quorem+0x10e>
 8006530:	3c01      	subs	r4, #1
 8006532:	f100 0514 	add.w	r5, r0, #20
 8006536:	f101 0814 	add.w	r8, r1, #20
 800653a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006548:	3301      	adds	r3, #1
 800654a:	429a      	cmp	r2, r3
 800654c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006550:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006554:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006558:	d331      	bcc.n	80065be <quorem+0x9c>
 800655a:	f04f 0e00 	mov.w	lr, #0
 800655e:	4640      	mov	r0, r8
 8006560:	46ac      	mov	ip, r5
 8006562:	46f2      	mov	sl, lr
 8006564:	f850 2b04 	ldr.w	r2, [r0], #4
 8006568:	b293      	uxth	r3, r2
 800656a:	fb06 e303 	mla	r3, r6, r3, lr
 800656e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006572:	0c1a      	lsrs	r2, r3, #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	fb06 220e 	mla	r2, r6, lr, r2
 800657a:	ebaa 0303 	sub.w	r3, sl, r3
 800657e:	f8dc a000 	ldr.w	sl, [ip]
 8006582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006586:	fa1f fa8a 	uxth.w	sl, sl
 800658a:	4453      	add	r3, sl
 800658c:	f8dc a000 	ldr.w	sl, [ip]
 8006590:	b292      	uxth	r2, r2
 8006592:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006596:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a0:	4581      	cmp	r9, r0
 80065a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065a6:	f84c 3b04 	str.w	r3, [ip], #4
 80065aa:	d2db      	bcs.n	8006564 <quorem+0x42>
 80065ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b0:	b92b      	cbnz	r3, 80065be <quorem+0x9c>
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	429d      	cmp	r5, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	d32d      	bcc.n	8006618 <quorem+0xf6>
 80065bc:	613c      	str	r4, [r7, #16]
 80065be:	4638      	mov	r0, r7
 80065c0:	f001 f994 	bl	80078ec <__mcmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	db23      	blt.n	8006610 <quorem+0xee>
 80065c8:	4629      	mov	r1, r5
 80065ca:	2000      	movs	r0, #0
 80065cc:	3601      	adds	r6, #1
 80065ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80065d2:	f8d1 c000 	ldr.w	ip, [r1]
 80065d6:	b293      	uxth	r3, r2
 80065d8:	1ac3      	subs	r3, r0, r3
 80065da:	0c12      	lsrs	r2, r2, #16
 80065dc:	fa1f f08c 	uxth.w	r0, ip
 80065e0:	4403      	add	r3, r0
 80065e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80065e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f0:	45c1      	cmp	r9, r8
 80065f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065f6:	f841 3b04 	str.w	r3, [r1], #4
 80065fa:	d2e8      	bcs.n	80065ce <quorem+0xac>
 80065fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006604:	b922      	cbnz	r2, 8006610 <quorem+0xee>
 8006606:	3b04      	subs	r3, #4
 8006608:	429d      	cmp	r5, r3
 800660a:	461a      	mov	r2, r3
 800660c:	d30a      	bcc.n	8006624 <quorem+0x102>
 800660e:	613c      	str	r4, [r7, #16]
 8006610:	4630      	mov	r0, r6
 8006612:	b003      	add	sp, #12
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	3b04      	subs	r3, #4
 800661c:	2a00      	cmp	r2, #0
 800661e:	d1cd      	bne.n	80065bc <quorem+0x9a>
 8006620:	3c01      	subs	r4, #1
 8006622:	e7c8      	b.n	80065b6 <quorem+0x94>
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	3b04      	subs	r3, #4
 8006628:	2a00      	cmp	r2, #0
 800662a:	d1f0      	bne.n	800660e <quorem+0xec>
 800662c:	3c01      	subs	r4, #1
 800662e:	e7eb      	b.n	8006608 <quorem+0xe6>
 8006630:	2000      	movs	r0, #0
 8006632:	e7ee      	b.n	8006612 <quorem+0xf0>
 8006634:	0000      	movs	r0, r0
	...

08006638 <_dtoa_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	4616      	mov	r6, r2
 800663e:	461f      	mov	r7, r3
 8006640:	69c4      	ldr	r4, [r0, #28]
 8006642:	b099      	sub	sp, #100	; 0x64
 8006644:	4605      	mov	r5, r0
 8006646:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800664a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800664e:	b974      	cbnz	r4, 800666e <_dtoa_r+0x36>
 8006650:	2010      	movs	r0, #16
 8006652:	f000 fe1d 	bl	8007290 <malloc>
 8006656:	4602      	mov	r2, r0
 8006658:	61e8      	str	r0, [r5, #28]
 800665a:	b920      	cbnz	r0, 8006666 <_dtoa_r+0x2e>
 800665c:	21ef      	movs	r1, #239	; 0xef
 800665e:	4bac      	ldr	r3, [pc, #688]	; (8006910 <_dtoa_r+0x2d8>)
 8006660:	48ac      	ldr	r0, [pc, #688]	; (8006914 <_dtoa_r+0x2dc>)
 8006662:	f001 fc7b 	bl	8007f5c <__assert_func>
 8006666:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800666a:	6004      	str	r4, [r0, #0]
 800666c:	60c4      	str	r4, [r0, #12]
 800666e:	69eb      	ldr	r3, [r5, #28]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	b151      	cbz	r1, 800668a <_dtoa_r+0x52>
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	2301      	movs	r3, #1
 8006678:	4093      	lsls	r3, r2
 800667a:	604a      	str	r2, [r1, #4]
 800667c:	608b      	str	r3, [r1, #8]
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fefa 	bl	8007478 <_Bfree>
 8006684:	2200      	movs	r2, #0
 8006686:	69eb      	ldr	r3, [r5, #28]
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	1e3b      	subs	r3, r7, #0
 800668c:	bfaf      	iteee	ge
 800668e:	2300      	movge	r3, #0
 8006690:	2201      	movlt	r2, #1
 8006692:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006696:	9305      	strlt	r3, [sp, #20]
 8006698:	bfa8      	it	ge
 800669a:	f8c8 3000 	strge.w	r3, [r8]
 800669e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066a2:	4b9d      	ldr	r3, [pc, #628]	; (8006918 <_dtoa_r+0x2e0>)
 80066a4:	bfb8      	it	lt
 80066a6:	f8c8 2000 	strlt.w	r2, [r8]
 80066aa:	ea33 0309 	bics.w	r3, r3, r9
 80066ae:	d119      	bne.n	80066e4 <_dtoa_r+0xac>
 80066b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066bc:	4333      	orrs	r3, r6
 80066be:	f000 8589 	beq.w	80071d4 <_dtoa_r+0xb9c>
 80066c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066c4:	b953      	cbnz	r3, 80066dc <_dtoa_r+0xa4>
 80066c6:	4b95      	ldr	r3, [pc, #596]	; (800691c <_dtoa_r+0x2e4>)
 80066c8:	e023      	b.n	8006712 <_dtoa_r+0xda>
 80066ca:	4b95      	ldr	r3, [pc, #596]	; (8006920 <_dtoa_r+0x2e8>)
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	3308      	adds	r3, #8
 80066d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	9803      	ldr	r0, [sp, #12]
 80066d6:	b019      	add	sp, #100	; 0x64
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	4b8f      	ldr	r3, [pc, #572]	; (800691c <_dtoa_r+0x2e4>)
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	3303      	adds	r3, #3
 80066e2:	e7f5      	b.n	80066d0 <_dtoa_r+0x98>
 80066e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80066ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066f0:	2200      	movs	r2, #0
 80066f2:	2300      	movs	r3, #0
 80066f4:	f7fa f958 	bl	80009a8 <__aeabi_dcmpeq>
 80066f8:	4680      	mov	r8, r0
 80066fa:	b160      	cbz	r0, 8006716 <_dtoa_r+0xde>
 80066fc:	2301      	movs	r3, #1
 80066fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8562 	beq.w	80071ce <_dtoa_r+0xb96>
 800670a:	4b86      	ldr	r3, [pc, #536]	; (8006924 <_dtoa_r+0x2ec>)
 800670c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	9303      	str	r3, [sp, #12]
 8006714:	e7de      	b.n	80066d4 <_dtoa_r+0x9c>
 8006716:	ab16      	add	r3, sp, #88	; 0x58
 8006718:	9301      	str	r3, [sp, #4]
 800671a:	ab17      	add	r3, sp, #92	; 0x5c
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	4628      	mov	r0, r5
 8006720:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006724:	f001 f98a 	bl	8007a3c <__d2b>
 8006728:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800672c:	4682      	mov	sl, r0
 800672e:	2c00      	cmp	r4, #0
 8006730:	d07e      	beq.n	8006830 <_dtoa_r+0x1f8>
 8006732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006738:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800673c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006740:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006748:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800674c:	4619      	mov	r1, r3
 800674e:	2200      	movs	r2, #0
 8006750:	4b75      	ldr	r3, [pc, #468]	; (8006928 <_dtoa_r+0x2f0>)
 8006752:	f7f9 fd09 	bl	8000168 <__aeabi_dsub>
 8006756:	a368      	add	r3, pc, #416	; (adr r3, 80068f8 <_dtoa_r+0x2c0>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f7f9 febc 	bl	80004d8 <__aeabi_dmul>
 8006760:	a367      	add	r3, pc, #412	; (adr r3, 8006900 <_dtoa_r+0x2c8>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd01 	bl	800016c <__adddf3>
 800676a:	4606      	mov	r6, r0
 800676c:	4620      	mov	r0, r4
 800676e:	460f      	mov	r7, r1
 8006770:	f7f9 fe48 	bl	8000404 <__aeabi_i2d>
 8006774:	a364      	add	r3, pc, #400	; (adr r3, 8006908 <_dtoa_r+0x2d0>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f7f9 fead 	bl	80004d8 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7f9 fcf1 	bl	800016c <__adddf3>
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7fa f953 	bl	8000a38 <__aeabi_d2iz>
 8006792:	2200      	movs	r2, #0
 8006794:	4683      	mov	fp, r0
 8006796:	2300      	movs	r3, #0
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	f7fa f90e 	bl	80009bc <__aeabi_dcmplt>
 80067a0:	b148      	cbz	r0, 80067b6 <_dtoa_r+0x17e>
 80067a2:	4658      	mov	r0, fp
 80067a4:	f7f9 fe2e 	bl	8000404 <__aeabi_i2d>
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	f7fa f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80067b0:	b908      	cbnz	r0, 80067b6 <_dtoa_r+0x17e>
 80067b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067b6:	f1bb 0f16 	cmp.w	fp, #22
 80067ba:	d857      	bhi.n	800686c <_dtoa_r+0x234>
 80067bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067c0:	4b5a      	ldr	r3, [pc, #360]	; (800692c <_dtoa_r+0x2f4>)
 80067c2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7fa f8f7 	bl	80009bc <__aeabi_dcmplt>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d04e      	beq.n	8006870 <_dtoa_r+0x238>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80067d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80067da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067dc:	1b1b      	subs	r3, r3, r4
 80067de:	1e5a      	subs	r2, r3, #1
 80067e0:	bf46      	itte	mi
 80067e2:	f1c3 0901 	rsbmi	r9, r3, #1
 80067e6:	2300      	movmi	r3, #0
 80067e8:	f04f 0900 	movpl.w	r9, #0
 80067ec:	9209      	str	r2, [sp, #36]	; 0x24
 80067ee:	bf48      	it	mi
 80067f0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80067f2:	f1bb 0f00 	cmp.w	fp, #0
 80067f6:	db3d      	blt.n	8006874 <_dtoa_r+0x23c>
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80067fe:	445b      	add	r3, fp
 8006800:	9309      	str	r3, [sp, #36]	; 0x24
 8006802:	2300      	movs	r3, #0
 8006804:	930a      	str	r3, [sp, #40]	; 0x28
 8006806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006808:	2b09      	cmp	r3, #9
 800680a:	d867      	bhi.n	80068dc <_dtoa_r+0x2a4>
 800680c:	2b05      	cmp	r3, #5
 800680e:	bfc4      	itt	gt
 8006810:	3b04      	subgt	r3, #4
 8006812:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006816:	bfc8      	it	gt
 8006818:	2400      	movgt	r4, #0
 800681a:	f1a3 0302 	sub.w	r3, r3, #2
 800681e:	bfd8      	it	le
 8006820:	2401      	movle	r4, #1
 8006822:	2b03      	cmp	r3, #3
 8006824:	f200 8086 	bhi.w	8006934 <_dtoa_r+0x2fc>
 8006828:	e8df f003 	tbb	[pc, r3]
 800682c:	5637392c 	.word	0x5637392c
 8006830:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006834:	441c      	add	r4, r3
 8006836:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800683a:	2b20      	cmp	r3, #32
 800683c:	bfc1      	itttt	gt
 800683e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006842:	fa09 f903 	lslgt.w	r9, r9, r3
 8006846:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800684a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800684e:	bfd6      	itet	le
 8006850:	f1c3 0320 	rsble	r3, r3, #32
 8006854:	ea49 0003 	orrgt.w	r0, r9, r3
 8006858:	fa06 f003 	lslle.w	r0, r6, r3
 800685c:	f7f9 fdc2 	bl	80003e4 <__aeabi_ui2d>
 8006860:	2201      	movs	r2, #1
 8006862:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006866:	3c01      	subs	r4, #1
 8006868:	9213      	str	r2, [sp, #76]	; 0x4c
 800686a:	e76f      	b.n	800674c <_dtoa_r+0x114>
 800686c:	2301      	movs	r3, #1
 800686e:	e7b3      	b.n	80067d8 <_dtoa_r+0x1a0>
 8006870:	900f      	str	r0, [sp, #60]	; 0x3c
 8006872:	e7b2      	b.n	80067da <_dtoa_r+0x1a2>
 8006874:	f1cb 0300 	rsb	r3, fp, #0
 8006878:	930a      	str	r3, [sp, #40]	; 0x28
 800687a:	2300      	movs	r3, #0
 800687c:	eba9 090b 	sub.w	r9, r9, fp
 8006880:	930e      	str	r3, [sp, #56]	; 0x38
 8006882:	e7c0      	b.n	8006806 <_dtoa_r+0x1ce>
 8006884:	2300      	movs	r3, #0
 8006886:	930b      	str	r3, [sp, #44]	; 0x2c
 8006888:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688a:	2b00      	cmp	r3, #0
 800688c:	dc55      	bgt.n	800693a <_dtoa_r+0x302>
 800688e:	2301      	movs	r3, #1
 8006890:	461a      	mov	r2, r3
 8006892:	9306      	str	r3, [sp, #24]
 8006894:	9308      	str	r3, [sp, #32]
 8006896:	9223      	str	r2, [sp, #140]	; 0x8c
 8006898:	e00b      	b.n	80068b2 <_dtoa_r+0x27a>
 800689a:	2301      	movs	r3, #1
 800689c:	e7f3      	b.n	8006886 <_dtoa_r+0x24e>
 800689e:	2300      	movs	r3, #0
 80068a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068a4:	445b      	add	r3, fp
 80068a6:	9306      	str	r3, [sp, #24]
 80068a8:	3301      	adds	r3, #1
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	9308      	str	r3, [sp, #32]
 80068ae:	bfb8      	it	lt
 80068b0:	2301      	movlt	r3, #1
 80068b2:	2100      	movs	r1, #0
 80068b4:	2204      	movs	r2, #4
 80068b6:	69e8      	ldr	r0, [r5, #28]
 80068b8:	f102 0614 	add.w	r6, r2, #20
 80068bc:	429e      	cmp	r6, r3
 80068be:	d940      	bls.n	8006942 <_dtoa_r+0x30a>
 80068c0:	6041      	str	r1, [r0, #4]
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fd98 	bl	80073f8 <_Balloc>
 80068c8:	9003      	str	r0, [sp, #12]
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d13c      	bne.n	8006948 <_dtoa_r+0x310>
 80068ce:	4602      	mov	r2, r0
 80068d0:	f240 11af 	movw	r1, #431	; 0x1af
 80068d4:	4b16      	ldr	r3, [pc, #88]	; (8006930 <_dtoa_r+0x2f8>)
 80068d6:	e6c3      	b.n	8006660 <_dtoa_r+0x28>
 80068d8:	2301      	movs	r3, #1
 80068da:	e7e1      	b.n	80068a0 <_dtoa_r+0x268>
 80068dc:	2401      	movs	r4, #1
 80068de:	2300      	movs	r3, #0
 80068e0:	940b      	str	r4, [sp, #44]	; 0x2c
 80068e2:	9322      	str	r3, [sp, #136]	; 0x88
 80068e4:	f04f 33ff 	mov.w	r3, #4294967295
 80068e8:	2200      	movs	r2, #0
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	9308      	str	r3, [sp, #32]
 80068ee:	2312      	movs	r3, #18
 80068f0:	e7d1      	b.n	8006896 <_dtoa_r+0x25e>
 80068f2:	bf00      	nop
 80068f4:	f3af 8000 	nop.w
 80068f8:	636f4361 	.word	0x636f4361
 80068fc:	3fd287a7 	.word	0x3fd287a7
 8006900:	8b60c8b3 	.word	0x8b60c8b3
 8006904:	3fc68a28 	.word	0x3fc68a28
 8006908:	509f79fb 	.word	0x509f79fb
 800690c:	3fd34413 	.word	0x3fd34413
 8006910:	080086df 	.word	0x080086df
 8006914:	080086f6 	.word	0x080086f6
 8006918:	7ff00000 	.word	0x7ff00000
 800691c:	080086db 	.word	0x080086db
 8006920:	080086d2 	.word	0x080086d2
 8006924:	080086af 	.word	0x080086af
 8006928:	3ff80000 	.word	0x3ff80000
 800692c:	080087e0 	.word	0x080087e0
 8006930:	0800874e 	.word	0x0800874e
 8006934:	2301      	movs	r3, #1
 8006936:	930b      	str	r3, [sp, #44]	; 0x2c
 8006938:	e7d4      	b.n	80068e4 <_dtoa_r+0x2ac>
 800693a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800693c:	9306      	str	r3, [sp, #24]
 800693e:	9308      	str	r3, [sp, #32]
 8006940:	e7b7      	b.n	80068b2 <_dtoa_r+0x27a>
 8006942:	3101      	adds	r1, #1
 8006944:	0052      	lsls	r2, r2, #1
 8006946:	e7b7      	b.n	80068b8 <_dtoa_r+0x280>
 8006948:	69eb      	ldr	r3, [r5, #28]
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	9b08      	ldr	r3, [sp, #32]
 8006950:	2b0e      	cmp	r3, #14
 8006952:	f200 80a8 	bhi.w	8006aa6 <_dtoa_r+0x46e>
 8006956:	2c00      	cmp	r4, #0
 8006958:	f000 80a5 	beq.w	8006aa6 <_dtoa_r+0x46e>
 800695c:	f1bb 0f00 	cmp.w	fp, #0
 8006960:	dd34      	ble.n	80069cc <_dtoa_r+0x394>
 8006962:	4b9a      	ldr	r3, [pc, #616]	; (8006bcc <_dtoa_r+0x594>)
 8006964:	f00b 020f 	and.w	r2, fp, #15
 8006968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800696c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006970:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006974:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006978:	ea4f 142b 	mov.w	r4, fp, asr #4
 800697c:	d016      	beq.n	80069ac <_dtoa_r+0x374>
 800697e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006982:	4b93      	ldr	r3, [pc, #588]	; (8006bd0 <_dtoa_r+0x598>)
 8006984:	2703      	movs	r7, #3
 8006986:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800698a:	f7f9 fecf 	bl	800072c <__aeabi_ddiv>
 800698e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006992:	f004 040f 	and.w	r4, r4, #15
 8006996:	4e8e      	ldr	r6, [pc, #568]	; (8006bd0 <_dtoa_r+0x598>)
 8006998:	b954      	cbnz	r4, 80069b0 <_dtoa_r+0x378>
 800699a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800699e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a2:	f7f9 fec3 	bl	800072c <__aeabi_ddiv>
 80069a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069aa:	e029      	b.n	8006a00 <_dtoa_r+0x3c8>
 80069ac:	2702      	movs	r7, #2
 80069ae:	e7f2      	b.n	8006996 <_dtoa_r+0x35e>
 80069b0:	07e1      	lsls	r1, r4, #31
 80069b2:	d508      	bpl.n	80069c6 <_dtoa_r+0x38e>
 80069b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069bc:	f7f9 fd8c 	bl	80004d8 <__aeabi_dmul>
 80069c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c4:	3701      	adds	r7, #1
 80069c6:	1064      	asrs	r4, r4, #1
 80069c8:	3608      	adds	r6, #8
 80069ca:	e7e5      	b.n	8006998 <_dtoa_r+0x360>
 80069cc:	f000 80a5 	beq.w	8006b1a <_dtoa_r+0x4e2>
 80069d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069d4:	f1cb 0400 	rsb	r4, fp, #0
 80069d8:	4b7c      	ldr	r3, [pc, #496]	; (8006bcc <_dtoa_r+0x594>)
 80069da:	f004 020f 	and.w	r2, r4, #15
 80069de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fd77 	bl	80004d8 <__aeabi_dmul>
 80069ea:	2702      	movs	r7, #2
 80069ec:	2300      	movs	r3, #0
 80069ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f2:	4e77      	ldr	r6, [pc, #476]	; (8006bd0 <_dtoa_r+0x598>)
 80069f4:	1124      	asrs	r4, r4, #4
 80069f6:	2c00      	cmp	r4, #0
 80069f8:	f040 8084 	bne.w	8006b04 <_dtoa_r+0x4cc>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1d2      	bne.n	80069a6 <_dtoa_r+0x36e>
 8006a00:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8087 	beq.w	8006b1e <_dtoa_r+0x4e6>
 8006a10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a14:	2200      	movs	r2, #0
 8006a16:	4b6f      	ldr	r3, [pc, #444]	; (8006bd4 <_dtoa_r+0x59c>)
 8006a18:	f7f9 ffd0 	bl	80009bc <__aeabi_dcmplt>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d07e      	beq.n	8006b1e <_dtoa_r+0x4e6>
 8006a20:	9b08      	ldr	r3, [sp, #32]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d07b      	beq.n	8006b1e <_dtoa_r+0x4e6>
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dd38      	ble.n	8006a9e <_dtoa_r+0x466>
 8006a2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a30:	2200      	movs	r2, #0
 8006a32:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <_dtoa_r+0x5a0>)
 8006a34:	f7f9 fd50 	bl	80004d8 <__aeabi_dmul>
 8006a38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a3c:	9c06      	ldr	r4, [sp, #24]
 8006a3e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006a42:	3701      	adds	r7, #1
 8006a44:	4638      	mov	r0, r7
 8006a46:	f7f9 fcdd 	bl	8000404 <__aeabi_i2d>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	f7f9 fd43 	bl	80004d8 <__aeabi_dmul>
 8006a52:	2200      	movs	r2, #0
 8006a54:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <_dtoa_r+0x5a4>)
 8006a56:	f7f9 fb89 	bl	800016c <__adddf3>
 8006a5a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a62:	9611      	str	r6, [sp, #68]	; 0x44
 8006a64:	2c00      	cmp	r4, #0
 8006a66:	d15d      	bne.n	8006b24 <_dtoa_r+0x4ec>
 8006a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4b5c      	ldr	r3, [pc, #368]	; (8006be0 <_dtoa_r+0x5a8>)
 8006a70:	f7f9 fb7a 	bl	8000168 <__aeabi_dsub>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a7c:	4633      	mov	r3, r6
 8006a7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a80:	f7f9 ffba 	bl	80009f8 <__aeabi_dcmpgt>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	f040 8295 	bne.w	8006fb4 <_dtoa_r+0x97c>
 8006a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a94:	f7f9 ff92 	bl	80009bc <__aeabi_dcmplt>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f040 8289 	bne.w	8006fb0 <_dtoa_r+0x978>
 8006a9e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006aa2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006aa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f2c0 8151 	blt.w	8006d50 <_dtoa_r+0x718>
 8006aae:	f1bb 0f0e 	cmp.w	fp, #14
 8006ab2:	f300 814d 	bgt.w	8006d50 <_dtoa_r+0x718>
 8006ab6:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <_dtoa_r+0x594>)
 8006ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006abc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ac0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006ac4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f280 80da 	bge.w	8006c80 <_dtoa_r+0x648>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f300 80d6 	bgt.w	8006c80 <_dtoa_r+0x648>
 8006ad4:	f040 826b 	bne.w	8006fae <_dtoa_r+0x976>
 8006ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006adc:	2200      	movs	r2, #0
 8006ade:	4b40      	ldr	r3, [pc, #256]	; (8006be0 <_dtoa_r+0x5a8>)
 8006ae0:	f7f9 fcfa 	bl	80004d8 <__aeabi_dmul>
 8006ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae8:	f7f9 ff7c 	bl	80009e4 <__aeabi_dcmpge>
 8006aec:	9c08      	ldr	r4, [sp, #32]
 8006aee:	4626      	mov	r6, r4
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 8241 	bne.w	8006f78 <_dtoa_r+0x940>
 8006af6:	2331      	movs	r3, #49	; 0x31
 8006af8:	9f03      	ldr	r7, [sp, #12]
 8006afa:	f10b 0b01 	add.w	fp, fp, #1
 8006afe:	f807 3b01 	strb.w	r3, [r7], #1
 8006b02:	e23d      	b.n	8006f80 <_dtoa_r+0x948>
 8006b04:	07e2      	lsls	r2, r4, #31
 8006b06:	d505      	bpl.n	8006b14 <_dtoa_r+0x4dc>
 8006b08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	2301      	movs	r3, #1
 8006b12:	3701      	adds	r7, #1
 8006b14:	1064      	asrs	r4, r4, #1
 8006b16:	3608      	adds	r6, #8
 8006b18:	e76d      	b.n	80069f6 <_dtoa_r+0x3be>
 8006b1a:	2702      	movs	r7, #2
 8006b1c:	e770      	b.n	8006a00 <_dtoa_r+0x3c8>
 8006b1e:	46d8      	mov	r8, fp
 8006b20:	9c08      	ldr	r4, [sp, #32]
 8006b22:	e78f      	b.n	8006a44 <_dtoa_r+0x40c>
 8006b24:	9903      	ldr	r1, [sp, #12]
 8006b26:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <_dtoa_r+0x594>)
 8006b28:	4421      	add	r1, r4
 8006b2a:	9112      	str	r1, [sp, #72]	; 0x48
 8006b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b32:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d054      	beq.n	8006be8 <_dtoa_r+0x5b0>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	4928      	ldr	r1, [pc, #160]	; (8006be4 <_dtoa_r+0x5ac>)
 8006b42:	f7f9 fdf3 	bl	800072c <__aeabi_ddiv>
 8006b46:	463b      	mov	r3, r7
 8006b48:	4632      	mov	r2, r6
 8006b4a:	f7f9 fb0d 	bl	8000168 <__aeabi_dsub>
 8006b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b52:	9f03      	ldr	r7, [sp, #12]
 8006b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b58:	f7f9 ff6e 	bl	8000a38 <__aeabi_d2iz>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	f7f9 fc51 	bl	8000404 <__aeabi_i2d>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b6a:	f7f9 fafd 	bl	8000168 <__aeabi_dsub>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	3430      	adds	r4, #48	; 0x30
 8006b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b7c:	f807 4b01 	strb.w	r4, [r7], #1
 8006b80:	f7f9 ff1c 	bl	80009bc <__aeabi_dcmplt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d173      	bne.n	8006c70 <_dtoa_r+0x638>
 8006b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4911      	ldr	r1, [pc, #68]	; (8006bd4 <_dtoa_r+0x59c>)
 8006b90:	f7f9 faea 	bl	8000168 <__aeabi_dsub>
 8006b94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b98:	f7f9 ff10 	bl	80009bc <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 80b6 	bne.w	8006d0e <_dtoa_r+0x6d6>
 8006ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ba4:	429f      	cmp	r7, r3
 8006ba6:	f43f af7a 	beq.w	8006a9e <_dtoa_r+0x466>
 8006baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4b09      	ldr	r3, [pc, #36]	; (8006bd8 <_dtoa_r+0x5a0>)
 8006bb2:	f7f9 fc91 	bl	80004d8 <__aeabi_dmul>
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <_dtoa_r+0x5a0>)
 8006bc2:	f7f9 fc89 	bl	80004d8 <__aeabi_dmul>
 8006bc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bca:	e7c3      	b.n	8006b54 <_dtoa_r+0x51c>
 8006bcc:	080087e0 	.word	0x080087e0
 8006bd0:	080087b8 	.word	0x080087b8
 8006bd4:	3ff00000 	.word	0x3ff00000
 8006bd8:	40240000 	.word	0x40240000
 8006bdc:	401c0000 	.word	0x401c0000
 8006be0:	40140000 	.word	0x40140000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	4630      	mov	r0, r6
 8006bea:	4639      	mov	r1, r7
 8006bec:	f7f9 fc74 	bl	80004d8 <__aeabi_dmul>
 8006bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bf6:	9c03      	ldr	r4, [sp, #12]
 8006bf8:	9314      	str	r3, [sp, #80]	; 0x50
 8006bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bfe:	f7f9 ff1b 	bl	8000a38 <__aeabi_d2iz>
 8006c02:	9015      	str	r0, [sp, #84]	; 0x54
 8006c04:	f7f9 fbfe 	bl	8000404 <__aeabi_i2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c10:	f7f9 faaa 	bl	8000168 <__aeabi_dsub>
 8006c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c16:	4606      	mov	r6, r0
 8006c18:	3330      	adds	r3, #48	; 0x30
 8006c1a:	f804 3b01 	strb.w	r3, [r4], #1
 8006c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c20:	460f      	mov	r7, r1
 8006c22:	429c      	cmp	r4, r3
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	d124      	bne.n	8006c74 <_dtoa_r+0x63c>
 8006c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c2e:	4baf      	ldr	r3, [pc, #700]	; (8006eec <_dtoa_r+0x8b4>)
 8006c30:	f7f9 fa9c 	bl	800016c <__adddf3>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 fedc 	bl	80009f8 <__aeabi_dcmpgt>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d163      	bne.n	8006d0c <_dtoa_r+0x6d4>
 8006c44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c48:	2000      	movs	r0, #0
 8006c4a:	49a8      	ldr	r1, [pc, #672]	; (8006eec <_dtoa_r+0x8b4>)
 8006c4c:	f7f9 fa8c 	bl	8000168 <__aeabi_dsub>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 feb0 	bl	80009bc <__aeabi_dcmplt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f43f af1e 	beq.w	8006a9e <_dtoa_r+0x466>
 8006c62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c64:	1e7b      	subs	r3, r7, #1
 8006c66:	9314      	str	r3, [sp, #80]	; 0x50
 8006c68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d0f8      	beq.n	8006c62 <_dtoa_r+0x62a>
 8006c70:	46c3      	mov	fp, r8
 8006c72:	e03b      	b.n	8006cec <_dtoa_r+0x6b4>
 8006c74:	4b9e      	ldr	r3, [pc, #632]	; (8006ef0 <_dtoa_r+0x8b8>)
 8006c76:	f7f9 fc2f 	bl	80004d8 <__aeabi_dmul>
 8006c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7e:	e7bc      	b.n	8006bfa <_dtoa_r+0x5c2>
 8006c80:	9f03      	ldr	r7, [sp, #12]
 8006c82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 fd4d 	bl	800072c <__aeabi_ddiv>
 8006c92:	f7f9 fed1 	bl	8000a38 <__aeabi_d2iz>
 8006c96:	4604      	mov	r4, r0
 8006c98:	f7f9 fbb4 	bl	8000404 <__aeabi_i2d>
 8006c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ca0:	f7f9 fc1a 	bl	80004d8 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4649      	mov	r1, r9
 8006cac:	f7f9 fa5c 	bl	8000168 <__aeabi_dsub>
 8006cb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006cb4:	f807 6b01 	strb.w	r6, [r7], #1
 8006cb8:	9e03      	ldr	r6, [sp, #12]
 8006cba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006cbe:	1bbe      	subs	r6, r7, r6
 8006cc0:	45b4      	cmp	ip, r6
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	d136      	bne.n	8006d36 <_dtoa_r+0x6fe>
 8006cc8:	f7f9 fa50 	bl	800016c <__adddf3>
 8006ccc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	4689      	mov	r9, r1
 8006cd4:	f7f9 fe90 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd8:	bb58      	cbnz	r0, 8006d32 <_dtoa_r+0x6fa>
 8006cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fe61 	bl	80009a8 <__aeabi_dcmpeq>
 8006ce6:	b108      	cbz	r0, 8006cec <_dtoa_r+0x6b4>
 8006ce8:	07e3      	lsls	r3, r4, #31
 8006cea:	d422      	bmi.n	8006d32 <_dtoa_r+0x6fa>
 8006cec:	4651      	mov	r1, sl
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fbc2 	bl	8007478 <_Bfree>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006cf8:	703b      	strb	r3, [r7, #0]
 8006cfa:	f10b 0301 	add.w	r3, fp, #1
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f43f ace6 	beq.w	80066d4 <_dtoa_r+0x9c>
 8006d08:	601f      	str	r7, [r3, #0]
 8006d0a:	e4e3      	b.n	80066d4 <_dtoa_r+0x9c>
 8006d0c:	4627      	mov	r7, r4
 8006d0e:	463b      	mov	r3, r7
 8006d10:	461f      	mov	r7, r3
 8006d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d16:	2a39      	cmp	r2, #57	; 0x39
 8006d18:	d107      	bne.n	8006d2a <_dtoa_r+0x6f2>
 8006d1a:	9a03      	ldr	r2, [sp, #12]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d1f7      	bne.n	8006d10 <_dtoa_r+0x6d8>
 8006d20:	2230      	movs	r2, #48	; 0x30
 8006d22:	9903      	ldr	r1, [sp, #12]
 8006d24:	f108 0801 	add.w	r8, r8, #1
 8006d28:	700a      	strb	r2, [r1, #0]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	3201      	adds	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e79e      	b.n	8006c70 <_dtoa_r+0x638>
 8006d32:	46d8      	mov	r8, fp
 8006d34:	e7eb      	b.n	8006d0e <_dtoa_r+0x6d6>
 8006d36:	2200      	movs	r2, #0
 8006d38:	4b6d      	ldr	r3, [pc, #436]	; (8006ef0 <_dtoa_r+0x8b8>)
 8006d3a:	f7f9 fbcd 	bl	80004d8 <__aeabi_dmul>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2300      	movs	r3, #0
 8006d42:	4680      	mov	r8, r0
 8006d44:	4689      	mov	r9, r1
 8006d46:	f7f9 fe2f 	bl	80009a8 <__aeabi_dcmpeq>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d09b      	beq.n	8006c86 <_dtoa_r+0x64e>
 8006d4e:	e7cd      	b.n	8006cec <_dtoa_r+0x6b4>
 8006d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	f000 80c4 	beq.w	8006ee0 <_dtoa_r+0x8a8>
 8006d58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d5a:	2a01      	cmp	r2, #1
 8006d5c:	f300 80a8 	bgt.w	8006eb0 <_dtoa_r+0x878>
 8006d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d62:	2a00      	cmp	r2, #0
 8006d64:	f000 80a0 	beq.w	8006ea8 <_dtoa_r+0x870>
 8006d68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d6c:	464f      	mov	r7, r9
 8006d6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d72:	2101      	movs	r1, #1
 8006d74:	441a      	add	r2, r3
 8006d76:	4628      	mov	r0, r5
 8006d78:	4499      	add	r9, r3
 8006d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d7c:	f000 fc32 	bl	80075e4 <__i2b>
 8006d80:	4606      	mov	r6, r0
 8006d82:	b15f      	cbz	r7, 8006d9c <_dtoa_r+0x764>
 8006d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dd08      	ble.n	8006d9c <_dtoa_r+0x764>
 8006d8a:	42bb      	cmp	r3, r7
 8006d8c:	bfa8      	it	ge
 8006d8e:	463b      	movge	r3, r7
 8006d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d92:	eba9 0903 	sub.w	r9, r9, r3
 8006d96:	1aff      	subs	r7, r7, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	b1f3      	cbz	r3, 8006dde <_dtoa_r+0x7a6>
 8006da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80a0 	beq.w	8006ee8 <_dtoa_r+0x8b0>
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	dd10      	ble.n	8006dce <_dtoa_r+0x796>
 8006dac:	4631      	mov	r1, r6
 8006dae:	4622      	mov	r2, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 fcd5 	bl	8007760 <__pow5mult>
 8006db6:	4652      	mov	r2, sl
 8006db8:	4601      	mov	r1, r0
 8006dba:	4606      	mov	r6, r0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 fc27 	bl	8007610 <__multiply>
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 fb56 	bl	8007478 <_Bfree>
 8006dcc:	46c2      	mov	sl, r8
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	1b1a      	subs	r2, r3, r4
 8006dd2:	d004      	beq.n	8006dde <_dtoa_r+0x7a6>
 8006dd4:	4651      	mov	r1, sl
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 fcc2 	bl	8007760 <__pow5mult>
 8006ddc:	4682      	mov	sl, r0
 8006dde:	2101      	movs	r1, #1
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 fbff 	bl	80075e4 <__i2b>
 8006de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006de8:	4604      	mov	r4, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f340 8082 	ble.w	8006ef4 <_dtoa_r+0x8bc>
 8006df0:	461a      	mov	r2, r3
 8006df2:	4601      	mov	r1, r0
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 fcb3 	bl	8007760 <__pow5mult>
 8006dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	dd7b      	ble.n	8006efa <_dtoa_r+0x8c2>
 8006e02:	f04f 0800 	mov.w	r8, #0
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e0c:	6918      	ldr	r0, [r3, #16]
 8006e0e:	f000 fb9b 	bl	8007548 <__hi0bits>
 8006e12:	f1c0 0020 	rsb	r0, r0, #32
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	4418      	add	r0, r3
 8006e1a:	f010 001f 	ands.w	r0, r0, #31
 8006e1e:	f000 8092 	beq.w	8006f46 <_dtoa_r+0x90e>
 8006e22:	f1c0 0320 	rsb	r3, r0, #32
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	f340 8085 	ble.w	8006f36 <_dtoa_r+0x8fe>
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	f1c0 001c 	rsb	r0, r0, #28
 8006e32:	4403      	add	r3, r0
 8006e34:	4481      	add	r9, r0
 8006e36:	4407      	add	r7, r0
 8006e38:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3a:	f1b9 0f00 	cmp.w	r9, #0
 8006e3e:	dd05      	ble.n	8006e4c <_dtoa_r+0x814>
 8006e40:	4651      	mov	r1, sl
 8006e42:	464a      	mov	r2, r9
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 fce5 	bl	8007814 <__lshift>
 8006e4a:	4682      	mov	sl, r0
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	dd05      	ble.n	8006e5e <_dtoa_r+0x826>
 8006e52:	4621      	mov	r1, r4
 8006e54:	461a      	mov	r2, r3
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fcdc 	bl	8007814 <__lshift>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d072      	beq.n	8006f4a <_dtoa_r+0x912>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4650      	mov	r0, sl
 8006e68:	f000 fd40 	bl	80078ec <__mcmp>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	da6c      	bge.n	8006f4a <_dtoa_r+0x912>
 8006e70:	2300      	movs	r3, #0
 8006e72:	4651      	mov	r1, sl
 8006e74:	220a      	movs	r2, #10
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fb20 	bl	80074bc <__multadd>
 8006e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7e:	4682      	mov	sl, r0
 8006e80:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 81ac 	beq.w	80071e2 <_dtoa_r+0xbaa>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	220a      	movs	r2, #10
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 fb13 	bl	80074bc <__multadd>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	4606      	mov	r6, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f300 8093 	bgt.w	8006fc6 <_dtoa_r+0x98e>
 8006ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	dc59      	bgt.n	8006f5a <_dtoa_r+0x922>
 8006ea6:	e08e      	b.n	8006fc6 <_dtoa_r+0x98e>
 8006ea8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eaa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eae:	e75d      	b.n	8006d6c <_dtoa_r+0x734>
 8006eb0:	9b08      	ldr	r3, [sp, #32]
 8006eb2:	1e5c      	subs	r4, r3, #1
 8006eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	bfbf      	itttt	lt
 8006eba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ebc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006ebe:	1ae3      	sublt	r3, r4, r3
 8006ec0:	18d2      	addlt	r2, r2, r3
 8006ec2:	bfa8      	it	ge
 8006ec4:	1b1c      	subge	r4, r3, r4
 8006ec6:	9b08      	ldr	r3, [sp, #32]
 8006ec8:	bfbe      	ittt	lt
 8006eca:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ecc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006ece:	2400      	movlt	r4, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bfb5      	itete	lt
 8006ed4:	eba9 0703 	sublt.w	r7, r9, r3
 8006ed8:	464f      	movge	r7, r9
 8006eda:	2300      	movlt	r3, #0
 8006edc:	9b08      	ldrge	r3, [sp, #32]
 8006ede:	e747      	b.n	8006d70 <_dtoa_r+0x738>
 8006ee0:	464f      	mov	r7, r9
 8006ee2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ee4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ee6:	e74c      	b.n	8006d82 <_dtoa_r+0x74a>
 8006ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eea:	e773      	b.n	8006dd4 <_dtoa_r+0x79c>
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	40240000 	.word	0x40240000
 8006ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	dc18      	bgt.n	8006f2c <_dtoa_r+0x8f4>
 8006efa:	9b04      	ldr	r3, [sp, #16]
 8006efc:	b9b3      	cbnz	r3, 8006f2c <_dtoa_r+0x8f4>
 8006efe:	9b05      	ldr	r3, [sp, #20]
 8006f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f04:	b993      	cbnz	r3, 8006f2c <_dtoa_r+0x8f4>
 8006f06:	9b05      	ldr	r3, [sp, #20]
 8006f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	051b      	lsls	r3, r3, #20
 8006f10:	b17b      	cbz	r3, 8006f32 <_dtoa_r+0x8fa>
 8006f12:	f04f 0801 	mov.w	r8, #1
 8006f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f18:	f109 0901 	add.w	r9, r9, #1
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f47f af6f 	bne.w	8006e06 <_dtoa_r+0x7ce>
 8006f28:	2001      	movs	r0, #1
 8006f2a:	e774      	b.n	8006e16 <_dtoa_r+0x7de>
 8006f2c:	f04f 0800 	mov.w	r8, #0
 8006f30:	e7f6      	b.n	8006f20 <_dtoa_r+0x8e8>
 8006f32:	4698      	mov	r8, r3
 8006f34:	e7f4      	b.n	8006f20 <_dtoa_r+0x8e8>
 8006f36:	d080      	beq.n	8006e3a <_dtoa_r+0x802>
 8006f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f3a:	331c      	adds	r3, #28
 8006f3c:	441a      	add	r2, r3
 8006f3e:	4499      	add	r9, r3
 8006f40:	441f      	add	r7, r3
 8006f42:	9209      	str	r2, [sp, #36]	; 0x24
 8006f44:	e779      	b.n	8006e3a <_dtoa_r+0x802>
 8006f46:	4603      	mov	r3, r0
 8006f48:	e7f6      	b.n	8006f38 <_dtoa_r+0x900>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc34      	bgt.n	8006fba <_dtoa_r+0x982>
 8006f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	dd31      	ble.n	8006fba <_dtoa_r+0x982>
 8006f56:	9b08      	ldr	r3, [sp, #32]
 8006f58:	9306      	str	r3, [sp, #24]
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	b963      	cbnz	r3, 8006f78 <_dtoa_r+0x940>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	2205      	movs	r2, #5
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 faaa 	bl	80074bc <__multadd>
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f000 fcbd 	bl	80078ec <__mcmp>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f73f adbf 	bgt.w	8006af6 <_dtoa_r+0x4be>
 8006f78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f7a:	9f03      	ldr	r7, [sp, #12]
 8006f7c:	ea6f 0b03 	mvn.w	fp, r3
 8006f80:	f04f 0800 	mov.w	r8, #0
 8006f84:	4621      	mov	r1, r4
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fa76 	bl	8007478 <_Bfree>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	f43f aead 	beq.w	8006cec <_dtoa_r+0x6b4>
 8006f92:	f1b8 0f00 	cmp.w	r8, #0
 8006f96:	d005      	beq.n	8006fa4 <_dtoa_r+0x96c>
 8006f98:	45b0      	cmp	r8, r6
 8006f9a:	d003      	beq.n	8006fa4 <_dtoa_r+0x96c>
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f000 fa6a 	bl	8007478 <_Bfree>
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fa66 	bl	8007478 <_Bfree>
 8006fac:	e69e      	b.n	8006cec <_dtoa_r+0x6b4>
 8006fae:	2400      	movs	r4, #0
 8006fb0:	4626      	mov	r6, r4
 8006fb2:	e7e1      	b.n	8006f78 <_dtoa_r+0x940>
 8006fb4:	46c3      	mov	fp, r8
 8006fb6:	4626      	mov	r6, r4
 8006fb8:	e59d      	b.n	8006af6 <_dtoa_r+0x4be>
 8006fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80c8 	beq.w	8007152 <_dtoa_r+0xb1a>
 8006fc2:	9b08      	ldr	r3, [sp, #32]
 8006fc4:	9306      	str	r3, [sp, #24]
 8006fc6:	2f00      	cmp	r7, #0
 8006fc8:	dd05      	ble.n	8006fd6 <_dtoa_r+0x99e>
 8006fca:	4631      	mov	r1, r6
 8006fcc:	463a      	mov	r2, r7
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 fc20 	bl	8007814 <__lshift>
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	f1b8 0f00 	cmp.w	r8, #0
 8006fda:	d05b      	beq.n	8007094 <_dtoa_r+0xa5c>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	6871      	ldr	r1, [r6, #4]
 8006fe0:	f000 fa0a 	bl	80073f8 <_Balloc>
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	b928      	cbnz	r0, 8006ff4 <_dtoa_r+0x9bc>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006fee:	4b81      	ldr	r3, [pc, #516]	; (80071f4 <_dtoa_r+0xbbc>)
 8006ff0:	f7ff bb36 	b.w	8006660 <_dtoa_r+0x28>
 8006ff4:	6932      	ldr	r2, [r6, #16]
 8006ff6:	f106 010c 	add.w	r1, r6, #12
 8006ffa:	3202      	adds	r2, #2
 8006ffc:	0092      	lsls	r2, r2, #2
 8006ffe:	300c      	adds	r0, #12
 8007000:	f000 ff9e 	bl	8007f40 <memcpy>
 8007004:	2201      	movs	r2, #1
 8007006:	4639      	mov	r1, r7
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fc03 	bl	8007814 <__lshift>
 800700e:	46b0      	mov	r8, r6
 8007010:	4606      	mov	r6, r0
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	9a03      	ldr	r2, [sp, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	9308      	str	r3, [sp, #32]
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	4413      	add	r3, r2
 800701e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007020:	9b04      	ldr	r3, [sp, #16]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	930a      	str	r3, [sp, #40]	; 0x28
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	4621      	mov	r1, r4
 800702c:	3b01      	subs	r3, #1
 800702e:	4650      	mov	r0, sl
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	f7ff fa76 	bl	8006522 <quorem>
 8007036:	4641      	mov	r1, r8
 8007038:	9006      	str	r0, [sp, #24]
 800703a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800703e:	4650      	mov	r0, sl
 8007040:	f000 fc54 	bl	80078ec <__mcmp>
 8007044:	4632      	mov	r2, r6
 8007046:	9009      	str	r0, [sp, #36]	; 0x24
 8007048:	4621      	mov	r1, r4
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fc6a 	bl	8007924 <__mdiff>
 8007050:	68c2      	ldr	r2, [r0, #12]
 8007052:	4607      	mov	r7, r0
 8007054:	bb02      	cbnz	r2, 8007098 <_dtoa_r+0xa60>
 8007056:	4601      	mov	r1, r0
 8007058:	4650      	mov	r0, sl
 800705a:	f000 fc47 	bl	80078ec <__mcmp>
 800705e:	4602      	mov	r2, r0
 8007060:	4639      	mov	r1, r7
 8007062:	4628      	mov	r0, r5
 8007064:	920c      	str	r2, [sp, #48]	; 0x30
 8007066:	f000 fa07 	bl	8007478 <_Bfree>
 800706a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800706c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800706e:	9f08      	ldr	r7, [sp, #32]
 8007070:	ea43 0102 	orr.w	r1, r3, r2
 8007074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007076:	4319      	orrs	r1, r3
 8007078:	d110      	bne.n	800709c <_dtoa_r+0xa64>
 800707a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800707e:	d029      	beq.n	80070d4 <_dtoa_r+0xa9c>
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	dd02      	ble.n	800708c <_dtoa_r+0xa54>
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	f883 9000 	strb.w	r9, [r3]
 8007092:	e777      	b.n	8006f84 <_dtoa_r+0x94c>
 8007094:	4630      	mov	r0, r6
 8007096:	e7ba      	b.n	800700e <_dtoa_r+0x9d6>
 8007098:	2201      	movs	r2, #1
 800709a:	e7e1      	b.n	8007060 <_dtoa_r+0xa28>
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	db04      	blt.n	80070ac <_dtoa_r+0xa74>
 80070a2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80070a4:	430b      	orrs	r3, r1
 80070a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070a8:	430b      	orrs	r3, r1
 80070aa:	d120      	bne.n	80070ee <_dtoa_r+0xab6>
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	dded      	ble.n	800708c <_dtoa_r+0xa54>
 80070b0:	4651      	mov	r1, sl
 80070b2:	2201      	movs	r2, #1
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fbad 	bl	8007814 <__lshift>
 80070ba:	4621      	mov	r1, r4
 80070bc:	4682      	mov	sl, r0
 80070be:	f000 fc15 	bl	80078ec <__mcmp>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	dc03      	bgt.n	80070ce <_dtoa_r+0xa96>
 80070c6:	d1e1      	bne.n	800708c <_dtoa_r+0xa54>
 80070c8:	f019 0f01 	tst.w	r9, #1
 80070cc:	d0de      	beq.n	800708c <_dtoa_r+0xa54>
 80070ce:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070d2:	d1d8      	bne.n	8007086 <_dtoa_r+0xa4e>
 80070d4:	2339      	movs	r3, #57	; 0x39
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	7013      	strb	r3, [r2, #0]
 80070da:	463b      	mov	r3, r7
 80070dc:	461f      	mov	r7, r3
 80070de:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	2a39      	cmp	r2, #57	; 0x39
 80070e6:	d06b      	beq.n	80071c0 <_dtoa_r+0xb88>
 80070e8:	3201      	adds	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
 80070ec:	e74a      	b.n	8006f84 <_dtoa_r+0x94c>
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	dd07      	ble.n	8007102 <_dtoa_r+0xaca>
 80070f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80070f6:	d0ed      	beq.n	80070d4 <_dtoa_r+0xa9c>
 80070f8:	9a04      	ldr	r2, [sp, #16]
 80070fa:	f109 0301 	add.w	r3, r9, #1
 80070fe:	7013      	strb	r3, [r2, #0]
 8007100:	e740      	b.n	8006f84 <_dtoa_r+0x94c>
 8007102:	9b08      	ldr	r3, [sp, #32]
 8007104:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007106:	f803 9c01 	strb.w	r9, [r3, #-1]
 800710a:	4293      	cmp	r3, r2
 800710c:	d042      	beq.n	8007194 <_dtoa_r+0xb5c>
 800710e:	4651      	mov	r1, sl
 8007110:	2300      	movs	r3, #0
 8007112:	220a      	movs	r2, #10
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f9d1 	bl	80074bc <__multadd>
 800711a:	45b0      	cmp	r8, r6
 800711c:	4682      	mov	sl, r0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f04f 020a 	mov.w	r2, #10
 8007126:	4641      	mov	r1, r8
 8007128:	4628      	mov	r0, r5
 800712a:	d107      	bne.n	800713c <_dtoa_r+0xb04>
 800712c:	f000 f9c6 	bl	80074bc <__multadd>
 8007130:	4680      	mov	r8, r0
 8007132:	4606      	mov	r6, r0
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	3301      	adds	r3, #1
 8007138:	9308      	str	r3, [sp, #32]
 800713a:	e775      	b.n	8007028 <_dtoa_r+0x9f0>
 800713c:	f000 f9be 	bl	80074bc <__multadd>
 8007140:	4631      	mov	r1, r6
 8007142:	4680      	mov	r8, r0
 8007144:	2300      	movs	r3, #0
 8007146:	220a      	movs	r2, #10
 8007148:	4628      	mov	r0, r5
 800714a:	f000 f9b7 	bl	80074bc <__multadd>
 800714e:	4606      	mov	r6, r0
 8007150:	e7f0      	b.n	8007134 <_dtoa_r+0xafc>
 8007152:	9b08      	ldr	r3, [sp, #32]
 8007154:	9306      	str	r3, [sp, #24]
 8007156:	9f03      	ldr	r7, [sp, #12]
 8007158:	4621      	mov	r1, r4
 800715a:	4650      	mov	r0, sl
 800715c:	f7ff f9e1 	bl	8006522 <quorem>
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007166:	f807 9b01 	strb.w	r9, [r7], #1
 800716a:	1afa      	subs	r2, r7, r3
 800716c:	9b06      	ldr	r3, [sp, #24]
 800716e:	4293      	cmp	r3, r2
 8007170:	dd07      	ble.n	8007182 <_dtoa_r+0xb4a>
 8007172:	4651      	mov	r1, sl
 8007174:	2300      	movs	r3, #0
 8007176:	220a      	movs	r2, #10
 8007178:	4628      	mov	r0, r5
 800717a:	f000 f99f 	bl	80074bc <__multadd>
 800717e:	4682      	mov	sl, r0
 8007180:	e7ea      	b.n	8007158 <_dtoa_r+0xb20>
 8007182:	9b06      	ldr	r3, [sp, #24]
 8007184:	f04f 0800 	mov.w	r8, #0
 8007188:	2b00      	cmp	r3, #0
 800718a:	bfcc      	ite	gt
 800718c:	461f      	movgt	r7, r3
 800718e:	2701      	movle	r7, #1
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	441f      	add	r7, r3
 8007194:	4651      	mov	r1, sl
 8007196:	2201      	movs	r2, #1
 8007198:	4628      	mov	r0, r5
 800719a:	f000 fb3b 	bl	8007814 <__lshift>
 800719e:	4621      	mov	r1, r4
 80071a0:	4682      	mov	sl, r0
 80071a2:	f000 fba3 	bl	80078ec <__mcmp>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	dc97      	bgt.n	80070da <_dtoa_r+0xaa2>
 80071aa:	d102      	bne.n	80071b2 <_dtoa_r+0xb7a>
 80071ac:	f019 0f01 	tst.w	r9, #1
 80071b0:	d193      	bne.n	80070da <_dtoa_r+0xaa2>
 80071b2:	463b      	mov	r3, r7
 80071b4:	461f      	mov	r7, r3
 80071b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ba:	2a30      	cmp	r2, #48	; 0x30
 80071bc:	d0fa      	beq.n	80071b4 <_dtoa_r+0xb7c>
 80071be:	e6e1      	b.n	8006f84 <_dtoa_r+0x94c>
 80071c0:	9a03      	ldr	r2, [sp, #12]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d18a      	bne.n	80070dc <_dtoa_r+0xaa4>
 80071c6:	2331      	movs	r3, #49	; 0x31
 80071c8:	f10b 0b01 	add.w	fp, fp, #1
 80071cc:	e797      	b.n	80070fe <_dtoa_r+0xac6>
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <_dtoa_r+0xbc0>)
 80071d0:	f7ff ba9f 	b.w	8006712 <_dtoa_r+0xda>
 80071d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f47f aa77 	bne.w	80066ca <_dtoa_r+0x92>
 80071dc:	4b07      	ldr	r3, [pc, #28]	; (80071fc <_dtoa_r+0xbc4>)
 80071de:	f7ff ba98 	b.w	8006712 <_dtoa_r+0xda>
 80071e2:	9b06      	ldr	r3, [sp, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dcb6      	bgt.n	8007156 <_dtoa_r+0xb1e>
 80071e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	f73f aeb5 	bgt.w	8006f5a <_dtoa_r+0x922>
 80071f0:	e7b1      	b.n	8007156 <_dtoa_r+0xb1e>
 80071f2:	bf00      	nop
 80071f4:	0800874e 	.word	0x0800874e
 80071f8:	080086ae 	.word	0x080086ae
 80071fc:	080086d2 	.word	0x080086d2

08007200 <_free_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	2900      	cmp	r1, #0
 8007206:	d040      	beq.n	800728a <_free_r+0x8a>
 8007208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720c:	1f0c      	subs	r4, r1, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfb8      	it	lt
 8007212:	18e4      	addlt	r4, r4, r3
 8007214:	f000 f8e4 	bl	80073e0 <__malloc_lock>
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <_free_r+0x8c>)
 800721a:	6813      	ldr	r3, [r2, #0]
 800721c:	b933      	cbnz	r3, 800722c <_free_r+0x2c>
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	6014      	str	r4, [r2, #0]
 8007222:	4628      	mov	r0, r5
 8007224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007228:	f000 b8e0 	b.w	80073ec <__malloc_unlock>
 800722c:	42a3      	cmp	r3, r4
 800722e:	d908      	bls.n	8007242 <_free_r+0x42>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf01      	itttt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	1809      	addeq	r1, r1, r0
 800723e:	6021      	streq	r1, [r4, #0]
 8007240:	e7ed      	b.n	800721e <_free_r+0x1e>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x4c>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x42>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1850      	adds	r0, r2, r1
 8007250:	42a0      	cmp	r0, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x6c>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	4401      	add	r1, r0
 8007258:	1850      	adds	r0, r2, r1
 800725a:	4283      	cmp	r3, r0
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1e0      	bne.n	8007222 <_free_r+0x22>
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4408      	add	r0, r1
 8007266:	6010      	str	r0, [r2, #0]
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	e7da      	b.n	8007222 <_free_r+0x22>
 800726c:	d902      	bls.n	8007274 <_free_r+0x74>
 800726e:	230c      	movs	r3, #12
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	e7d6      	b.n	8007222 <_free_r+0x22>
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	1821      	adds	r1, r4, r0
 8007278:	428b      	cmp	r3, r1
 800727a:	bf01      	itttt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	1809      	addeq	r1, r1, r0
 8007282:	6021      	streq	r1, [r4, #0]
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	6054      	str	r4, [r2, #4]
 8007288:	e7cb      	b.n	8007222 <_free_r+0x22>
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20000470 	.word	0x20000470

08007290 <malloc>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <malloc+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f000 b823 	b.w	80072e0 <_malloc_r>
 800729a:	bf00      	nop
 800729c:	20000064 	.word	0x20000064

080072a0 <sbrk_aligned>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4e0e      	ldr	r6, [pc, #56]	; (80072dc <sbrk_aligned+0x3c>)
 80072a4:	460c      	mov	r4, r1
 80072a6:	6831      	ldr	r1, [r6, #0]
 80072a8:	4605      	mov	r5, r0
 80072aa:	b911      	cbnz	r1, 80072b2 <sbrk_aligned+0x12>
 80072ac:	f000 fe38 	bl	8007f20 <_sbrk_r>
 80072b0:	6030      	str	r0, [r6, #0]
 80072b2:	4621      	mov	r1, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 fe33 	bl	8007f20 <_sbrk_r>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	d00a      	beq.n	80072d4 <sbrk_aligned+0x34>
 80072be:	1cc4      	adds	r4, r0, #3
 80072c0:	f024 0403 	bic.w	r4, r4, #3
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d007      	beq.n	80072d8 <sbrk_aligned+0x38>
 80072c8:	1a21      	subs	r1, r4, r0
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 fe28 	bl	8007f20 <_sbrk_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d101      	bne.n	80072d8 <sbrk_aligned+0x38>
 80072d4:	f04f 34ff 	mov.w	r4, #4294967295
 80072d8:	4620      	mov	r0, r4
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	20000474 	.word	0x20000474

080072e0 <_malloc_r>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	1ccd      	adds	r5, r1, #3
 80072e6:	f025 0503 	bic.w	r5, r5, #3
 80072ea:	3508      	adds	r5, #8
 80072ec:	2d0c      	cmp	r5, #12
 80072ee:	bf38      	it	cc
 80072f0:	250c      	movcc	r5, #12
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	4607      	mov	r7, r0
 80072f6:	db01      	blt.n	80072fc <_malloc_r+0x1c>
 80072f8:	42a9      	cmp	r1, r5
 80072fa:	d905      	bls.n	8007308 <_malloc_r+0x28>
 80072fc:	230c      	movs	r3, #12
 80072fe:	2600      	movs	r6, #0
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4630      	mov	r0, r6
 8007304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073dc <_malloc_r+0xfc>
 800730c:	f000 f868 	bl	80073e0 <__malloc_lock>
 8007310:	f8d8 3000 	ldr.w	r3, [r8]
 8007314:	461c      	mov	r4, r3
 8007316:	bb5c      	cbnz	r4, 8007370 <_malloc_r+0x90>
 8007318:	4629      	mov	r1, r5
 800731a:	4638      	mov	r0, r7
 800731c:	f7ff ffc0 	bl	80072a0 <sbrk_aligned>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	4604      	mov	r4, r0
 8007324:	d155      	bne.n	80073d2 <_malloc_r+0xf2>
 8007326:	f8d8 4000 	ldr.w	r4, [r8]
 800732a:	4626      	mov	r6, r4
 800732c:	2e00      	cmp	r6, #0
 800732e:	d145      	bne.n	80073bc <_malloc_r+0xdc>
 8007330:	2c00      	cmp	r4, #0
 8007332:	d048      	beq.n	80073c6 <_malloc_r+0xe6>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	4631      	mov	r1, r6
 8007338:	4638      	mov	r0, r7
 800733a:	eb04 0903 	add.w	r9, r4, r3
 800733e:	f000 fdef 	bl	8007f20 <_sbrk_r>
 8007342:	4581      	cmp	r9, r0
 8007344:	d13f      	bne.n	80073c6 <_malloc_r+0xe6>
 8007346:	6821      	ldr	r1, [r4, #0]
 8007348:	4638      	mov	r0, r7
 800734a:	1a6d      	subs	r5, r5, r1
 800734c:	4629      	mov	r1, r5
 800734e:	f7ff ffa7 	bl	80072a0 <sbrk_aligned>
 8007352:	3001      	adds	r0, #1
 8007354:	d037      	beq.n	80073c6 <_malloc_r+0xe6>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	442b      	add	r3, r5
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	f8d8 3000 	ldr.w	r3, [r8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d038      	beq.n	80073d6 <_malloc_r+0xf6>
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	42a2      	cmp	r2, r4
 8007368:	d12b      	bne.n	80073c2 <_malloc_r+0xe2>
 800736a:	2200      	movs	r2, #0
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	e00f      	b.n	8007390 <_malloc_r+0xb0>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	1b52      	subs	r2, r2, r5
 8007374:	d41f      	bmi.n	80073b6 <_malloc_r+0xd6>
 8007376:	2a0b      	cmp	r2, #11
 8007378:	d917      	bls.n	80073aa <_malloc_r+0xca>
 800737a:	1961      	adds	r1, r4, r5
 800737c:	42a3      	cmp	r3, r4
 800737e:	6025      	str	r5, [r4, #0]
 8007380:	bf18      	it	ne
 8007382:	6059      	strne	r1, [r3, #4]
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	bf08      	it	eq
 8007388:	f8c8 1000 	streq.w	r1, [r8]
 800738c:	5162      	str	r2, [r4, r5]
 800738e:	604b      	str	r3, [r1, #4]
 8007390:	4638      	mov	r0, r7
 8007392:	f104 060b 	add.w	r6, r4, #11
 8007396:	f000 f829 	bl	80073ec <__malloc_unlock>
 800739a:	f026 0607 	bic.w	r6, r6, #7
 800739e:	1d23      	adds	r3, r4, #4
 80073a0:	1af2      	subs	r2, r6, r3
 80073a2:	d0ae      	beq.n	8007302 <_malloc_r+0x22>
 80073a4:	1b9b      	subs	r3, r3, r6
 80073a6:	50a3      	str	r3, [r4, r2]
 80073a8:	e7ab      	b.n	8007302 <_malloc_r+0x22>
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	6862      	ldr	r2, [r4, #4]
 80073ae:	d1dd      	bne.n	800736c <_malloc_r+0x8c>
 80073b0:	f8c8 2000 	str.w	r2, [r8]
 80073b4:	e7ec      	b.n	8007390 <_malloc_r+0xb0>
 80073b6:	4623      	mov	r3, r4
 80073b8:	6864      	ldr	r4, [r4, #4]
 80073ba:	e7ac      	b.n	8007316 <_malloc_r+0x36>
 80073bc:	4634      	mov	r4, r6
 80073be:	6876      	ldr	r6, [r6, #4]
 80073c0:	e7b4      	b.n	800732c <_malloc_r+0x4c>
 80073c2:	4613      	mov	r3, r2
 80073c4:	e7cc      	b.n	8007360 <_malloc_r+0x80>
 80073c6:	230c      	movs	r3, #12
 80073c8:	4638      	mov	r0, r7
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	f000 f80e 	bl	80073ec <__malloc_unlock>
 80073d0:	e797      	b.n	8007302 <_malloc_r+0x22>
 80073d2:	6025      	str	r5, [r4, #0]
 80073d4:	e7dc      	b.n	8007390 <_malloc_r+0xb0>
 80073d6:	605b      	str	r3, [r3, #4]
 80073d8:	deff      	udf	#255	; 0xff
 80073da:	bf00      	nop
 80073dc:	20000470 	.word	0x20000470

080073e0 <__malloc_lock>:
 80073e0:	4801      	ldr	r0, [pc, #4]	; (80073e8 <__malloc_lock+0x8>)
 80073e2:	f7ff b88e 	b.w	8006502 <__retarget_lock_acquire_recursive>
 80073e6:	bf00      	nop
 80073e8:	2000046c 	.word	0x2000046c

080073ec <__malloc_unlock>:
 80073ec:	4801      	ldr	r0, [pc, #4]	; (80073f4 <__malloc_unlock+0x8>)
 80073ee:	f7ff b889 	b.w	8006504 <__retarget_lock_release_recursive>
 80073f2:	bf00      	nop
 80073f4:	2000046c 	.word	0x2000046c

080073f8 <_Balloc>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	69c6      	ldr	r6, [r0, #28]
 80073fc:	4604      	mov	r4, r0
 80073fe:	460d      	mov	r5, r1
 8007400:	b976      	cbnz	r6, 8007420 <_Balloc+0x28>
 8007402:	2010      	movs	r0, #16
 8007404:	f7ff ff44 	bl	8007290 <malloc>
 8007408:	4602      	mov	r2, r0
 800740a:	61e0      	str	r0, [r4, #28]
 800740c:	b920      	cbnz	r0, 8007418 <_Balloc+0x20>
 800740e:	216b      	movs	r1, #107	; 0x6b
 8007410:	4b17      	ldr	r3, [pc, #92]	; (8007470 <_Balloc+0x78>)
 8007412:	4818      	ldr	r0, [pc, #96]	; (8007474 <_Balloc+0x7c>)
 8007414:	f000 fda2 	bl	8007f5c <__assert_func>
 8007418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800741c:	6006      	str	r6, [r0, #0]
 800741e:	60c6      	str	r6, [r0, #12]
 8007420:	69e6      	ldr	r6, [r4, #28]
 8007422:	68f3      	ldr	r3, [r6, #12]
 8007424:	b183      	cbz	r3, 8007448 <_Balloc+0x50>
 8007426:	69e3      	ldr	r3, [r4, #28]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800742e:	b9b8      	cbnz	r0, 8007460 <_Balloc+0x68>
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f605 	lsl.w	r6, r1, r5
 8007436:	1d72      	adds	r2, r6, #5
 8007438:	4620      	mov	r0, r4
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	f000 fdac 	bl	8007f98 <_calloc_r>
 8007440:	b160      	cbz	r0, 800745c <_Balloc+0x64>
 8007442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007446:	e00e      	b.n	8007466 <_Balloc+0x6e>
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	2104      	movs	r1, #4
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fda3 	bl	8007f98 <_calloc_r>
 8007452:	69e3      	ldr	r3, [r4, #28]
 8007454:	60f0      	str	r0, [r6, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <_Balloc+0x2e>
 800745c:	2000      	movs	r0, #0
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	6802      	ldr	r2, [r0, #0]
 8007462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007466:	2300      	movs	r3, #0
 8007468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800746c:	e7f7      	b.n	800745e <_Balloc+0x66>
 800746e:	bf00      	nop
 8007470:	080086df 	.word	0x080086df
 8007474:	0800875f 	.word	0x0800875f

08007478 <_Bfree>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	69c6      	ldr	r6, [r0, #28]
 800747c:	4605      	mov	r5, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b976      	cbnz	r6, 80074a0 <_Bfree+0x28>
 8007482:	2010      	movs	r0, #16
 8007484:	f7ff ff04 	bl	8007290 <malloc>
 8007488:	4602      	mov	r2, r0
 800748a:	61e8      	str	r0, [r5, #28]
 800748c:	b920      	cbnz	r0, 8007498 <_Bfree+0x20>
 800748e:	218f      	movs	r1, #143	; 0x8f
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <_Bfree+0x3c>)
 8007492:	4809      	ldr	r0, [pc, #36]	; (80074b8 <_Bfree+0x40>)
 8007494:	f000 fd62 	bl	8007f5c <__assert_func>
 8007498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800749c:	6006      	str	r6, [r0, #0]
 800749e:	60c6      	str	r6, [r0, #12]
 80074a0:	b13c      	cbz	r4, 80074b2 <_Bfree+0x3a>
 80074a2:	69eb      	ldr	r3, [r5, #28]
 80074a4:	6862      	ldr	r2, [r4, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ac:	6021      	str	r1, [r4, #0]
 80074ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	080086df 	.word	0x080086df
 80074b8:	0800875f 	.word	0x0800875f

080074bc <__multadd>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	4607      	mov	r7, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	461e      	mov	r6, r3
 80074c6:	2000      	movs	r0, #0
 80074c8:	690d      	ldr	r5, [r1, #16]
 80074ca:	f101 0c14 	add.w	ip, r1, #20
 80074ce:	f8dc 3000 	ldr.w	r3, [ip]
 80074d2:	3001      	adds	r0, #1
 80074d4:	b299      	uxth	r1, r3
 80074d6:	fb02 6101 	mla	r1, r2, r1, r6
 80074da:	0c1e      	lsrs	r6, r3, #16
 80074dc:	0c0b      	lsrs	r3, r1, #16
 80074de:	fb02 3306 	mla	r3, r2, r6, r3
 80074e2:	b289      	uxth	r1, r1
 80074e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074e8:	4285      	cmp	r5, r0
 80074ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074ee:	f84c 1b04 	str.w	r1, [ip], #4
 80074f2:	dcec      	bgt.n	80074ce <__multadd+0x12>
 80074f4:	b30e      	cbz	r6, 800753a <__multadd+0x7e>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc19      	bgt.n	8007530 <__multadd+0x74>
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	4638      	mov	r0, r7
 8007500:	3101      	adds	r1, #1
 8007502:	f7ff ff79 	bl	80073f8 <_Balloc>
 8007506:	4680      	mov	r8, r0
 8007508:	b928      	cbnz	r0, 8007516 <__multadd+0x5a>
 800750a:	4602      	mov	r2, r0
 800750c:	21ba      	movs	r1, #186	; 0xba
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <__multadd+0x84>)
 8007510:	480c      	ldr	r0, [pc, #48]	; (8007544 <__multadd+0x88>)
 8007512:	f000 fd23 	bl	8007f5c <__assert_func>
 8007516:	6922      	ldr	r2, [r4, #16]
 8007518:	f104 010c 	add.w	r1, r4, #12
 800751c:	3202      	adds	r2, #2
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	300c      	adds	r0, #12
 8007522:	f000 fd0d 	bl	8007f40 <memcpy>
 8007526:	4621      	mov	r1, r4
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ffa5 	bl	8007478 <_Bfree>
 800752e:	4644      	mov	r4, r8
 8007530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007534:	3501      	adds	r5, #1
 8007536:	615e      	str	r6, [r3, #20]
 8007538:	6125      	str	r5, [r4, #16]
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	0800874e 	.word	0x0800874e
 8007544:	0800875f 	.word	0x0800875f

08007548 <__hi0bits>:
 8007548:	0c02      	lsrs	r2, r0, #16
 800754a:	0412      	lsls	r2, r2, #16
 800754c:	4603      	mov	r3, r0
 800754e:	b9ca      	cbnz	r2, 8007584 <__hi0bits+0x3c>
 8007550:	0403      	lsls	r3, r0, #16
 8007552:	2010      	movs	r0, #16
 8007554:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007558:	bf04      	itt	eq
 800755a:	021b      	lsleq	r3, r3, #8
 800755c:	3008      	addeq	r0, #8
 800755e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007562:	bf04      	itt	eq
 8007564:	011b      	lsleq	r3, r3, #4
 8007566:	3004      	addeq	r0, #4
 8007568:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800756c:	bf04      	itt	eq
 800756e:	009b      	lsleq	r3, r3, #2
 8007570:	3002      	addeq	r0, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	db05      	blt.n	8007582 <__hi0bits+0x3a>
 8007576:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800757a:	f100 0001 	add.w	r0, r0, #1
 800757e:	bf08      	it	eq
 8007580:	2020      	moveq	r0, #32
 8007582:	4770      	bx	lr
 8007584:	2000      	movs	r0, #0
 8007586:	e7e5      	b.n	8007554 <__hi0bits+0xc>

08007588 <__lo0bits>:
 8007588:	6803      	ldr	r3, [r0, #0]
 800758a:	4602      	mov	r2, r0
 800758c:	f013 0007 	ands.w	r0, r3, #7
 8007590:	d00b      	beq.n	80075aa <__lo0bits+0x22>
 8007592:	07d9      	lsls	r1, r3, #31
 8007594:	d421      	bmi.n	80075da <__lo0bits+0x52>
 8007596:	0798      	lsls	r0, r3, #30
 8007598:	bf49      	itett	mi
 800759a:	085b      	lsrmi	r3, r3, #1
 800759c:	089b      	lsrpl	r3, r3, #2
 800759e:	2001      	movmi	r0, #1
 80075a0:	6013      	strmi	r3, [r2, #0]
 80075a2:	bf5c      	itt	pl
 80075a4:	2002      	movpl	r0, #2
 80075a6:	6013      	strpl	r3, [r2, #0]
 80075a8:	4770      	bx	lr
 80075aa:	b299      	uxth	r1, r3
 80075ac:	b909      	cbnz	r1, 80075b2 <__lo0bits+0x2a>
 80075ae:	2010      	movs	r0, #16
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	b2d9      	uxtb	r1, r3
 80075b4:	b909      	cbnz	r1, 80075ba <__lo0bits+0x32>
 80075b6:	3008      	adds	r0, #8
 80075b8:	0a1b      	lsrs	r3, r3, #8
 80075ba:	0719      	lsls	r1, r3, #28
 80075bc:	bf04      	itt	eq
 80075be:	091b      	lsreq	r3, r3, #4
 80075c0:	3004      	addeq	r0, #4
 80075c2:	0799      	lsls	r1, r3, #30
 80075c4:	bf04      	itt	eq
 80075c6:	089b      	lsreq	r3, r3, #2
 80075c8:	3002      	addeq	r0, #2
 80075ca:	07d9      	lsls	r1, r3, #31
 80075cc:	d403      	bmi.n	80075d6 <__lo0bits+0x4e>
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	f100 0001 	add.w	r0, r0, #1
 80075d4:	d003      	beq.n	80075de <__lo0bits+0x56>
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	4770      	bx	lr
 80075da:	2000      	movs	r0, #0
 80075dc:	4770      	bx	lr
 80075de:	2020      	movs	r0, #32
 80075e0:	4770      	bx	lr
	...

080075e4 <__i2b>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	460c      	mov	r4, r1
 80075e8:	2101      	movs	r1, #1
 80075ea:	f7ff ff05 	bl	80073f8 <_Balloc>
 80075ee:	4602      	mov	r2, r0
 80075f0:	b928      	cbnz	r0, 80075fe <__i2b+0x1a>
 80075f2:	f240 1145 	movw	r1, #325	; 0x145
 80075f6:	4b04      	ldr	r3, [pc, #16]	; (8007608 <__i2b+0x24>)
 80075f8:	4804      	ldr	r0, [pc, #16]	; (800760c <__i2b+0x28>)
 80075fa:	f000 fcaf 	bl	8007f5c <__assert_func>
 80075fe:	2301      	movs	r3, #1
 8007600:	6144      	str	r4, [r0, #20]
 8007602:	6103      	str	r3, [r0, #16]
 8007604:	bd10      	pop	{r4, pc}
 8007606:	bf00      	nop
 8007608:	0800874e 	.word	0x0800874e
 800760c:	0800875f 	.word	0x0800875f

08007610 <__multiply>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	4691      	mov	r9, r2
 8007616:	690a      	ldr	r2, [r1, #16]
 8007618:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800761c:	460c      	mov	r4, r1
 800761e:	429a      	cmp	r2, r3
 8007620:	bfbe      	ittt	lt
 8007622:	460b      	movlt	r3, r1
 8007624:	464c      	movlt	r4, r9
 8007626:	4699      	movlt	r9, r3
 8007628:	6927      	ldr	r7, [r4, #16]
 800762a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800762e:	68a3      	ldr	r3, [r4, #8]
 8007630:	6861      	ldr	r1, [r4, #4]
 8007632:	eb07 060a 	add.w	r6, r7, sl
 8007636:	42b3      	cmp	r3, r6
 8007638:	b085      	sub	sp, #20
 800763a:	bfb8      	it	lt
 800763c:	3101      	addlt	r1, #1
 800763e:	f7ff fedb 	bl	80073f8 <_Balloc>
 8007642:	b930      	cbnz	r0, 8007652 <__multiply+0x42>
 8007644:	4602      	mov	r2, r0
 8007646:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800764a:	4b43      	ldr	r3, [pc, #268]	; (8007758 <__multiply+0x148>)
 800764c:	4843      	ldr	r0, [pc, #268]	; (800775c <__multiply+0x14c>)
 800764e:	f000 fc85 	bl	8007f5c <__assert_func>
 8007652:	f100 0514 	add.w	r5, r0, #20
 8007656:	462b      	mov	r3, r5
 8007658:	2200      	movs	r2, #0
 800765a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800765e:	4543      	cmp	r3, r8
 8007660:	d321      	bcc.n	80076a6 <__multiply+0x96>
 8007662:	f104 0314 	add.w	r3, r4, #20
 8007666:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800766a:	f109 0314 	add.w	r3, r9, #20
 800766e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007672:	9202      	str	r2, [sp, #8]
 8007674:	1b3a      	subs	r2, r7, r4
 8007676:	3a15      	subs	r2, #21
 8007678:	f022 0203 	bic.w	r2, r2, #3
 800767c:	3204      	adds	r2, #4
 800767e:	f104 0115 	add.w	r1, r4, #21
 8007682:	428f      	cmp	r7, r1
 8007684:	bf38      	it	cc
 8007686:	2204      	movcc	r2, #4
 8007688:	9201      	str	r2, [sp, #4]
 800768a:	9a02      	ldr	r2, [sp, #8]
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	429a      	cmp	r2, r3
 8007690:	d80c      	bhi.n	80076ac <__multiply+0x9c>
 8007692:	2e00      	cmp	r6, #0
 8007694:	dd03      	ble.n	800769e <__multiply+0x8e>
 8007696:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800769a:	2b00      	cmp	r3, #0
 800769c:	d05a      	beq.n	8007754 <__multiply+0x144>
 800769e:	6106      	str	r6, [r0, #16]
 80076a0:	b005      	add	sp, #20
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	f843 2b04 	str.w	r2, [r3], #4
 80076aa:	e7d8      	b.n	800765e <__multiply+0x4e>
 80076ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80076b0:	f1ba 0f00 	cmp.w	sl, #0
 80076b4:	d023      	beq.n	80076fe <__multiply+0xee>
 80076b6:	46a9      	mov	r9, r5
 80076b8:	f04f 0c00 	mov.w	ip, #0
 80076bc:	f104 0e14 	add.w	lr, r4, #20
 80076c0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076c4:	f8d9 1000 	ldr.w	r1, [r9]
 80076c8:	fa1f fb82 	uxth.w	fp, r2
 80076cc:	b289      	uxth	r1, r1
 80076ce:	fb0a 110b 	mla	r1, sl, fp, r1
 80076d2:	4461      	add	r1, ip
 80076d4:	f8d9 c000 	ldr.w	ip, [r9]
 80076d8:	0c12      	lsrs	r2, r2, #16
 80076da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80076de:	fb0a c202 	mla	r2, sl, r2, ip
 80076e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076e6:	b289      	uxth	r1, r1
 80076e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076ec:	4577      	cmp	r7, lr
 80076ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076f2:	f849 1b04 	str.w	r1, [r9], #4
 80076f6:	d8e3      	bhi.n	80076c0 <__multiply+0xb0>
 80076f8:	9a01      	ldr	r2, [sp, #4]
 80076fa:	f845 c002 	str.w	ip, [r5, r2]
 80076fe:	9a03      	ldr	r2, [sp, #12]
 8007700:	3304      	adds	r3, #4
 8007702:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007706:	f1b9 0f00 	cmp.w	r9, #0
 800770a:	d021      	beq.n	8007750 <__multiply+0x140>
 800770c:	46ae      	mov	lr, r5
 800770e:	f04f 0a00 	mov.w	sl, #0
 8007712:	6829      	ldr	r1, [r5, #0]
 8007714:	f104 0c14 	add.w	ip, r4, #20
 8007718:	f8bc b000 	ldrh.w	fp, [ip]
 800771c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007720:	b289      	uxth	r1, r1
 8007722:	fb09 220b 	mla	r2, r9, fp, r2
 8007726:	4452      	add	r2, sl
 8007728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800772c:	f84e 1b04 	str.w	r1, [lr], #4
 8007730:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007734:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007738:	f8be 1000 	ldrh.w	r1, [lr]
 800773c:	4567      	cmp	r7, ip
 800773e:	fb09 110a 	mla	r1, r9, sl, r1
 8007742:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007746:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800774a:	d8e5      	bhi.n	8007718 <__multiply+0x108>
 800774c:	9a01      	ldr	r2, [sp, #4]
 800774e:	50a9      	str	r1, [r5, r2]
 8007750:	3504      	adds	r5, #4
 8007752:	e79a      	b.n	800768a <__multiply+0x7a>
 8007754:	3e01      	subs	r6, #1
 8007756:	e79c      	b.n	8007692 <__multiply+0x82>
 8007758:	0800874e 	.word	0x0800874e
 800775c:	0800875f 	.word	0x0800875f

08007760 <__pow5mult>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	4615      	mov	r5, r2
 8007766:	f012 0203 	ands.w	r2, r2, #3
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	d007      	beq.n	8007780 <__pow5mult+0x20>
 8007770:	4c25      	ldr	r4, [pc, #148]	; (8007808 <__pow5mult+0xa8>)
 8007772:	3a01      	subs	r2, #1
 8007774:	2300      	movs	r3, #0
 8007776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800777a:	f7ff fe9f 	bl	80074bc <__multadd>
 800777e:	4607      	mov	r7, r0
 8007780:	10ad      	asrs	r5, r5, #2
 8007782:	d03d      	beq.n	8007800 <__pow5mult+0xa0>
 8007784:	69f4      	ldr	r4, [r6, #28]
 8007786:	b97c      	cbnz	r4, 80077a8 <__pow5mult+0x48>
 8007788:	2010      	movs	r0, #16
 800778a:	f7ff fd81 	bl	8007290 <malloc>
 800778e:	4602      	mov	r2, r0
 8007790:	61f0      	str	r0, [r6, #28]
 8007792:	b928      	cbnz	r0, 80077a0 <__pow5mult+0x40>
 8007794:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007798:	4b1c      	ldr	r3, [pc, #112]	; (800780c <__pow5mult+0xac>)
 800779a:	481d      	ldr	r0, [pc, #116]	; (8007810 <__pow5mult+0xb0>)
 800779c:	f000 fbde 	bl	8007f5c <__assert_func>
 80077a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077a4:	6004      	str	r4, [r0, #0]
 80077a6:	60c4      	str	r4, [r0, #12]
 80077a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80077ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077b0:	b94c      	cbnz	r4, 80077c6 <__pow5mult+0x66>
 80077b2:	f240 2171 	movw	r1, #625	; 0x271
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff14 	bl	80075e4 <__i2b>
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077c4:	6003      	str	r3, [r0, #0]
 80077c6:	f04f 0900 	mov.w	r9, #0
 80077ca:	07eb      	lsls	r3, r5, #31
 80077cc:	d50a      	bpl.n	80077e4 <__pow5mult+0x84>
 80077ce:	4639      	mov	r1, r7
 80077d0:	4622      	mov	r2, r4
 80077d2:	4630      	mov	r0, r6
 80077d4:	f7ff ff1c 	bl	8007610 <__multiply>
 80077d8:	4680      	mov	r8, r0
 80077da:	4639      	mov	r1, r7
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff fe4b 	bl	8007478 <_Bfree>
 80077e2:	4647      	mov	r7, r8
 80077e4:	106d      	asrs	r5, r5, #1
 80077e6:	d00b      	beq.n	8007800 <__pow5mult+0xa0>
 80077e8:	6820      	ldr	r0, [r4, #0]
 80077ea:	b938      	cbnz	r0, 80077fc <__pow5mult+0x9c>
 80077ec:	4622      	mov	r2, r4
 80077ee:	4621      	mov	r1, r4
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ff0d 	bl	8007610 <__multiply>
 80077f6:	6020      	str	r0, [r4, #0]
 80077f8:	f8c0 9000 	str.w	r9, [r0]
 80077fc:	4604      	mov	r4, r0
 80077fe:	e7e4      	b.n	80077ca <__pow5mult+0x6a>
 8007800:	4638      	mov	r0, r7
 8007802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007806:	bf00      	nop
 8007808:	080088a8 	.word	0x080088a8
 800780c:	080086df 	.word	0x080086df
 8007810:	0800875f 	.word	0x0800875f

08007814 <__lshift>:
 8007814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	460c      	mov	r4, r1
 800781a:	4607      	mov	r7, r0
 800781c:	4691      	mov	r9, r2
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	6849      	ldr	r1, [r1, #4]
 8007822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800782c:	f108 0601 	add.w	r6, r8, #1
 8007830:	42b3      	cmp	r3, r6
 8007832:	db0b      	blt.n	800784c <__lshift+0x38>
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff fddf 	bl	80073f8 <_Balloc>
 800783a:	4605      	mov	r5, r0
 800783c:	b948      	cbnz	r0, 8007852 <__lshift+0x3e>
 800783e:	4602      	mov	r2, r0
 8007840:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <__lshift+0xd0>)
 8007846:	4828      	ldr	r0, [pc, #160]	; (80078e8 <__lshift+0xd4>)
 8007848:	f000 fb88 	bl	8007f5c <__assert_func>
 800784c:	3101      	adds	r1, #1
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	e7ee      	b.n	8007830 <__lshift+0x1c>
 8007852:	2300      	movs	r3, #0
 8007854:	f100 0114 	add.w	r1, r0, #20
 8007858:	f100 0210 	add.w	r2, r0, #16
 800785c:	4618      	mov	r0, r3
 800785e:	4553      	cmp	r3, sl
 8007860:	db33      	blt.n	80078ca <__lshift+0xb6>
 8007862:	6920      	ldr	r0, [r4, #16]
 8007864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007868:	f104 0314 	add.w	r3, r4, #20
 800786c:	f019 091f 	ands.w	r9, r9, #31
 8007870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007878:	d02b      	beq.n	80078d2 <__lshift+0xbe>
 800787a:	468a      	mov	sl, r1
 800787c:	2200      	movs	r2, #0
 800787e:	f1c9 0e20 	rsb	lr, r9, #32
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	fa00 f009 	lsl.w	r0, r0, r9
 8007888:	4310      	orrs	r0, r2
 800788a:	f84a 0b04 	str.w	r0, [sl], #4
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	459c      	cmp	ip, r3
 8007894:	fa22 f20e 	lsr.w	r2, r2, lr
 8007898:	d8f3      	bhi.n	8007882 <__lshift+0x6e>
 800789a:	ebac 0304 	sub.w	r3, ip, r4
 800789e:	3b15      	subs	r3, #21
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	3304      	adds	r3, #4
 80078a6:	f104 0015 	add.w	r0, r4, #21
 80078aa:	4584      	cmp	ip, r0
 80078ac:	bf38      	it	cc
 80078ae:	2304      	movcc	r3, #4
 80078b0:	50ca      	str	r2, [r1, r3]
 80078b2:	b10a      	cbz	r2, 80078b8 <__lshift+0xa4>
 80078b4:	f108 0602 	add.w	r6, r8, #2
 80078b8:	3e01      	subs	r6, #1
 80078ba:	4638      	mov	r0, r7
 80078bc:	4621      	mov	r1, r4
 80078be:	612e      	str	r6, [r5, #16]
 80078c0:	f7ff fdda 	bl	8007478 <_Bfree>
 80078c4:	4628      	mov	r0, r5
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80078ce:	3301      	adds	r3, #1
 80078d0:	e7c5      	b.n	800785e <__lshift+0x4a>
 80078d2:	3904      	subs	r1, #4
 80078d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d8:	459c      	cmp	ip, r3
 80078da:	f841 2f04 	str.w	r2, [r1, #4]!
 80078de:	d8f9      	bhi.n	80078d4 <__lshift+0xc0>
 80078e0:	e7ea      	b.n	80078b8 <__lshift+0xa4>
 80078e2:	bf00      	nop
 80078e4:	0800874e 	.word	0x0800874e
 80078e8:	0800875f 	.word	0x0800875f

080078ec <__mcmp>:
 80078ec:	4603      	mov	r3, r0
 80078ee:	690a      	ldr	r2, [r1, #16]
 80078f0:	6900      	ldr	r0, [r0, #16]
 80078f2:	b530      	push	{r4, r5, lr}
 80078f4:	1a80      	subs	r0, r0, r2
 80078f6:	d10d      	bne.n	8007914 <__mcmp+0x28>
 80078f8:	3314      	adds	r3, #20
 80078fa:	3114      	adds	r1, #20
 80078fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007900:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007904:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007908:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800790c:	4295      	cmp	r5, r2
 800790e:	d002      	beq.n	8007916 <__mcmp+0x2a>
 8007910:	d304      	bcc.n	800791c <__mcmp+0x30>
 8007912:	2001      	movs	r0, #1
 8007914:	bd30      	pop	{r4, r5, pc}
 8007916:	42a3      	cmp	r3, r4
 8007918:	d3f4      	bcc.n	8007904 <__mcmp+0x18>
 800791a:	e7fb      	b.n	8007914 <__mcmp+0x28>
 800791c:	f04f 30ff 	mov.w	r0, #4294967295
 8007920:	e7f8      	b.n	8007914 <__mcmp+0x28>
	...

08007924 <__mdiff>:
 8007924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	460d      	mov	r5, r1
 800792a:	4607      	mov	r7, r0
 800792c:	4611      	mov	r1, r2
 800792e:	4628      	mov	r0, r5
 8007930:	4614      	mov	r4, r2
 8007932:	f7ff ffdb 	bl	80078ec <__mcmp>
 8007936:	1e06      	subs	r6, r0, #0
 8007938:	d111      	bne.n	800795e <__mdiff+0x3a>
 800793a:	4631      	mov	r1, r6
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff fd5b 	bl	80073f8 <_Balloc>
 8007942:	4602      	mov	r2, r0
 8007944:	b928      	cbnz	r0, 8007952 <__mdiff+0x2e>
 8007946:	f240 2137 	movw	r1, #567	; 0x237
 800794a:	4b3a      	ldr	r3, [pc, #232]	; (8007a34 <__mdiff+0x110>)
 800794c:	483a      	ldr	r0, [pc, #232]	; (8007a38 <__mdiff+0x114>)
 800794e:	f000 fb05 	bl	8007f5c <__assert_func>
 8007952:	2301      	movs	r3, #1
 8007954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007958:	4610      	mov	r0, r2
 800795a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	bfa4      	itt	ge
 8007960:	4623      	movge	r3, r4
 8007962:	462c      	movge	r4, r5
 8007964:	4638      	mov	r0, r7
 8007966:	6861      	ldr	r1, [r4, #4]
 8007968:	bfa6      	itte	ge
 800796a:	461d      	movge	r5, r3
 800796c:	2600      	movge	r6, #0
 800796e:	2601      	movlt	r6, #1
 8007970:	f7ff fd42 	bl	80073f8 <_Balloc>
 8007974:	4602      	mov	r2, r0
 8007976:	b918      	cbnz	r0, 8007980 <__mdiff+0x5c>
 8007978:	f240 2145 	movw	r1, #581	; 0x245
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <__mdiff+0x110>)
 800797e:	e7e5      	b.n	800794c <__mdiff+0x28>
 8007980:	f102 0814 	add.w	r8, r2, #20
 8007984:	46c2      	mov	sl, r8
 8007986:	f04f 0c00 	mov.w	ip, #0
 800798a:	6927      	ldr	r7, [r4, #16]
 800798c:	60c6      	str	r6, [r0, #12]
 800798e:	692e      	ldr	r6, [r5, #16]
 8007990:	f104 0014 	add.w	r0, r4, #20
 8007994:	f105 0914 	add.w	r9, r5, #20
 8007998:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800799c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079a0:	3410      	adds	r4, #16
 80079a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80079a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80079aa:	fa1f f18b 	uxth.w	r1, fp
 80079ae:	4461      	add	r1, ip
 80079b0:	fa1f fc83 	uxth.w	ip, r3
 80079b4:	0c1b      	lsrs	r3, r3, #16
 80079b6:	eba1 010c 	sub.w	r1, r1, ip
 80079ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80079c2:	b289      	uxth	r1, r1
 80079c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80079c8:	454e      	cmp	r6, r9
 80079ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80079ce:	f84a 1b04 	str.w	r1, [sl], #4
 80079d2:	d8e6      	bhi.n	80079a2 <__mdiff+0x7e>
 80079d4:	1b73      	subs	r3, r6, r5
 80079d6:	3b15      	subs	r3, #21
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	3515      	adds	r5, #21
 80079de:	3304      	adds	r3, #4
 80079e0:	42ae      	cmp	r6, r5
 80079e2:	bf38      	it	cc
 80079e4:	2304      	movcc	r3, #4
 80079e6:	4418      	add	r0, r3
 80079e8:	4443      	add	r3, r8
 80079ea:	461e      	mov	r6, r3
 80079ec:	4605      	mov	r5, r0
 80079ee:	4575      	cmp	r5, lr
 80079f0:	d30e      	bcc.n	8007a10 <__mdiff+0xec>
 80079f2:	f10e 0103 	add.w	r1, lr, #3
 80079f6:	1a09      	subs	r1, r1, r0
 80079f8:	f021 0103 	bic.w	r1, r1, #3
 80079fc:	3803      	subs	r0, #3
 80079fe:	4586      	cmp	lr, r0
 8007a00:	bf38      	it	cc
 8007a02:	2100      	movcc	r1, #0
 8007a04:	440b      	add	r3, r1
 8007a06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a0a:	b189      	cbz	r1, 8007a30 <__mdiff+0x10c>
 8007a0c:	6117      	str	r7, [r2, #16]
 8007a0e:	e7a3      	b.n	8007958 <__mdiff+0x34>
 8007a10:	f855 8b04 	ldr.w	r8, [r5], #4
 8007a14:	fa1f f188 	uxth.w	r1, r8
 8007a18:	4461      	add	r1, ip
 8007a1a:	140c      	asrs	r4, r1, #16
 8007a1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a20:	b289      	uxth	r1, r1
 8007a22:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a26:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007a2a:	f846 1b04 	str.w	r1, [r6], #4
 8007a2e:	e7de      	b.n	80079ee <__mdiff+0xca>
 8007a30:	3f01      	subs	r7, #1
 8007a32:	e7e8      	b.n	8007a06 <__mdiff+0xe2>
 8007a34:	0800874e 	.word	0x0800874e
 8007a38:	0800875f 	.word	0x0800875f

08007a3c <__d2b>:
 8007a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4617      	mov	r7, r2
 8007a42:	461c      	mov	r4, r3
 8007a44:	9e08      	ldr	r6, [sp, #32]
 8007a46:	f7ff fcd7 	bl	80073f8 <_Balloc>
 8007a4a:	4605      	mov	r5, r0
 8007a4c:	b930      	cbnz	r0, 8007a5c <__d2b+0x20>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	f240 310f 	movw	r1, #783	; 0x30f
 8007a54:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <__d2b+0xa4>)
 8007a56:	4823      	ldr	r0, [pc, #140]	; (8007ae4 <__d2b+0xa8>)
 8007a58:	f000 fa80 	bl	8007f5c <__assert_func>
 8007a5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007a60:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007a64:	bb24      	cbnz	r4, 8007ab0 <__d2b+0x74>
 8007a66:	2f00      	cmp	r7, #0
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	d026      	beq.n	8007aba <__d2b+0x7e>
 8007a6c:	4668      	mov	r0, sp
 8007a6e:	9700      	str	r7, [sp, #0]
 8007a70:	f7ff fd8a 	bl	8007588 <__lo0bits>
 8007a74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a78:	b1e8      	cbz	r0, 8007ab6 <__d2b+0x7a>
 8007a7a:	f1c0 0320 	rsb	r3, r0, #32
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	430b      	orrs	r3, r1
 8007a84:	40c2      	lsrs	r2, r0
 8007a86:	616b      	str	r3, [r5, #20]
 8007a88:	9201      	str	r2, [sp, #4]
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf14      	ite	ne
 8007a90:	2102      	movne	r1, #2
 8007a92:	2101      	moveq	r1, #1
 8007a94:	61ab      	str	r3, [r5, #24]
 8007a96:	6129      	str	r1, [r5, #16]
 8007a98:	b1bc      	cbz	r4, 8007aca <__d2b+0x8e>
 8007a9a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a9e:	4404      	add	r4, r0
 8007aa0:	6034      	str	r4, [r6, #0]
 8007aa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	6018      	str	r0, [r3, #0]
 8007aaa:	4628      	mov	r0, r5
 8007aac:	b003      	add	sp, #12
 8007aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab4:	e7d7      	b.n	8007a66 <__d2b+0x2a>
 8007ab6:	6169      	str	r1, [r5, #20]
 8007ab8:	e7e7      	b.n	8007a8a <__d2b+0x4e>
 8007aba:	a801      	add	r0, sp, #4
 8007abc:	f7ff fd64 	bl	8007588 <__lo0bits>
 8007ac0:	9b01      	ldr	r3, [sp, #4]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	616b      	str	r3, [r5, #20]
 8007ac6:	3020      	adds	r0, #32
 8007ac8:	e7e5      	b.n	8007a96 <__d2b+0x5a>
 8007aca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ace:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007ad2:	6030      	str	r0, [r6, #0]
 8007ad4:	6918      	ldr	r0, [r3, #16]
 8007ad6:	f7ff fd37 	bl	8007548 <__hi0bits>
 8007ada:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ade:	e7e2      	b.n	8007aa6 <__d2b+0x6a>
 8007ae0:	0800874e 	.word	0x0800874e
 8007ae4:	0800875f 	.word	0x0800875f

08007ae8 <__ssputs_r>:
 8007ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	461f      	mov	r7, r3
 8007aee:	688e      	ldr	r6, [r1, #8]
 8007af0:	4682      	mov	sl, r0
 8007af2:	42be      	cmp	r6, r7
 8007af4:	460c      	mov	r4, r1
 8007af6:	4690      	mov	r8, r2
 8007af8:	680b      	ldr	r3, [r1, #0]
 8007afa:	d82c      	bhi.n	8007b56 <__ssputs_r+0x6e>
 8007afc:	898a      	ldrh	r2, [r1, #12]
 8007afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b02:	d026      	beq.n	8007b52 <__ssputs_r+0x6a>
 8007b04:	6965      	ldr	r5, [r4, #20]
 8007b06:	6909      	ldr	r1, [r1, #16]
 8007b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b0c:	eba3 0901 	sub.w	r9, r3, r1
 8007b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b14:	1c7b      	adds	r3, r7, #1
 8007b16:	444b      	add	r3, r9
 8007b18:	106d      	asrs	r5, r5, #1
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	bf38      	it	cc
 8007b1e:	461d      	movcc	r5, r3
 8007b20:	0553      	lsls	r3, r2, #21
 8007b22:	d527      	bpl.n	8007b74 <__ssputs_r+0x8c>
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7ff fbdb 	bl	80072e0 <_malloc_r>
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	b360      	cbz	r0, 8007b88 <__ssputs_r+0xa0>
 8007b2e:	464a      	mov	r2, r9
 8007b30:	6921      	ldr	r1, [r4, #16]
 8007b32:	f000 fa05 	bl	8007f40 <memcpy>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	6126      	str	r6, [r4, #16]
 8007b44:	444e      	add	r6, r9
 8007b46:	6026      	str	r6, [r4, #0]
 8007b48:	463e      	mov	r6, r7
 8007b4a:	6165      	str	r5, [r4, #20]
 8007b4c:	eba5 0509 	sub.w	r5, r5, r9
 8007b50:	60a5      	str	r5, [r4, #8]
 8007b52:	42be      	cmp	r6, r7
 8007b54:	d900      	bls.n	8007b58 <__ssputs_r+0x70>
 8007b56:	463e      	mov	r6, r7
 8007b58:	4632      	mov	r2, r6
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	f000 f9c5 	bl	8007eec <memmove>
 8007b62:	2000      	movs	r0, #0
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	1b9b      	subs	r3, r3, r6
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	4433      	add	r3, r6
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b74:	462a      	mov	r2, r5
 8007b76:	f000 fa35 	bl	8007fe4 <_realloc_r>
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d1e0      	bne.n	8007b42 <__ssputs_r+0x5a>
 8007b80:	4650      	mov	r0, sl
 8007b82:	6921      	ldr	r1, [r4, #16]
 8007b84:	f7ff fb3c 	bl	8007200 <_free_r>
 8007b88:	230c      	movs	r3, #12
 8007b8a:	f8ca 3000 	str.w	r3, [sl]
 8007b8e:	89a3      	ldrh	r3, [r4, #12]
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	e7e9      	b.n	8007b70 <__ssputs_r+0x88>

08007b9c <_svfiprintf_r>:
 8007b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	4698      	mov	r8, r3
 8007ba2:	898b      	ldrh	r3, [r1, #12]
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	460d      	mov	r5, r1
 8007baa:	4614      	mov	r4, r2
 8007bac:	b09d      	sub	sp, #116	; 0x74
 8007bae:	d50e      	bpl.n	8007bce <_svfiprintf_r+0x32>
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	b963      	cbnz	r3, 8007bce <_svfiprintf_r+0x32>
 8007bb4:	2140      	movs	r1, #64	; 0x40
 8007bb6:	f7ff fb93 	bl	80072e0 <_malloc_r>
 8007bba:	6028      	str	r0, [r5, #0]
 8007bbc:	6128      	str	r0, [r5, #16]
 8007bbe:	b920      	cbnz	r0, 8007bca <_svfiprintf_r+0x2e>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e0d0      	b.n	8007d6c <_svfiprintf_r+0x1d0>
 8007bca:	2340      	movs	r3, #64	; 0x40
 8007bcc:	616b      	str	r3, [r5, #20]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd2:	2320      	movs	r3, #32
 8007bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bd8:	2330      	movs	r3, #48	; 0x30
 8007bda:	f04f 0901 	mov.w	r9, #1
 8007bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007d84 <_svfiprintf_r+0x1e8>
 8007be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bea:	4623      	mov	r3, r4
 8007bec:	469a      	mov	sl, r3
 8007bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bf2:	b10a      	cbz	r2, 8007bf8 <_svfiprintf_r+0x5c>
 8007bf4:	2a25      	cmp	r2, #37	; 0x25
 8007bf6:	d1f9      	bne.n	8007bec <_svfiprintf_r+0x50>
 8007bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bfc:	d00b      	beq.n	8007c16 <_svfiprintf_r+0x7a>
 8007bfe:	465b      	mov	r3, fp
 8007c00:	4622      	mov	r2, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7ff ff6f 	bl	8007ae8 <__ssputs_r>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f000 80a9 	beq.w	8007d62 <_svfiprintf_r+0x1c6>
 8007c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c12:	445a      	add	r2, fp
 8007c14:	9209      	str	r2, [sp, #36]	; 0x24
 8007c16:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 80a1 	beq.w	8007d62 <_svfiprintf_r+0x1c6>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f04f 32ff 	mov.w	r2, #4294967295
 8007c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c2a:	f10a 0a01 	add.w	sl, sl, #1
 8007c2e:	9304      	str	r3, [sp, #16]
 8007c30:	9307      	str	r3, [sp, #28]
 8007c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c36:	931a      	str	r3, [sp, #104]	; 0x68
 8007c38:	4654      	mov	r4, sl
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c40:	4850      	ldr	r0, [pc, #320]	; (8007d84 <_svfiprintf_r+0x1e8>)
 8007c42:	f7fe fc60 	bl	8006506 <memchr>
 8007c46:	9a04      	ldr	r2, [sp, #16]
 8007c48:	b9d8      	cbnz	r0, 8007c82 <_svfiprintf_r+0xe6>
 8007c4a:	06d0      	lsls	r0, r2, #27
 8007c4c:	bf44      	itt	mi
 8007c4e:	2320      	movmi	r3, #32
 8007c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c54:	0711      	lsls	r1, r2, #28
 8007c56:	bf44      	itt	mi
 8007c58:	232b      	movmi	r3, #43	; 0x2b
 8007c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c62:	2b2a      	cmp	r3, #42	; 0x2a
 8007c64:	d015      	beq.n	8007c92 <_svfiprintf_r+0xf6>
 8007c66:	4654      	mov	r4, sl
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f04f 0c0a 	mov.w	ip, #10
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4621      	mov	r1, r4
 8007c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c76:	3b30      	subs	r3, #48	; 0x30
 8007c78:	2b09      	cmp	r3, #9
 8007c7a:	d94d      	bls.n	8007d18 <_svfiprintf_r+0x17c>
 8007c7c:	b1b0      	cbz	r0, 8007cac <_svfiprintf_r+0x110>
 8007c7e:	9207      	str	r2, [sp, #28]
 8007c80:	e014      	b.n	8007cac <_svfiprintf_r+0x110>
 8007c82:	eba0 0308 	sub.w	r3, r0, r8
 8007c86:	fa09 f303 	lsl.w	r3, r9, r3
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	46a2      	mov	sl, r4
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	e7d2      	b.n	8007c38 <_svfiprintf_r+0x9c>
 8007c92:	9b03      	ldr	r3, [sp, #12]
 8007c94:	1d19      	adds	r1, r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	9103      	str	r1, [sp, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfbb      	ittet	lt
 8007c9e:	425b      	neglt	r3, r3
 8007ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ca4:	9307      	strge	r3, [sp, #28]
 8007ca6:	9307      	strlt	r3, [sp, #28]
 8007ca8:	bfb8      	it	lt
 8007caa:	9204      	strlt	r2, [sp, #16]
 8007cac:	7823      	ldrb	r3, [r4, #0]
 8007cae:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb0:	d10c      	bne.n	8007ccc <_svfiprintf_r+0x130>
 8007cb2:	7863      	ldrb	r3, [r4, #1]
 8007cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cb6:	d134      	bne.n	8007d22 <_svfiprintf_r+0x186>
 8007cb8:	9b03      	ldr	r3, [sp, #12]
 8007cba:	3402      	adds	r4, #2
 8007cbc:	1d1a      	adds	r2, r3, #4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	9203      	str	r2, [sp, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfb8      	it	lt
 8007cc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cca:	9305      	str	r3, [sp, #20]
 8007ccc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007d88 <_svfiprintf_r+0x1ec>
 8007cd0:	2203      	movs	r2, #3
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	7821      	ldrb	r1, [r4, #0]
 8007cd6:	f7fe fc16 	bl	8006506 <memchr>
 8007cda:	b138      	cbz	r0, 8007cec <_svfiprintf_r+0x150>
 8007cdc:	2240      	movs	r2, #64	; 0x40
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	eba0 000a 	sub.w	r0, r0, sl
 8007ce4:	4082      	lsls	r2, r0
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	3401      	adds	r4, #1
 8007cea:	9304      	str	r3, [sp, #16]
 8007cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf0:	2206      	movs	r2, #6
 8007cf2:	4826      	ldr	r0, [pc, #152]	; (8007d8c <_svfiprintf_r+0x1f0>)
 8007cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cf8:	f7fe fc05 	bl	8006506 <memchr>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d038      	beq.n	8007d72 <_svfiprintf_r+0x1d6>
 8007d00:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <_svfiprintf_r+0x1f4>)
 8007d02:	bb1b      	cbnz	r3, 8007d4c <_svfiprintf_r+0x1b0>
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	3307      	adds	r3, #7
 8007d08:	f023 0307 	bic.w	r3, r3, #7
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	9303      	str	r3, [sp, #12]
 8007d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d12:	4433      	add	r3, r6
 8007d14:	9309      	str	r3, [sp, #36]	; 0x24
 8007d16:	e768      	b.n	8007bea <_svfiprintf_r+0x4e>
 8007d18:	460c      	mov	r4, r1
 8007d1a:	2001      	movs	r0, #1
 8007d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d20:	e7a6      	b.n	8007c70 <_svfiprintf_r+0xd4>
 8007d22:	2300      	movs	r3, #0
 8007d24:	f04f 0c0a 	mov.w	ip, #10
 8007d28:	4619      	mov	r1, r3
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	9305      	str	r3, [sp, #20]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d34:	3a30      	subs	r2, #48	; 0x30
 8007d36:	2a09      	cmp	r2, #9
 8007d38:	d903      	bls.n	8007d42 <_svfiprintf_r+0x1a6>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0c6      	beq.n	8007ccc <_svfiprintf_r+0x130>
 8007d3e:	9105      	str	r1, [sp, #20]
 8007d40:	e7c4      	b.n	8007ccc <_svfiprintf_r+0x130>
 8007d42:	4604      	mov	r4, r0
 8007d44:	2301      	movs	r3, #1
 8007d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4a:	e7f0      	b.n	8007d2e <_svfiprintf_r+0x192>
 8007d4c:	ab03      	add	r3, sp, #12
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	462a      	mov	r2, r5
 8007d52:	4638      	mov	r0, r7
 8007d54:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <_svfiprintf_r+0x1f8>)
 8007d56:	a904      	add	r1, sp, #16
 8007d58:	f7fd fe6e 	bl	8005a38 <_printf_float>
 8007d5c:	1c42      	adds	r2, r0, #1
 8007d5e:	4606      	mov	r6, r0
 8007d60:	d1d6      	bne.n	8007d10 <_svfiprintf_r+0x174>
 8007d62:	89ab      	ldrh	r3, [r5, #12]
 8007d64:	065b      	lsls	r3, r3, #25
 8007d66:	f53f af2d 	bmi.w	8007bc4 <_svfiprintf_r+0x28>
 8007d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d6c:	b01d      	add	sp, #116	; 0x74
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	462a      	mov	r2, r5
 8007d78:	4638      	mov	r0, r7
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <_svfiprintf_r+0x1f8>)
 8007d7c:	a904      	add	r1, sp, #16
 8007d7e:	f7fe f8fb 	bl	8005f78 <_printf_i>
 8007d82:	e7eb      	b.n	8007d5c <_svfiprintf_r+0x1c0>
 8007d84:	080088b4 	.word	0x080088b4
 8007d88:	080088ba 	.word	0x080088ba
 8007d8c:	080088be 	.word	0x080088be
 8007d90:	08005a39 	.word	0x08005a39
 8007d94:	08007ae9 	.word	0x08007ae9

08007d98 <__sflush_r>:
 8007d98:	898a      	ldrh	r2, [r1, #12]
 8007d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	0710      	lsls	r0, r2, #28
 8007da0:	460c      	mov	r4, r1
 8007da2:	d457      	bmi.n	8007e54 <__sflush_r+0xbc>
 8007da4:	684b      	ldr	r3, [r1, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	dc04      	bgt.n	8007db4 <__sflush_r+0x1c>
 8007daa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dc01      	bgt.n	8007db4 <__sflush_r+0x1c>
 8007db0:	2000      	movs	r0, #0
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007db6:	2e00      	cmp	r6, #0
 8007db8:	d0fa      	beq.n	8007db0 <__sflush_r+0x18>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dc0:	682f      	ldr	r7, [r5, #0]
 8007dc2:	6a21      	ldr	r1, [r4, #32]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	d032      	beq.n	8007e2e <__sflush_r+0x96>
 8007dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	075a      	lsls	r2, r3, #29
 8007dce:	d505      	bpl.n	8007ddc <__sflush_r+0x44>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	1ac0      	subs	r0, r0, r3
 8007dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd6:	b10b      	cbz	r3, 8007ddc <__sflush_r+0x44>
 8007dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dda:	1ac0      	subs	r0, r0, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4602      	mov	r2, r0
 8007de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007de2:	4628      	mov	r0, r5
 8007de4:	6a21      	ldr	r1, [r4, #32]
 8007de6:	47b0      	blx	r6
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	d106      	bne.n	8007dfc <__sflush_r+0x64>
 8007dee:	6829      	ldr	r1, [r5, #0]
 8007df0:	291d      	cmp	r1, #29
 8007df2:	d82b      	bhi.n	8007e4c <__sflush_r+0xb4>
 8007df4:	4a28      	ldr	r2, [pc, #160]	; (8007e98 <__sflush_r+0x100>)
 8007df6:	410a      	asrs	r2, r1
 8007df8:	07d6      	lsls	r6, r2, #31
 8007dfa:	d427      	bmi.n	8007e4c <__sflush_r+0xb4>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	6062      	str	r2, [r4, #4]
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	04d9      	lsls	r1, r3, #19
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	d504      	bpl.n	8007e12 <__sflush_r+0x7a>
 8007e08:	1c42      	adds	r2, r0, #1
 8007e0a:	d101      	bne.n	8007e10 <__sflush_r+0x78>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b903      	cbnz	r3, 8007e12 <__sflush_r+0x7a>
 8007e10:	6560      	str	r0, [r4, #84]	; 0x54
 8007e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e14:	602f      	str	r7, [r5, #0]
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d0ca      	beq.n	8007db0 <__sflush_r+0x18>
 8007e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d002      	beq.n	8007e28 <__sflush_r+0x90>
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7ff f9ec 	bl	8007200 <_free_r>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e2c:	e7c1      	b.n	8007db2 <__sflush_r+0x1a>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b0      	blx	r6
 8007e34:	1c41      	adds	r1, r0, #1
 8007e36:	d1c8      	bne.n	8007dca <__sflush_r+0x32>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c5      	beq.n	8007dca <__sflush_r+0x32>
 8007e3e:	2b1d      	cmp	r3, #29
 8007e40:	d001      	beq.n	8007e46 <__sflush_r+0xae>
 8007e42:	2b16      	cmp	r3, #22
 8007e44:	d101      	bne.n	8007e4a <__sflush_r+0xb2>
 8007e46:	602f      	str	r7, [r5, #0]
 8007e48:	e7b2      	b.n	8007db0 <__sflush_r+0x18>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	e7ae      	b.n	8007db2 <__sflush_r+0x1a>
 8007e54:	690f      	ldr	r7, [r1, #16]
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	d0aa      	beq.n	8007db0 <__sflush_r+0x18>
 8007e5a:	0793      	lsls	r3, r2, #30
 8007e5c:	bf18      	it	ne
 8007e5e:	2300      	movne	r3, #0
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	bf08      	it	eq
 8007e64:	694b      	ldreq	r3, [r1, #20]
 8007e66:	1bf6      	subs	r6, r6, r7
 8007e68:	600f      	str	r7, [r1, #0]
 8007e6a:	608b      	str	r3, [r1, #8]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	dd9f      	ble.n	8007db0 <__sflush_r+0x18>
 8007e70:	4633      	mov	r3, r6
 8007e72:	463a      	mov	r2, r7
 8007e74:	4628      	mov	r0, r5
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e7c:	47e0      	blx	ip
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	dc06      	bgt.n	8007e90 <__sflush_r+0xf8>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	e790      	b.n	8007db2 <__sflush_r+0x1a>
 8007e90:	4407      	add	r7, r0
 8007e92:	1a36      	subs	r6, r6, r0
 8007e94:	e7ea      	b.n	8007e6c <__sflush_r+0xd4>
 8007e96:	bf00      	nop
 8007e98:	dfbffffe 	.word	0xdfbffffe

08007e9c <_fflush_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	690b      	ldr	r3, [r1, #16]
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	b913      	cbnz	r3, 8007eac <_fflush_r+0x10>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	b118      	cbz	r0, 8007eb6 <_fflush_r+0x1a>
 8007eae:	6a03      	ldr	r3, [r0, #32]
 8007eb0:	b90b      	cbnz	r3, 8007eb6 <_fflush_r+0x1a>
 8007eb2:	f7fe fa0f 	bl	80062d4 <__sinit>
 8007eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f3      	beq.n	8007ea6 <_fflush_r+0xa>
 8007ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ec0:	07d0      	lsls	r0, r2, #31
 8007ec2:	d404      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec4:	0599      	lsls	r1, r3, #22
 8007ec6:	d402      	bmi.n	8007ece <_fflush_r+0x32>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eca:	f7fe fb1a 	bl	8006502 <__retarget_lock_acquire_recursive>
 8007ece:	4628      	mov	r0, r5
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	f7ff ff61 	bl	8007d98 <__sflush_r>
 8007ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ed8:	4605      	mov	r5, r0
 8007eda:	07da      	lsls	r2, r3, #31
 8007edc:	d4e4      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	059b      	lsls	r3, r3, #22
 8007ee2:	d4e1      	bmi.n	8007ea8 <_fflush_r+0xc>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee6:	f7fe fb0d 	bl	8006504 <__retarget_lock_release_recursive>
 8007eea:	e7dd      	b.n	8007ea8 <_fflush_r+0xc>

08007eec <memmove>:
 8007eec:	4288      	cmp	r0, r1
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	eb01 0402 	add.w	r4, r1, r2
 8007ef4:	d902      	bls.n	8007efc <memmove+0x10>
 8007ef6:	4284      	cmp	r4, r0
 8007ef8:	4623      	mov	r3, r4
 8007efa:	d807      	bhi.n	8007f0c <memmove+0x20>
 8007efc:	1e43      	subs	r3, r0, #1
 8007efe:	42a1      	cmp	r1, r4
 8007f00:	d008      	beq.n	8007f14 <memmove+0x28>
 8007f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f0a:	e7f8      	b.n	8007efe <memmove+0x12>
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	4402      	add	r2, r0
 8007f10:	428a      	cmp	r2, r1
 8007f12:	d100      	bne.n	8007f16 <memmove+0x2a>
 8007f14:	bd10      	pop	{r4, pc}
 8007f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f1e:	e7f7      	b.n	8007f10 <memmove+0x24>

08007f20 <_sbrk_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	2300      	movs	r3, #0
 8007f24:	4d05      	ldr	r5, [pc, #20]	; (8007f3c <_sbrk_r+0x1c>)
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7f9 f94a 	bl	80011c4 <_sbrk>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_sbrk_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_sbrk_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000468 	.word	0x20000468

08007f40 <memcpy>:
 8007f40:	440a      	add	r2, r1
 8007f42:	4291      	cmp	r1, r2
 8007f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f48:	d100      	bne.n	8007f4c <memcpy+0xc>
 8007f4a:	4770      	bx	lr
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f52:	4291      	cmp	r1, r2
 8007f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f58:	d1f9      	bne.n	8007f4e <memcpy+0xe>
 8007f5a:	bd10      	pop	{r4, pc}

08007f5c <__assert_func>:
 8007f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f5e:	4614      	mov	r4, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <__assert_func+0x2c>)
 8007f64:	4605      	mov	r5, r0
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68d8      	ldr	r0, [r3, #12]
 8007f6a:	b14c      	cbz	r4, 8007f80 <__assert_func+0x24>
 8007f6c:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <__assert_func+0x30>)
 8007f6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f72:	9100      	str	r1, [sp, #0]
 8007f74:	462b      	mov	r3, r5
 8007f76:	4906      	ldr	r1, [pc, #24]	; (8007f90 <__assert_func+0x34>)
 8007f78:	f000 f870 	bl	800805c <fiprintf>
 8007f7c:	f000 f880 	bl	8008080 <abort>
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <__assert_func+0x38>)
 8007f82:	461c      	mov	r4, r3
 8007f84:	e7f3      	b.n	8007f6e <__assert_func+0x12>
 8007f86:	bf00      	nop
 8007f88:	20000064 	.word	0x20000064
 8007f8c:	080088cf 	.word	0x080088cf
 8007f90:	080088dc 	.word	0x080088dc
 8007f94:	0800890a 	.word	0x0800890a

08007f98 <_calloc_r>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	fba1 5402 	umull	r5, r4, r1, r2
 8007f9e:	b934      	cbnz	r4, 8007fae <_calloc_r+0x16>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7ff f99d 	bl	80072e0 <_malloc_r>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	b928      	cbnz	r0, 8007fb6 <_calloc_r+0x1e>
 8007faa:	4630      	mov	r0, r6
 8007fac:	bd70      	pop	{r4, r5, r6, pc}
 8007fae:	220c      	movs	r2, #12
 8007fb0:	2600      	movs	r6, #0
 8007fb2:	6002      	str	r2, [r0, #0]
 8007fb4:	e7f9      	b.n	8007faa <_calloc_r+0x12>
 8007fb6:	462a      	mov	r2, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7fe fa24 	bl	8006406 <memset>
 8007fbe:	e7f4      	b.n	8007faa <_calloc_r+0x12>

08007fc0 <__ascii_mbtowc>:
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	b901      	cbnz	r1, 8007fc6 <__ascii_mbtowc+0x6>
 8007fc4:	a901      	add	r1, sp, #4
 8007fc6:	b142      	cbz	r2, 8007fda <__ascii_mbtowc+0x1a>
 8007fc8:	b14b      	cbz	r3, 8007fde <__ascii_mbtowc+0x1e>
 8007fca:	7813      	ldrb	r3, [r2, #0]
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	1e10      	subs	r0, r2, #0
 8007fd2:	bf18      	it	ne
 8007fd4:	2001      	movne	r0, #1
 8007fd6:	b002      	add	sp, #8
 8007fd8:	4770      	bx	lr
 8007fda:	4610      	mov	r0, r2
 8007fdc:	e7fb      	b.n	8007fd6 <__ascii_mbtowc+0x16>
 8007fde:	f06f 0001 	mvn.w	r0, #1
 8007fe2:	e7f8      	b.n	8007fd6 <__ascii_mbtowc+0x16>

08007fe4 <_realloc_r>:
 8007fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe8:	4680      	mov	r8, r0
 8007fea:	4614      	mov	r4, r2
 8007fec:	460e      	mov	r6, r1
 8007fee:	b921      	cbnz	r1, 8007ffa <_realloc_r+0x16>
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff6:	f7ff b973 	b.w	80072e0 <_malloc_r>
 8007ffa:	b92a      	cbnz	r2, 8008008 <_realloc_r+0x24>
 8007ffc:	f7ff f900 	bl	8007200 <_free_r>
 8008000:	4625      	mov	r5, r4
 8008002:	4628      	mov	r0, r5
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	f000 f841 	bl	800808e <_malloc_usable_size_r>
 800800c:	4284      	cmp	r4, r0
 800800e:	4607      	mov	r7, r0
 8008010:	d802      	bhi.n	8008018 <_realloc_r+0x34>
 8008012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008016:	d812      	bhi.n	800803e <_realloc_r+0x5a>
 8008018:	4621      	mov	r1, r4
 800801a:	4640      	mov	r0, r8
 800801c:	f7ff f960 	bl	80072e0 <_malloc_r>
 8008020:	4605      	mov	r5, r0
 8008022:	2800      	cmp	r0, #0
 8008024:	d0ed      	beq.n	8008002 <_realloc_r+0x1e>
 8008026:	42bc      	cmp	r4, r7
 8008028:	4622      	mov	r2, r4
 800802a:	4631      	mov	r1, r6
 800802c:	bf28      	it	cs
 800802e:	463a      	movcs	r2, r7
 8008030:	f7ff ff86 	bl	8007f40 <memcpy>
 8008034:	4631      	mov	r1, r6
 8008036:	4640      	mov	r0, r8
 8008038:	f7ff f8e2 	bl	8007200 <_free_r>
 800803c:	e7e1      	b.n	8008002 <_realloc_r+0x1e>
 800803e:	4635      	mov	r5, r6
 8008040:	e7df      	b.n	8008002 <_realloc_r+0x1e>

08008042 <__ascii_wctomb>:
 8008042:	4603      	mov	r3, r0
 8008044:	4608      	mov	r0, r1
 8008046:	b141      	cbz	r1, 800805a <__ascii_wctomb+0x18>
 8008048:	2aff      	cmp	r2, #255	; 0xff
 800804a:	d904      	bls.n	8008056 <__ascii_wctomb+0x14>
 800804c:	228a      	movs	r2, #138	; 0x8a
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	4770      	bx	lr
 8008056:	2001      	movs	r0, #1
 8008058:	700a      	strb	r2, [r1, #0]
 800805a:	4770      	bx	lr

0800805c <fiprintf>:
 800805c:	b40e      	push	{r1, r2, r3}
 800805e:	b503      	push	{r0, r1, lr}
 8008060:	4601      	mov	r1, r0
 8008062:	ab03      	add	r3, sp, #12
 8008064:	4805      	ldr	r0, [pc, #20]	; (800807c <fiprintf+0x20>)
 8008066:	f853 2b04 	ldr.w	r2, [r3], #4
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	f000 f83d 	bl	80080ec <_vfiprintf_r>
 8008072:	b002      	add	sp, #8
 8008074:	f85d eb04 	ldr.w	lr, [sp], #4
 8008078:	b003      	add	sp, #12
 800807a:	4770      	bx	lr
 800807c:	20000064 	.word	0x20000064

08008080 <abort>:
 8008080:	2006      	movs	r0, #6
 8008082:	b508      	push	{r3, lr}
 8008084:	f000 fa0a 	bl	800849c <raise>
 8008088:	2001      	movs	r0, #1
 800808a:	f7f9 f828 	bl	80010de <_exit>

0800808e <_malloc_usable_size_r>:
 800808e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008092:	1f18      	subs	r0, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfbc      	itt	lt
 8008098:	580b      	ldrlt	r3, [r1, r0]
 800809a:	18c0      	addlt	r0, r0, r3
 800809c:	4770      	bx	lr

0800809e <__sfputc_r>:
 800809e:	6893      	ldr	r3, [r2, #8]
 80080a0:	b410      	push	{r4}
 80080a2:	3b01      	subs	r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	6093      	str	r3, [r2, #8]
 80080a8:	da07      	bge.n	80080ba <__sfputc_r+0x1c>
 80080aa:	6994      	ldr	r4, [r2, #24]
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	db01      	blt.n	80080b4 <__sfputc_r+0x16>
 80080b0:	290a      	cmp	r1, #10
 80080b2:	d102      	bne.n	80080ba <__sfputc_r+0x1c>
 80080b4:	bc10      	pop	{r4}
 80080b6:	f000 b933 	b.w	8008320 <__swbuf_r>
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	1c58      	adds	r0, r3, #1
 80080be:	6010      	str	r0, [r2, #0]
 80080c0:	7019      	strb	r1, [r3, #0]
 80080c2:	4608      	mov	r0, r1
 80080c4:	bc10      	pop	{r4}
 80080c6:	4770      	bx	lr

080080c8 <__sfputs_r>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	4606      	mov	r6, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	4614      	mov	r4, r2
 80080d0:	18d5      	adds	r5, r2, r3
 80080d2:	42ac      	cmp	r4, r5
 80080d4:	d101      	bne.n	80080da <__sfputs_r+0x12>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e007      	b.n	80080ea <__sfputs_r+0x22>
 80080da:	463a      	mov	r2, r7
 80080dc:	4630      	mov	r0, r6
 80080de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e2:	f7ff ffdc 	bl	800809e <__sfputc_r>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	d1f3      	bne.n	80080d2 <__sfputs_r+0xa>
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080ec <_vfiprintf_r>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	460d      	mov	r5, r1
 80080f2:	4614      	mov	r4, r2
 80080f4:	4698      	mov	r8, r3
 80080f6:	4606      	mov	r6, r0
 80080f8:	b09d      	sub	sp, #116	; 0x74
 80080fa:	b118      	cbz	r0, 8008104 <_vfiprintf_r+0x18>
 80080fc:	6a03      	ldr	r3, [r0, #32]
 80080fe:	b90b      	cbnz	r3, 8008104 <_vfiprintf_r+0x18>
 8008100:	f7fe f8e8 	bl	80062d4 <__sinit>
 8008104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x2a>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x2a>
 8008110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008112:	f7fe f9f6 	bl	8006502 <__retarget_lock_acquire_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	071b      	lsls	r3, r3, #28
 800811a:	d501      	bpl.n	8008120 <_vfiprintf_r+0x34>
 800811c:	692b      	ldr	r3, [r5, #16]
 800811e:	b99b      	cbnz	r3, 8008148 <_vfiprintf_r+0x5c>
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f000 f93a 	bl	800839c <__swsetup_r>
 8008128:	b170      	cbz	r0, 8008148 <_vfiprintf_r+0x5c>
 800812a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800812c:	07dc      	lsls	r4, r3, #31
 800812e:	d504      	bpl.n	800813a <_vfiprintf_r+0x4e>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	b01d      	add	sp, #116	; 0x74
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	0598      	lsls	r0, r3, #22
 800813e:	d4f7      	bmi.n	8008130 <_vfiprintf_r+0x44>
 8008140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008142:	f7fe f9df 	bl	8006504 <__retarget_lock_release_recursive>
 8008146:	e7f3      	b.n	8008130 <_vfiprintf_r+0x44>
 8008148:	2300      	movs	r3, #0
 800814a:	9309      	str	r3, [sp, #36]	; 0x24
 800814c:	2320      	movs	r3, #32
 800814e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008152:	2330      	movs	r3, #48	; 0x30
 8008154:	f04f 0901 	mov.w	r9, #1
 8008158:	f8cd 800c 	str.w	r8, [sp, #12]
 800815c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800830c <_vfiprintf_r+0x220>
 8008160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008164:	4623      	mov	r3, r4
 8008166:	469a      	mov	sl, r3
 8008168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816c:	b10a      	cbz	r2, 8008172 <_vfiprintf_r+0x86>
 800816e:	2a25      	cmp	r2, #37	; 0x25
 8008170:	d1f9      	bne.n	8008166 <_vfiprintf_r+0x7a>
 8008172:	ebba 0b04 	subs.w	fp, sl, r4
 8008176:	d00b      	beq.n	8008190 <_vfiprintf_r+0xa4>
 8008178:	465b      	mov	r3, fp
 800817a:	4622      	mov	r2, r4
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ffa2 	bl	80080c8 <__sfputs_r>
 8008184:	3001      	adds	r0, #1
 8008186:	f000 80a9 	beq.w	80082dc <_vfiprintf_r+0x1f0>
 800818a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800818c:	445a      	add	r2, fp
 800818e:	9209      	str	r2, [sp, #36]	; 0x24
 8008190:	f89a 3000 	ldrb.w	r3, [sl]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80a1 	beq.w	80082dc <_vfiprintf_r+0x1f0>
 800819a:	2300      	movs	r3, #0
 800819c:	f04f 32ff 	mov.w	r2, #4294967295
 80081a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a4:	f10a 0a01 	add.w	sl, sl, #1
 80081a8:	9304      	str	r3, [sp, #16]
 80081aa:	9307      	str	r3, [sp, #28]
 80081ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b0:	931a      	str	r3, [sp, #104]	; 0x68
 80081b2:	4654      	mov	r4, sl
 80081b4:	2205      	movs	r2, #5
 80081b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ba:	4854      	ldr	r0, [pc, #336]	; (800830c <_vfiprintf_r+0x220>)
 80081bc:	f7fe f9a3 	bl	8006506 <memchr>
 80081c0:	9a04      	ldr	r2, [sp, #16]
 80081c2:	b9d8      	cbnz	r0, 80081fc <_vfiprintf_r+0x110>
 80081c4:	06d1      	lsls	r1, r2, #27
 80081c6:	bf44      	itt	mi
 80081c8:	2320      	movmi	r3, #32
 80081ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ce:	0713      	lsls	r3, r2, #28
 80081d0:	bf44      	itt	mi
 80081d2:	232b      	movmi	r3, #43	; 0x2b
 80081d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d8:	f89a 3000 	ldrb.w	r3, [sl]
 80081dc:	2b2a      	cmp	r3, #42	; 0x2a
 80081de:	d015      	beq.n	800820c <_vfiprintf_r+0x120>
 80081e0:	4654      	mov	r4, sl
 80081e2:	2000      	movs	r0, #0
 80081e4:	f04f 0c0a 	mov.w	ip, #10
 80081e8:	9a07      	ldr	r2, [sp, #28]
 80081ea:	4621      	mov	r1, r4
 80081ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f0:	3b30      	subs	r3, #48	; 0x30
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d94d      	bls.n	8008292 <_vfiprintf_r+0x1a6>
 80081f6:	b1b0      	cbz	r0, 8008226 <_vfiprintf_r+0x13a>
 80081f8:	9207      	str	r2, [sp, #28]
 80081fa:	e014      	b.n	8008226 <_vfiprintf_r+0x13a>
 80081fc:	eba0 0308 	sub.w	r3, r0, r8
 8008200:	fa09 f303 	lsl.w	r3, r9, r3
 8008204:	4313      	orrs	r3, r2
 8008206:	46a2      	mov	sl, r4
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	e7d2      	b.n	80081b2 <_vfiprintf_r+0xc6>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	1d19      	adds	r1, r3, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	9103      	str	r1, [sp, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	bfbb      	ittet	lt
 8008218:	425b      	neglt	r3, r3
 800821a:	f042 0202 	orrlt.w	r2, r2, #2
 800821e:	9307      	strge	r3, [sp, #28]
 8008220:	9307      	strlt	r3, [sp, #28]
 8008222:	bfb8      	it	lt
 8008224:	9204      	strlt	r2, [sp, #16]
 8008226:	7823      	ldrb	r3, [r4, #0]
 8008228:	2b2e      	cmp	r3, #46	; 0x2e
 800822a:	d10c      	bne.n	8008246 <_vfiprintf_r+0x15a>
 800822c:	7863      	ldrb	r3, [r4, #1]
 800822e:	2b2a      	cmp	r3, #42	; 0x2a
 8008230:	d134      	bne.n	800829c <_vfiprintf_r+0x1b0>
 8008232:	9b03      	ldr	r3, [sp, #12]
 8008234:	3402      	adds	r4, #2
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	9203      	str	r2, [sp, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfb8      	it	lt
 8008240:	f04f 33ff 	movlt.w	r3, #4294967295
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008310 <_vfiprintf_r+0x224>
 800824a:	2203      	movs	r2, #3
 800824c:	4650      	mov	r0, sl
 800824e:	7821      	ldrb	r1, [r4, #0]
 8008250:	f7fe f959 	bl	8006506 <memchr>
 8008254:	b138      	cbz	r0, 8008266 <_vfiprintf_r+0x17a>
 8008256:	2240      	movs	r2, #64	; 0x40
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	eba0 000a 	sub.w	r0, r0, sl
 800825e:	4082      	lsls	r2, r0
 8008260:	4313      	orrs	r3, r2
 8008262:	3401      	adds	r4, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	2206      	movs	r2, #6
 800826c:	4829      	ldr	r0, [pc, #164]	; (8008314 <_vfiprintf_r+0x228>)
 800826e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008272:	f7fe f948 	bl	8006506 <memchr>
 8008276:	2800      	cmp	r0, #0
 8008278:	d03f      	beq.n	80082fa <_vfiprintf_r+0x20e>
 800827a:	4b27      	ldr	r3, [pc, #156]	; (8008318 <_vfiprintf_r+0x22c>)
 800827c:	bb1b      	cbnz	r3, 80082c6 <_vfiprintf_r+0x1da>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	3307      	adds	r3, #7
 8008282:	f023 0307 	bic.w	r3, r3, #7
 8008286:	3308      	adds	r3, #8
 8008288:	9303      	str	r3, [sp, #12]
 800828a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828c:	443b      	add	r3, r7
 800828e:	9309      	str	r3, [sp, #36]	; 0x24
 8008290:	e768      	b.n	8008164 <_vfiprintf_r+0x78>
 8008292:	460c      	mov	r4, r1
 8008294:	2001      	movs	r0, #1
 8008296:	fb0c 3202 	mla	r2, ip, r2, r3
 800829a:	e7a6      	b.n	80081ea <_vfiprintf_r+0xfe>
 800829c:	2300      	movs	r3, #0
 800829e:	f04f 0c0a 	mov.w	ip, #10
 80082a2:	4619      	mov	r1, r3
 80082a4:	3401      	adds	r4, #1
 80082a6:	9305      	str	r3, [sp, #20]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ae:	3a30      	subs	r2, #48	; 0x30
 80082b0:	2a09      	cmp	r2, #9
 80082b2:	d903      	bls.n	80082bc <_vfiprintf_r+0x1d0>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0c6      	beq.n	8008246 <_vfiprintf_r+0x15a>
 80082b8:	9105      	str	r1, [sp, #20]
 80082ba:	e7c4      	b.n	8008246 <_vfiprintf_r+0x15a>
 80082bc:	4604      	mov	r4, r0
 80082be:	2301      	movs	r3, #1
 80082c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c4:	e7f0      	b.n	80082a8 <_vfiprintf_r+0x1bc>
 80082c6:	ab03      	add	r3, sp, #12
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	462a      	mov	r2, r5
 80082cc:	4630      	mov	r0, r6
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <_vfiprintf_r+0x230>)
 80082d0:	a904      	add	r1, sp, #16
 80082d2:	f7fd fbb1 	bl	8005a38 <_printf_float>
 80082d6:	4607      	mov	r7, r0
 80082d8:	1c78      	adds	r0, r7, #1
 80082da:	d1d6      	bne.n	800828a <_vfiprintf_r+0x19e>
 80082dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_vfiprintf_r+0x202>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_vfiprintf_r+0x202>
 80082e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ea:	f7fe f90b 	bl	8006504 <__retarget_lock_release_recursive>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	065b      	lsls	r3, r3, #25
 80082f2:	f53f af1d 	bmi.w	8008130 <_vfiprintf_r+0x44>
 80082f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f8:	e71c      	b.n	8008134 <_vfiprintf_r+0x48>
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4630      	mov	r0, r6
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <_vfiprintf_r+0x230>)
 8008304:	a904      	add	r1, sp, #16
 8008306:	f7fd fe37 	bl	8005f78 <_printf_i>
 800830a:	e7e4      	b.n	80082d6 <_vfiprintf_r+0x1ea>
 800830c:	080088b4 	.word	0x080088b4
 8008310:	080088ba 	.word	0x080088ba
 8008314:	080088be 	.word	0x080088be
 8008318:	08005a39 	.word	0x08005a39
 800831c:	080080c9 	.word	0x080080c9

08008320 <__swbuf_r>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	460e      	mov	r6, r1
 8008324:	4614      	mov	r4, r2
 8008326:	4605      	mov	r5, r0
 8008328:	b118      	cbz	r0, 8008332 <__swbuf_r+0x12>
 800832a:	6a03      	ldr	r3, [r0, #32]
 800832c:	b90b      	cbnz	r3, 8008332 <__swbuf_r+0x12>
 800832e:	f7fd ffd1 	bl	80062d4 <__sinit>
 8008332:	69a3      	ldr	r3, [r4, #24]
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	071a      	lsls	r2, r3, #28
 800833a:	d525      	bpl.n	8008388 <__swbuf_r+0x68>
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	b31b      	cbz	r3, 8008388 <__swbuf_r+0x68>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	6922      	ldr	r2, [r4, #16]
 8008344:	b2f6      	uxtb	r6, r6
 8008346:	1a98      	subs	r0, r3, r2
 8008348:	6963      	ldr	r3, [r4, #20]
 800834a:	4637      	mov	r7, r6
 800834c:	4283      	cmp	r3, r0
 800834e:	dc04      	bgt.n	800835a <__swbuf_r+0x3a>
 8008350:	4621      	mov	r1, r4
 8008352:	4628      	mov	r0, r5
 8008354:	f7ff fda2 	bl	8007e9c <_fflush_r>
 8008358:	b9e0      	cbnz	r0, 8008394 <__swbuf_r+0x74>
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	3b01      	subs	r3, #1
 800835e:	60a3      	str	r3, [r4, #8]
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	701e      	strb	r6, [r3, #0]
 8008368:	6962      	ldr	r2, [r4, #20]
 800836a:	1c43      	adds	r3, r0, #1
 800836c:	429a      	cmp	r2, r3
 800836e:	d004      	beq.n	800837a <__swbuf_r+0x5a>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d506      	bpl.n	8008384 <__swbuf_r+0x64>
 8008376:	2e0a      	cmp	r6, #10
 8008378:	d104      	bne.n	8008384 <__swbuf_r+0x64>
 800837a:	4621      	mov	r1, r4
 800837c:	4628      	mov	r0, r5
 800837e:	f7ff fd8d 	bl	8007e9c <_fflush_r>
 8008382:	b938      	cbnz	r0, 8008394 <__swbuf_r+0x74>
 8008384:	4638      	mov	r0, r7
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f806 	bl	800839c <__swsetup_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	d0d5      	beq.n	8008340 <__swbuf_r+0x20>
 8008394:	f04f 37ff 	mov.w	r7, #4294967295
 8008398:	e7f4      	b.n	8008384 <__swbuf_r+0x64>
	...

0800839c <__swsetup_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <__swsetup_r+0xac>)
 80083a0:	4605      	mov	r5, r0
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	460c      	mov	r4, r1
 80083a6:	b118      	cbz	r0, 80083b0 <__swsetup_r+0x14>
 80083a8:	6a03      	ldr	r3, [r0, #32]
 80083aa:	b90b      	cbnz	r3, 80083b0 <__swsetup_r+0x14>
 80083ac:	f7fd ff92 	bl	80062d4 <__sinit>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b6:	0718      	lsls	r0, r3, #28
 80083b8:	d422      	bmi.n	8008400 <__swsetup_r+0x64>
 80083ba:	06d9      	lsls	r1, r3, #27
 80083bc:	d407      	bmi.n	80083ce <__swsetup_r+0x32>
 80083be:	2309      	movs	r3, #9
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	e034      	b.n	8008438 <__swsetup_r+0x9c>
 80083ce:	0758      	lsls	r0, r3, #29
 80083d0:	d512      	bpl.n	80083f8 <__swsetup_r+0x5c>
 80083d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d4:	b141      	cbz	r1, 80083e8 <__swsetup_r+0x4c>
 80083d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083da:	4299      	cmp	r1, r3
 80083dc:	d002      	beq.n	80083e4 <__swsetup_r+0x48>
 80083de:	4628      	mov	r0, r5
 80083e0:	f7fe ff0e 	bl	8007200 <_free_r>
 80083e4:	2300      	movs	r3, #0
 80083e6:	6363      	str	r3, [r4, #52]	; 0x34
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	2300      	movs	r3, #0
 80083f2:	6063      	str	r3, [r4, #4]
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f043 0308 	orr.w	r3, r3, #8
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	b94b      	cbnz	r3, 8008418 <__swsetup_r+0x7c>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800840a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840e:	d003      	beq.n	8008418 <__swsetup_r+0x7c>
 8008410:	4621      	mov	r1, r4
 8008412:	4628      	mov	r0, r5
 8008414:	f000 f883 	bl	800851e <__smakebuf_r>
 8008418:	89a0      	ldrh	r0, [r4, #12]
 800841a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800841e:	f010 0301 	ands.w	r3, r0, #1
 8008422:	d00a      	beq.n	800843a <__swsetup_r+0x9e>
 8008424:	2300      	movs	r3, #0
 8008426:	60a3      	str	r3, [r4, #8]
 8008428:	6963      	ldr	r3, [r4, #20]
 800842a:	425b      	negs	r3, r3
 800842c:	61a3      	str	r3, [r4, #24]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	b943      	cbnz	r3, 8008444 <__swsetup_r+0xa8>
 8008432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008436:	d1c4      	bne.n	80083c2 <__swsetup_r+0x26>
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	0781      	lsls	r1, r0, #30
 800843c:	bf58      	it	pl
 800843e:	6963      	ldrpl	r3, [r4, #20]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	e7f4      	b.n	800842e <__swsetup_r+0x92>
 8008444:	2000      	movs	r0, #0
 8008446:	e7f7      	b.n	8008438 <__swsetup_r+0x9c>
 8008448:	20000064 	.word	0x20000064

0800844c <_raise_r>:
 800844c:	291f      	cmp	r1, #31
 800844e:	b538      	push	{r3, r4, r5, lr}
 8008450:	4604      	mov	r4, r0
 8008452:	460d      	mov	r5, r1
 8008454:	d904      	bls.n	8008460 <_raise_r+0x14>
 8008456:	2316      	movs	r3, #22
 8008458:	6003      	str	r3, [r0, #0]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008462:	b112      	cbz	r2, 800846a <_raise_r+0x1e>
 8008464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008468:	b94b      	cbnz	r3, 800847e <_raise_r+0x32>
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f830 	bl	80084d0 <_getpid_r>
 8008470:	462a      	mov	r2, r5
 8008472:	4601      	mov	r1, r0
 8008474:	4620      	mov	r0, r4
 8008476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800847a:	f000 b817 	b.w	80084ac <_kill_r>
 800847e:	2b01      	cmp	r3, #1
 8008480:	d00a      	beq.n	8008498 <_raise_r+0x4c>
 8008482:	1c59      	adds	r1, r3, #1
 8008484:	d103      	bne.n	800848e <_raise_r+0x42>
 8008486:	2316      	movs	r3, #22
 8008488:	6003      	str	r3, [r0, #0]
 800848a:	2001      	movs	r0, #1
 800848c:	e7e7      	b.n	800845e <_raise_r+0x12>
 800848e:	2400      	movs	r4, #0
 8008490:	4628      	mov	r0, r5
 8008492:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008496:	4798      	blx	r3
 8008498:	2000      	movs	r0, #0
 800849a:	e7e0      	b.n	800845e <_raise_r+0x12>

0800849c <raise>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <raise+0xc>)
 800849e:	4601      	mov	r1, r0
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	f7ff bfd3 	b.w	800844c <_raise_r>
 80084a6:	bf00      	nop
 80084a8:	20000064 	.word	0x20000064

080084ac <_kill_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	2300      	movs	r3, #0
 80084b0:	4d06      	ldr	r5, [pc, #24]	; (80084cc <_kill_r+0x20>)
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	4611      	mov	r1, r2
 80084b8:	602b      	str	r3, [r5, #0]
 80084ba:	f7f8 fe00 	bl	80010be <_kill>
 80084be:	1c43      	adds	r3, r0, #1
 80084c0:	d102      	bne.n	80084c8 <_kill_r+0x1c>
 80084c2:	682b      	ldr	r3, [r5, #0]
 80084c4:	b103      	cbz	r3, 80084c8 <_kill_r+0x1c>
 80084c6:	6023      	str	r3, [r4, #0]
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
 80084ca:	bf00      	nop
 80084cc:	20000468 	.word	0x20000468

080084d0 <_getpid_r>:
 80084d0:	f7f8 bdee 	b.w	80010b0 <_getpid>

080084d4 <__swhatbuf_r>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	4615      	mov	r5, r2
 80084de:	2900      	cmp	r1, #0
 80084e0:	461e      	mov	r6, r3
 80084e2:	b096      	sub	sp, #88	; 0x58
 80084e4:	da0c      	bge.n	8008500 <__swhatbuf_r+0x2c>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	2100      	movs	r1, #0
 80084ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084ee:	bf0c      	ite	eq
 80084f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084f4:	2340      	movne	r3, #64	; 0x40
 80084f6:	2000      	movs	r0, #0
 80084f8:	6031      	str	r1, [r6, #0]
 80084fa:	602b      	str	r3, [r5, #0]
 80084fc:	b016      	add	sp, #88	; 0x58
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	466a      	mov	r2, sp
 8008502:	f000 f849 	bl	8008598 <_fstat_r>
 8008506:	2800      	cmp	r0, #0
 8008508:	dbed      	blt.n	80084e6 <__swhatbuf_r+0x12>
 800850a:	9901      	ldr	r1, [sp, #4]
 800850c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008510:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008514:	4259      	negs	r1, r3
 8008516:	4159      	adcs	r1, r3
 8008518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851c:	e7eb      	b.n	80084f6 <__swhatbuf_r+0x22>

0800851e <__smakebuf_r>:
 800851e:	898b      	ldrh	r3, [r1, #12]
 8008520:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008522:	079d      	lsls	r5, r3, #30
 8008524:	4606      	mov	r6, r0
 8008526:	460c      	mov	r4, r1
 8008528:	d507      	bpl.n	800853a <__smakebuf_r+0x1c>
 800852a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	2301      	movs	r3, #1
 8008534:	6163      	str	r3, [r4, #20]
 8008536:	b002      	add	sp, #8
 8008538:	bd70      	pop	{r4, r5, r6, pc}
 800853a:	466a      	mov	r2, sp
 800853c:	ab01      	add	r3, sp, #4
 800853e:	f7ff ffc9 	bl	80084d4 <__swhatbuf_r>
 8008542:	9900      	ldr	r1, [sp, #0]
 8008544:	4605      	mov	r5, r0
 8008546:	4630      	mov	r0, r6
 8008548:	f7fe feca 	bl	80072e0 <_malloc_r>
 800854c:	b948      	cbnz	r0, 8008562 <__smakebuf_r+0x44>
 800854e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008552:	059a      	lsls	r2, r3, #22
 8008554:	d4ef      	bmi.n	8008536 <__smakebuf_r+0x18>
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	f043 0302 	orr.w	r3, r3, #2
 800855e:	81a3      	strh	r3, [r4, #12]
 8008560:	e7e3      	b.n	800852a <__smakebuf_r+0xc>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	6020      	str	r0, [r4, #0]
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	6120      	str	r0, [r4, #16]
 8008570:	6163      	str	r3, [r4, #20]
 8008572:	9b01      	ldr	r3, [sp, #4]
 8008574:	b15b      	cbz	r3, 800858e <__smakebuf_r+0x70>
 8008576:	4630      	mov	r0, r6
 8008578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800857c:	f000 f81e 	bl	80085bc <_isatty_r>
 8008580:	b128      	cbz	r0, 800858e <__smakebuf_r+0x70>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	f023 0303 	bic.w	r3, r3, #3
 8008588:	f043 0301 	orr.w	r3, r3, #1
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	431d      	orrs	r5, r3
 8008592:	81a5      	strh	r5, [r4, #12]
 8008594:	e7cf      	b.n	8008536 <__smakebuf_r+0x18>
	...

08008598 <_fstat_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	2300      	movs	r3, #0
 800859c:	4d06      	ldr	r5, [pc, #24]	; (80085b8 <_fstat_r+0x20>)
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	602b      	str	r3, [r5, #0]
 80085a6:	f7f8 fde8 	bl	800117a <_fstat>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d102      	bne.n	80085b4 <_fstat_r+0x1c>
 80085ae:	682b      	ldr	r3, [r5, #0]
 80085b0:	b103      	cbz	r3, 80085b4 <_fstat_r+0x1c>
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	20000468 	.word	0x20000468

080085bc <_isatty_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	2300      	movs	r3, #0
 80085c0:	4d05      	ldr	r5, [pc, #20]	; (80085d8 <_isatty_r+0x1c>)
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f8 fde6 	bl	8001198 <_isatty>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_isatty_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_isatty_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20000468 	.word	0x20000468

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
