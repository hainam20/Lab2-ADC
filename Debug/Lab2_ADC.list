
Lab2_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008444  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08008558  08008558  00018558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008904  08008904  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008904  08008904  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008904  08008904  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008904  08008904  00018904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800890c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  08008ae0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08008ae0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c924  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002107  00000000  00000000  0002cb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a8d  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105a3  00000000  00000000  00048c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b887  00000000  00000000  000591b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004240  00000000  00000000  000e4a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e8c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800853c 	.word	0x0800853c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800853c 	.word	0x0800853c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 	if(hadc->Instance == hadc1.Instance)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_ConvCpltCallback+0x20>
 	{
 		raw_temperature_val = HAL_ADC_GetValue(&hadc1);
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ec2:	f000 fe0b 	bl	8001adc <HAL_ADC_GetValue>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000eca:	6013      	str	r3, [r2, #0]
 	}
 	//if the continous disable we will start again here
 	//HAL_ADC_Start_IT(&hadc1);
 }
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001f0 	.word	0x200001f0
 8000ed8:	200002bc 	.word	0x200002bc
 8000edc:	00000000 	.word	0x00000000

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fbe6 	bl	80016b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f86a 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f95a 	bl	80011a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ef0:	f000 f8c2 	bl	8001078 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000ef4:	f000 f92c 	bl	8001150 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ef8:	f000 f8fc 	bl	80010f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <main+0xc0>)
 8000efe:	f000 fd37 	bl	8001970 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //calculation to get temperature
	  voltage_temperature_convert = (float)raw_temperature_val*MAX_CONV_RANGE/MAX_ADC_RESOLUTION_VAL;
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <main+0xc4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff78 	bl	8000dfc <__aeabi_ui2f>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb3e 	bl	8000590 <__aeabi_f2d>
 8000f14:	a31e      	add	r3, pc, #120	; (adr r3, 8000f90 <main+0xb0>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fb91 	bl	8000640 <__aeabi_dmul>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	a31c      	add	r3, pc, #112	; (adr r3, 8000f98 <main+0xb8>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fcb2 	bl	8000894 <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fe5a 	bl	8000bf0 <__aeabi_d2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a1a      	ldr	r2, [pc, #104]	; (8000fa8 <main+0xc8>)
 8000f40:	6013      	str	r3, [r2, #0]
	  temperature = voltage_temperature_convert*ACCURACY_TEMPERATURE_CELCIUS;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <main+0xc8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4919      	ldr	r1, [pc, #100]	; (8000fac <main+0xcc>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff f909 	bl	8000160 <__aeabi_fmul>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <main+0xd0>)
 8000f54:	601a      	str	r2, [r3, #0]

	  //debug man hinh oled
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8000f56:	2264      	movs	r2, #100	; 0x64
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4816      	ldr	r0, [pc, #88]	; (8000fb4 <main+0xd4>)
 8000f5c:	f005 fa03 	bl	8006366 <memset>
	  sprintf((char*)Tx_Buffer,"\nTemperature: %f",temperature);
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <main+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb13 	bl	8000590 <__aeabi_f2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4912      	ldr	r1, [pc, #72]	; (8000fb8 <main+0xd8>)
 8000f70:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <main+0xd4>)
 8000f72:	f005 f995 	bl	80062a0 <siprintf>
	  HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000f76:	230a      	movs	r3, #10
 8000f78:	2264      	movs	r2, #100	; 0x64
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <main+0xd4>)
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0xdc>)
 8000f7e:	f003 fe9b 	bl	8004cb8 <HAL_UART_Transmit>
	  HAL_Delay(500); //each 500ms display temperature once
 8000f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f86:	f000 fbf7 	bl	8001778 <HAL_Delay>
	  voltage_temperature_convert = (float)raw_temperature_val*MAX_CONV_RANGE/MAX_ADC_RESOLUTION_VAL;
 8000f8a:	e7ba      	b.n	8000f02 <main+0x22>
 8000f8c:	f3af 8000 	nop.w
 8000f90:	cccccccd 	.word	0xcccccccd
 8000f94:	400ccccc 	.word	0x400ccccc
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40affe00 	.word	0x40affe00
 8000fa0:	200001f0 	.word	0x200001f0
 8000fa4:	200002bc 	.word	0x200002bc
 8000fa8:	200002c0 	.word	0x200002c0
 8000fac:	42c80000 	.word	0x42c80000
 8000fb0:	200002c4 	.word	0x200002c4
 8000fb4:	200002c8 	.word	0x200002c8
 8000fb8:	08008558 	.word	0x08008558
 8000fbc:	20000274 	.word	0x20000274

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	; 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	2228      	movs	r2, #40	; 0x28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 f9c9 	bl	8006366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	2301      	movs	r3, #1
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800100c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f938 	bl	800428c <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001022:	f000 f8ed 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001036:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2102      	movs	r1, #2
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fba4 	bl	8004790 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800104e:	f000 f8d7 	bl	8001200 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001052:	2302      	movs	r3, #2
 8001054:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fd24 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106a:	f000 f8c9 	bl	8001200 <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	; 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_ADC1_Init+0x74>)
 800108a:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <MX_ADC1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_ADC1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_ADC1_Init+0x74>)
 8001096:	2201      	movs	r2, #1
 8001098:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_ADC1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_ADC1_Init+0x74>)
 80010a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_ADC1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_ADC1_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_ADC1_Init+0x74>)
 80010b6:	f000 fb83 	bl	80017c0 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f89e 	bl	8001200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010cc:	2307      	movs	r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC1_Init+0x74>)
 80010d6:	f000 fdd5 	bl	8001c84 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010e0:	f000 f88e 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	40012400 	.word	0x40012400

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f001 fa95 	bl	8002660 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f860 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000220 	.word	0x20000220
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_USART1_UART_Init+0x50>)
 8001158:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_USART1_UART_Init+0x4c>)
 8001188:	f003 fd46 	bl	8004c18 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001192:	f000 f835 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000274 	.word	0x20000274
 80011a0:	40013800 	.word	0x40013800

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_GPIO_Init+0x58>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_GPIO_Init+0x58>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_GPIO_Init+0x58>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_GPIO_Init+0x58>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <MX_GPIO_Init+0x58>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6193      	str	r3, [r2, #24]
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_GPIO_Init+0x58>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_GPIO_Init+0x58>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a07      	ldr	r2, [pc, #28]	; (80011fc <MX_GPIO_Init+0x58>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <MX_GPIO_Init+0x58>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	e7fe      	b.n	8001208 <Error_Handler+0x8>
	...

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_MspInit+0x5c>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_MspInit+0x5c>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_MspInit+0x60>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_MspInit+0x60>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000

08001270 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_ADC_MspInit+0x7c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d129      	bne.n	80012e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_ADC_MspInit+0x80>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c0:	2310      	movs	r3, #16
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	4619      	mov	r1, r3
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <HAL_ADC_MspInit+0x84>)
 80012d0:	f001 f842 	bl	8002358 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	2012      	movs	r0, #18
 80012da:	f000 ff46 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012de:	2012      	movs	r0, #18
 80012e0:	f000 ff5f 	bl	80021a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40012400 	.word	0x40012400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <HAL_I2C_MspInit+0x90>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d133      	bne.n	8001380 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_I2C_MspInit+0x94>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_I2C_MspInit+0x94>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_I2C_MspInit+0x94>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001334:	2312      	movs	r3, #18
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4619      	mov	r1, r3
 8001342:	4813      	ldr	r0, [pc, #76]	; (8001390 <HAL_I2C_MspInit+0x98>)
 8001344:	f001 f808 	bl	8002358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_I2C_MspInit+0x94>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_I2C_MspInit+0x94>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	61d3      	str	r3, [r2, #28]
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_I2C_MspInit+0x94>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	201f      	movs	r0, #31
 8001366:	f000 ff00 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800136a:	201f      	movs	r0, #31
 800136c:	f000 ff19 	bl	80021a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2020      	movs	r0, #32
 8001376:	f000 fef8 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800137a:	2020      	movs	r0, #32
 800137c:	f000 ff11 	bl	80021a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40005400 	.word	0x40005400
 800138c:	40021000 	.word	0x40021000
 8001390:	40010c00 	.word	0x40010c00

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a20      	ldr	r2, [pc, #128]	; (8001430 <HAL_UART_MspInit+0x9c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d139      	bne.n	8001428 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_UART_MspInit+0xa0>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4619      	mov	r1, r3
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <HAL_UART_MspInit+0xa4>)
 80013fa:	f000 ffad 	bl	8002358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	4809      	ldr	r0, [pc, #36]	; (8001438 <HAL_UART_MspInit+0xa4>)
 8001414:	f000 ffa0 	bl	8002358 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2025      	movs	r0, #37	; 0x25
 800141e:	f000 fea4 	bl	800216a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001422:	2025      	movs	r0, #37	; 0x25
 8001424:	f000 febd 	bl	80021a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40013800 	.word	0x40013800
 8001434:	40021000 	.word	0x40021000
 8001438:	40010800 	.word	0x40010800

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 f95d 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <ADC1_2_IRQHandler+0x10>)
 8001492:	f000 fb2f 	bl	8001af4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f0 	.word	0x200001f0

080014a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <I2C1_EV_IRQHandler+0x10>)
 80014a6:	f001 fa33 	bl	8002910 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000220 	.word	0x20000220

080014b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <I2C1_ER_IRQHandler+0x10>)
 80014ba:	f001 fb7c 	bl	8002bb6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000220 	.word	0x20000220

080014c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART1_IRQHandler+0x10>)
 80014ce:	f003 fc77 	bl	8004dc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000274 	.word	0x20000274

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <_kill>:

int _kill(int pid, int sig)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014f4:	f004 ff8a 	bl	800640c <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2216      	movs	r2, #22
 80014fc:	601a      	str	r2, [r3, #0]
  return -1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_exit>:

void _exit (int status)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001512:	f04f 31ff 	mov.w	r1, #4294967295
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffe7 	bl	80014ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800151c:	e7fe      	b.n	800151c <_exit+0x12>

0800151e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e00a      	b.n	8001546 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001530:	f3af 8000 	nop.w
 8001534:	4601      	mov	r1, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	b2ca      	uxtb	r2, r1
 800153e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	dbf0      	blt.n	8001530 <_read+0x12>
  }

  return len;
 800154e:	687b      	ldr	r3, [r7, #4]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e009      	b.n	800157e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	60ba      	str	r2, [r7, #8]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	dbf1      	blt.n	800156a <_write+0x12>
  }
  return len;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_close>:

int _close(int file)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
  return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <_isatty>:

int _isatty(int file)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f004 fef4 	bl	800640c <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20005000 	.word	0x20005000
 8001650:	00000400 	.word	0x00000400
 8001654:	2000032c 	.word	0x2000032c
 8001658:	20000480 	.word	0x20000480

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff fff8 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800166e:	490c      	ldr	r1, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001684:	4c09      	ldr	r4, [pc, #36]	; (80016ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f004 fec1 	bl	8006418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001696:	f7ff fc23 	bl	8000ee0 <main>
  bx lr
 800169a:	4770      	bx	lr
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016a4:	0800890c 	.word	0x0800890c
  ldr r2, =_sbss
 80016a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80016ac:	20000480 	.word	0x20000480

080016b0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <CAN1_RX1_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fd45 	bl	8002154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fd9c 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd5d 	bl	80021be <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fd25 	bl	800216a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000000 	.word	0x20000000
 8001738:	20000008 	.word	0x20000008
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x20>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000008 	.word	0x20000008
 8001760:	20000330 	.word	0x20000330

08001764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000330 	.word	0x20000330

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff fff0 	bl	8001764 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffe0 	bl	8001764 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0be      	b.n	8001960 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fd36 	bl	8001270 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fb8f 	bl	8001f28 <ADC_ConversionStop_Disable>
 800180a:	4603      	mov	r3, r0
 800180c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8099 	bne.w	800194e <HAL_ADC_Init+0x18e>
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8095 	bne.w	800194e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800182c:	f023 0302 	bic.w	r3, r3, #2
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001840:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001848:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001858:	d003      	beq.n	8001862 <HAL_ADC_Init+0xa2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <HAL_ADC_Init+0xa8>
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	e000      	b.n	800186a <HAL_ADC_Init+0xaa>
 8001868:	2300      	movs	r3, #0
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7d1b      	ldrb	r3, [r3, #20]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d119      	bne.n	80018ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b1b      	ldrb	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	3b01      	subs	r3, #1
 8001886:	035a      	lsls	r2, r3, #13
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e00b      	b.n	80018ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f043 0220 	orr.w	r2, r3, #32
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_ADC_Init+0x1a8>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018dc:	d003      	beq.n	80018e6 <HAL_ADC_Init+0x126>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d104      	bne.n	80018f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	051b      	lsls	r3, r3, #20
 80018ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	430a      	orrs	r2, r1
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_ADC_Init+0x1ac>)
 800190c:	4013      	ands	r3, r2
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	429a      	cmp	r2, r3
 8001912:	d10b      	bne.n	800192c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800192a:	e018      	b.n	800195e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f023 0312 	bic.w	r3, r3, #18
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	f043 0210 	orr.w	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	ffe1f7fd 	.word	0xffe1f7fd
 800196c:	ff1f0efe 	.word	0xff1f0efe

08001970 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Start_IT+0x1a>
 8001986:	2302      	movs	r3, #2
 8001988:	e0a0      	b.n	8001acc <HAL_ADC_Start_IT+0x15c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fa6e 	bl	8001e74 <ADC_Enable>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f040 808f 	bne.w	8001ac2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_ADC_Start_IT+0x164>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d105      	bne.n	80019ce <HAL_ADC_Start_IT+0x5e>
 80019c2:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <HAL_ADC_Start_IT+0x168>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d026      	beq.n	8001a36 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f8:	e01d      	b.n	8001a36 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a33      	ldr	r2, [pc, #204]	; (8001ad8 <HAL_ADC_Start_IT+0x168>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_ADC_Start_IT+0xaa>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <HAL_ADC_Start_IT+0x164>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10d      	bne.n	8001a36 <HAL_ADC_Start_IT+0xc6>
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_ADC_Start_IT+0x168>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f023 0206 	bic.w	r2, r3, #6
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a4e:	e002      	b.n	8001a56 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f06f 0202 	mvn.w	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a86:	d113      	bne.n	8001ab0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_ADC_Start_IT+0x164>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_ADC_Start_IT+0x168>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	e00c      	b.n	8001aca <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	e003      	b.n	8001aca <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40012800 	.word	0x40012800
 8001ad8:	40012400 	.word	0x40012400

08001adc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03e      	beq.n	8001b94 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d039      	beq.n	8001b94 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b46:	d11d      	bne.n	8001b84 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d119      	bne.n	8001b84 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0220 	bic.w	r2, r2, #32
 8001b5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff f991 	bl	8000eac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0212 	mvn.w	r2, #18
 8001b92:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04d      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d048      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001bca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001bce:	d012      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d125      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001be8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bec:	d11d      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d119      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c04:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d105      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f9bd 	bl	8001faa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 020c 	mvn.w	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00d      	beq.n	8001c6a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f809 	bl	8001c72 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0201 	mvn.w	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x20>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0dc      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x1da>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d81c      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b05      	subs	r3, #5
 8001cc6:	221f      	movs	r2, #31
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	4019      	ands	r1, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
 8001cec:	e03c      	b.n	8001d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d81c      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b23      	subs	r3, #35	; 0x23
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4019      	ands	r1, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b23      	subs	r3, #35	; 0x23
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2e:	e01b      	b.n	8001d68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b41      	subs	r3, #65	; 0x41
 8001d42:	221f      	movs	r2, #31
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b41      	subs	r3, #65	; 0x41
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	d91c      	bls.n	8001daa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68d9      	ldr	r1, [r3, #12]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b1e      	subs	r3, #30
 8001d82:	2207      	movs	r2, #7
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4019      	ands	r1, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6898      	ldr	r0, [r3, #8]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	3b1e      	subs	r3, #30
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	e019      	b.n	8001dde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6919      	ldr	r1, [r3, #16]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	2207      	movs	r2, #7
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4019      	ands	r1, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6898      	ldr	r0, [r3, #8]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d003      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dea:	2b11      	cmp	r3, #17
 8001dec:	d132      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_ADC_ConfigChannel+0x1e4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d125      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d126      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d11a      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	0c9a      	lsrs	r2, r3, #18
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x1b2>
 8001e42:	e007      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40012400 	.word	0x40012400
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d040      	beq.n	8001f14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <ADC_Enable+0xac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <ADC_Enable+0xb0>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eb0:	e002      	b.n	8001eb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ebe:	f7ff fc51 	bl	8001764 <HAL_GetTick>
 8001ec2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ec4:	e01f      	b.n	8001f06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ec6:	f7ff fc4d 	bl	8001764 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d918      	bls.n	8001f06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d011      	beq.n	8001f06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e007      	b.n	8001f16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d1d8      	bne.n	8001ec6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12e      	bne.n	8001fa0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f52:	f7ff fc07 	bl	8001764 <HAL_GetTick>
 8001f56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f58:	e01b      	b.n	8001f92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f5a:	f7ff fc03 	bl	8001764 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d914      	bls.n	8001f92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e007      	b.n	8001fa2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d0dc      	beq.n	8001f5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4906      	ldr	r1, [pc, #24]	; (8002054 <__NVIC_EnableIRQ+0x34>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002120:	d301      	bcc.n	8002126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002122:	2301      	movs	r3, #1
 8002124:	e00f      	b.n	8002146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <SysTick_Config+0x40>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800212e:	210f      	movs	r1, #15
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f7ff ff90 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <SysTick_Config+0x40>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <SysTick_Config+0x40>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	e000e010 	.word	0xe000e010

08002154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff2d 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800217c:	f7ff ff42 	bl	8002004 <__NVIC_GetPriorityGrouping>
 8002180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7ff ff90 	bl	80020ac <NVIC_EncodePriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff5f 	bl	8002058 <__NVIC_SetPriority>
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff35 	bl	8002020 <__NVIC_EnableIRQ>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffa2 	bl	8002110 <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d008      	beq.n	8002200 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e020      	b.n	8002242 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020e 	bic.w	r2, r2, #14
 800220e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d005      	beq.n	8002270 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e051      	b.n	8002314 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020e 	bic.w	r2, r2, #14
 800227e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_DMA_Abort_IT+0xd4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d029      	beq.n	80022ee <HAL_DMA_Abort_IT+0xa2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_DMA_Abort_IT+0xd8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d022      	beq.n	80022ea <HAL_DMA_Abort_IT+0x9e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_DMA_Abort_IT+0xdc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01a      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x98>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_DMA_Abort_IT+0xe0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d012      	beq.n	80022de <HAL_DMA_Abort_IT+0x92>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_DMA_Abort_IT+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00a      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x8c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_DMA_Abort_IT+0xe8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_DMA_Abort_IT+0x86>
 80022cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022d0:	e00e      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d6:	e00b      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022dc:	e008      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e2:	e005      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e8:	e002      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022ea:	2310      	movs	r3, #16
 80022ec:	e000      	b.n	80022f0 <HAL_DMA_Abort_IT+0xa4>
 80022ee:	2301      	movs	r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_DMA_Abort_IT+0xec>)
 80022f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
    } 
  }
  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40020008 	.word	0x40020008
 8002324:	4002001c 	.word	0x4002001c
 8002328:	40020030 	.word	0x40020030
 800232c:	40020044 	.word	0x40020044
 8002330:	40020058 	.word	0x40020058
 8002334:	4002006c 	.word	0x4002006c
 8002338:	40020000 	.word	0x40020000

0800233c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b08b      	sub	sp, #44	; 0x2c
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	e169      	b.n	8002640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800236c:	2201      	movs	r2, #1
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8158 	bne.w	800263a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a9a      	ldr	r2, [pc, #616]	; (80025f8 <HAL_GPIO_Init+0x2a0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d05e      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 8002394:	4a98      	ldr	r2, [pc, #608]	; (80025f8 <HAL_GPIO_Init+0x2a0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d875      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 800239a:	4a98      	ldr	r2, [pc, #608]	; (80025fc <HAL_GPIO_Init+0x2a4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d058      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023a0:	4a96      	ldr	r2, [pc, #600]	; (80025fc <HAL_GPIO_Init+0x2a4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d86f      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023a6:	4a96      	ldr	r2, [pc, #600]	; (8002600 <HAL_GPIO_Init+0x2a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d052      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023ac:	4a94      	ldr	r2, [pc, #592]	; (8002600 <HAL_GPIO_Init+0x2a8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d869      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023b2:	4a94      	ldr	r2, [pc, #592]	; (8002604 <HAL_GPIO_Init+0x2ac>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d04c      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023b8:	4a92      	ldr	r2, [pc, #584]	; (8002604 <HAL_GPIO_Init+0x2ac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d863      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023be:	4a92      	ldr	r2, [pc, #584]	; (8002608 <HAL_GPIO_Init+0x2b0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d046      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
 80023c4:	4a90      	ldr	r2, [pc, #576]	; (8002608 <HAL_GPIO_Init+0x2b0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d85d      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d82a      	bhi.n	8002424 <HAL_GPIO_Init+0xcc>
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d859      	bhi.n	8002486 <HAL_GPIO_Init+0x12e>
 80023d2:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <HAL_GPIO_Init+0x80>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	08002453 	.word	0x08002453
 80023dc:	0800242d 	.word	0x0800242d
 80023e0:	0800243f 	.word	0x0800243f
 80023e4:	08002481 	.word	0x08002481
 80023e8:	08002487 	.word	0x08002487
 80023ec:	08002487 	.word	0x08002487
 80023f0:	08002487 	.word	0x08002487
 80023f4:	08002487 	.word	0x08002487
 80023f8:	08002487 	.word	0x08002487
 80023fc:	08002487 	.word	0x08002487
 8002400:	08002487 	.word	0x08002487
 8002404:	08002487 	.word	0x08002487
 8002408:	08002487 	.word	0x08002487
 800240c:	08002487 	.word	0x08002487
 8002410:	08002487 	.word	0x08002487
 8002414:	08002487 	.word	0x08002487
 8002418:	08002487 	.word	0x08002487
 800241c:	08002435 	.word	0x08002435
 8002420:	08002449 	.word	0x08002449
 8002424:	4a79      	ldr	r2, [pc, #484]	; (800260c <HAL_GPIO_Init+0x2b4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800242a:	e02c      	b.n	8002486 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	623b      	str	r3, [r7, #32]
          break;
 8002432:	e029      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	3304      	adds	r3, #4
 800243a:	623b      	str	r3, [r7, #32]
          break;
 800243c:	e024      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	3308      	adds	r3, #8
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e01f      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	330c      	adds	r3, #12
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e01a      	b.n	8002488 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800245a:	2304      	movs	r3, #4
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e013      	b.n	8002488 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002468:	2308      	movs	r3, #8
 800246a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	611a      	str	r2, [r3, #16]
          break;
 8002472:	e009      	b.n	8002488 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	615a      	str	r2, [r3, #20]
          break;
 800247e:	e003      	b.n	8002488 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002480:	2300      	movs	r3, #0
 8002482:	623b      	str	r3, [r7, #32]
          break;
 8002484:	e000      	b.n	8002488 <HAL_GPIO_Init+0x130>
          break;
 8002486:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2bff      	cmp	r3, #255	; 0xff
 800248c:	d801      	bhi.n	8002492 <HAL_GPIO_Init+0x13a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_Init+0x13e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2bff      	cmp	r3, #255	; 0xff
 800249c:	d802      	bhi.n	80024a4 <HAL_GPIO_Init+0x14c>
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x152>
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	3b08      	subs	r3, #8
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	210f      	movs	r1, #15
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	431a      	orrs	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80b1 	beq.w	800263a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d8:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_GPIO_Init+0x2b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024f0:	4a48      	ldr	r2, [pc, #288]	; (8002614 <HAL_GPIO_Init+0x2bc>)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a40      	ldr	r2, [pc, #256]	; (8002618 <HAL_GPIO_Init+0x2c0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d013      	beq.n	8002544 <HAL_GPIO_Init+0x1ec>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_GPIO_Init+0x2c4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00d      	beq.n	8002540 <HAL_GPIO_Init+0x1e8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a3e      	ldr	r2, [pc, #248]	; (8002620 <HAL_GPIO_Init+0x2c8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0x1e4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <HAL_GPIO_Init+0x2cc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_GPIO_Init+0x1e0>
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002538:	2304      	movs	r3, #4
 800253a:	e004      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 800253c:	2302      	movs	r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_GPIO_Init+0x1ee>
 8002544:	2300      	movs	r3, #0
 8002546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002548:	f002 0203 	and.w	r2, r2, #3
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	4093      	lsls	r3, r2
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002556:	492f      	ldr	r1, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x2bc>)
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	492c      	ldr	r1, [pc, #176]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	43db      	mvns	r3, r3
 8002586:	4928      	ldr	r1, [pc, #160]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 8002588:	4013      	ands	r3, r2
 800258a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4922      	ldr	r1, [pc, #136]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e006      	b.n	80025b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	491e      	ldr	r1, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	4918      	ldr	r1, [pc, #96]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ce:	4b16      	ldr	r3, [pc, #88]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4914      	ldr	r1, [pc, #80]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d021      	beq.n	800262c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_GPIO_Init+0x2d0>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e021      	b.n	800263a <HAL_GPIO_Init+0x2e2>
 80025f6:	bf00      	nop
 80025f8:	10320000 	.word	0x10320000
 80025fc:	10310000 	.word	0x10310000
 8002600:	10220000 	.word	0x10220000
 8002604:	10210000 	.word	0x10210000
 8002608:	10120000 	.word	0x10120000
 800260c:	10110000 	.word	0x10110000
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000
 8002618:	40010800 	.word	0x40010800
 800261c:	40010c00 	.word	0x40010c00
 8002620:	40011000 	.word	0x40011000
 8002624:	40011400 	.word	0x40011400
 8002628:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_GPIO_Init+0x304>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	43db      	mvns	r3, r3
 8002634:	4909      	ldr	r1, [pc, #36]	; (800265c <HAL_GPIO_Init+0x304>)
 8002636:	4013      	ands	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	3301      	adds	r3, #1
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f ae8e 	bne.w	800236c <HAL_GPIO_Init+0x14>
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	372c      	adds	r7, #44	; 0x2c
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40010400 	.word	0x40010400

08002660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e12b      	b.n	80028ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fe36 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	; 0x24
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c4:	f002 f9ac 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 80026c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a81      	ldr	r2, [pc, #516]	; (80028d4 <HAL_I2C_Init+0x274>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d807      	bhi.n	80026e4 <HAL_I2C_Init+0x84>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_I2C_Init+0x278>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e006      	b.n	80026f2 <HAL_I2C_Init+0x92>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a7d      	ldr	r2, [pc, #500]	; (80028dc <HAL_I2C_Init+0x27c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0e7      	b.n	80028ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a78      	ldr	r2, [pc, #480]	; (80028e0 <HAL_I2C_Init+0x280>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0c9b      	lsrs	r3, r3, #18
 8002704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a6a      	ldr	r2, [pc, #424]	; (80028d4 <HAL_I2C_Init+0x274>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d802      	bhi.n	8002734 <HAL_I2C_Init+0xd4>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	e009      	b.n	8002748 <HAL_I2C_Init+0xe8>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a69      	ldr	r2, [pc, #420]	; (80028e4 <HAL_I2C_Init+0x284>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	3301      	adds	r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	430b      	orrs	r3, r1
 800274e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800275a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	495c      	ldr	r1, [pc, #368]	; (80028d4 <HAL_I2C_Init+0x274>)
 8002764:	428b      	cmp	r3, r1
 8002766:	d819      	bhi.n	800279c <HAL_I2C_Init+0x13c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e59      	subs	r1, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fbb1 f3f3 	udiv	r3, r1, r3
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	f640 73fc 	movw	r3, #4092	; 0xffc
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_I2C_Init+0x138>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e59      	subs	r1, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	e051      	b.n	800283c <HAL_I2C_Init+0x1dc>
 8002798:	2304      	movs	r3, #4
 800279a:	e04f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <HAL_I2C_Init+0x168>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e012      	b.n	80027ee <HAL_I2C_Init+0x18e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x196>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e022      	b.n	800283c <HAL_I2C_Init+0x1dc>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <HAL_I2C_Init+0x1bc>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e58      	subs	r0, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	440b      	add	r3, r1
 800280c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800281a:	e00f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	6809      	ldr	r1, [r1, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800286a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6911      	ldr	r1, [r2, #16]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	000186a0 	.word	0x000186a0
 80028d8:	001e847f 	.word	0x001e847f
 80028dc:	003d08ff 	.word	0x003d08ff
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d103      	bne.n	8002906 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002930:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d003      	beq.n	8002948 <HAL_I2C_EV_IRQHandler+0x38>
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	f040 80b1 	bne.w	8002aaa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <HAL_I2C_EV_IRQHandler+0x6e>
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002968:	d003      	beq.n	8002972 <HAL_I2C_EV_IRQHandler+0x62>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002970:	d101      	bne.n	8002976 <HAL_I2C_EV_IRQHandler+0x66>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_I2C_EV_IRQHandler+0x68>
 8002976:	2300      	movs	r3, #0
 8002978:	2b01      	cmp	r3, #1
 800297a:	f000 8114 	beq.w	8002ba6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x90>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f001 fc60 	bl	8004258 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fd60 	bl	800345e <I2C_Master_SB>
 800299e:	e083      	b.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_I2C_EV_IRQHandler+0xac>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fdd7 	bl	8003568 <I2C_Master_ADD10>
 80029ba:	e075      	b.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_I2C_EV_IRQHandler+0xc8>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fdf2 	bl	80035ba <I2C_Master_ADDR>
 80029d6:	e067      	b.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f0:	f000 80db 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0x10a>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_I2C_EV_IRQHandler+0x10a>
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9d4 	bl	8002dc0 <I2C_MasterTransmit_TXE>
 8002a18:	e046      	b.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80c2 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80bc 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a32:	7bbb      	ldrb	r3, [r7, #14]
 8002a34:	2b21      	cmp	r3, #33	; 0x21
 8002a36:	d103      	bne.n	8002a40 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa5d 	bl	8002ef8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3e:	e0b4      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b40      	cmp	r3, #64	; 0x40
 8002a44:	f040 80b1 	bne.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 facb 	bl	8002fe4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4e:	e0ac      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a5e:	f000 80a4 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x178>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_I2C_EV_IRQHandler+0x178>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb47 	bl	8003114 <I2C_MasterReceive_RXNE>
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 808b 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8085 	beq.w	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fbf2 	bl	800328a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa6:	e080      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
 8002aa8:	e07f      	b.n	8002baa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e007      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d011      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x1ea>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 ffb8 	bl	8003a68 <I2C_Slave_ADDR>
 8002af8:	e05a      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x206>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fff2 	bl	8003af8 <I2C_Slave_STOPF>
 8002b14:	e04c      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	2b21      	cmp	r3, #33	; 0x21
 8002b1a:	d002      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0x212>
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	2b29      	cmp	r3, #41	; 0x29
 8002b20:	d120      	bne.n	8002b64 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x238>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_I2C_EV_IRQHandler+0x238>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fed5 	bl	80038f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b46:	e032      	b.n	8002bae <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02d      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x29e>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d028      	beq.n	8002bae <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 ff04 	bl	800396a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b62:	e024      	b.n	8002bae <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <HAL_I2C_EV_IRQHandler+0x27a>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_I2C_EV_IRQHandler+0x27a>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 ff11 	bl	80039aa <I2C_SlaveReceive_RXNE>
 8002b88:	e012      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 ff41 	bl	8003a26 <I2C_SlaveReceive_BTF>
 8002ba4:	e004      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b08a      	sub	sp, #40	; 0x28
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0x5a>
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bfe:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x80>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03e      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x108>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d039      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002c4a:	7efb      	ldrb	r3, [r7, #27]
 8002c4c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c64:	7ebb      	ldrb	r3, [r7, #26]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d112      	bne.n	8002c90 <HAL_I2C_ER_IRQHandler+0xda>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10f      	bne.n	8002c90 <HAL_I2C_ER_IRQHandler+0xda>
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b21      	cmp	r3, #33	; 0x21
 8002c74:	d008      	beq.n	8002c88 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	2b29      	cmp	r3, #41	; 0x29
 8002c7a:	d005      	beq.n	8002c88 <HAL_I2C_ER_IRQHandler+0xd2>
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b28      	cmp	r3, #40	; 0x28
 8002c80:	d106      	bne.n	8002c90 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b21      	cmp	r3, #33	; 0x21
 8002c86:	d103      	bne.n	8002c90 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f001 f865 	bl	8003d58 <I2C_Slave_AF>
 8002c8e:	e016      	b.n	8002cbe <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c98:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ca2:	7efb      	ldrb	r3, [r7, #27]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d002      	beq.n	8002cae <HAL_I2C_ER_IRQHandler+0xf8>
 8002ca8:	7efb      	ldrb	r3, [r7, #27]
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d107      	bne.n	8002cbe <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f043 0308 	orr.w	r3, r3, #8
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ce2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f001 f8a2 	bl	8003e40 <I2C_ITError>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d150      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0xc8>
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b21      	cmp	r3, #33	; 0x21
 8002dea:	d14d      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d01d      	beq.n	8002e2e <I2C_MasterTransmit_TXE+0x6e>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d01a      	beq.n	8002e2e <I2C_MasterTransmit_TXE+0x6e>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dfe:	d016      	beq.n	8002e2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2211      	movs	r2, #17
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff6c 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e2c:	e060      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d107      	bne.n	8002e78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff81 	bl	8002d78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e76:	e03b      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff3f 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e86:	e033      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b21      	cmp	r3, #33	; 0x21
 8002e8c:	d005      	beq.n	8002e9a <I2C_MasterTransmit_TXE+0xda>
 8002e8e:	7bbb      	ldrb	r3, [r7, #14]
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d12d      	bne.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b22      	cmp	r3, #34	; 0x22
 8002e98:	d12a      	bne.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d108      	bne.n	8002eb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002eb4:	e01c      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	d103      	bne.n	8002eca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f88e 	bl	8002fe4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002ec8:	e012      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002eee:	e7ff      	b.n	8002ef0 <I2C_MasterTransmit_TXE+0x130>
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b21      	cmp	r3, #33	; 0x21
 8002f10:	d164      	bne.n	8002fdc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d012      	beq.n	8002f42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f40:	e04c      	b.n	8002fdc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d01d      	beq.n	8002f84 <I2C_MasterTransmit_BTF+0x8c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d01a      	beq.n	8002f84 <I2C_MasterTransmit_BTF+0x8c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f54:	d016      	beq.n	8002f84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2211      	movs	r2, #17
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fec1 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002f82:	e02b      	b.n	8002fdc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d107      	bne.n	8002fce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fed6 	bl	8002d78 <HAL_I2C_MemTxCpltCallback>
}
 8002fcc:	e006      	b.n	8002fdc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fe94 	bl	8002d04 <HAL_I2C_MasterTxCpltCallback>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10b      	bne.n	800301c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	b2da      	uxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800301a:	e077      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	b29b      	uxth	r3, r3
 8003022:	121b      	asrs	r3, r3, #8
 8003024:	b2da      	uxtb	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003036:	e069      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10b      	bne.n	8003058 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	b2da      	uxtb	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003056:	e059      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	2b02      	cmp	r3, #2
 800305e:	d152      	bne.n	8003106 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b22      	cmp	r3, #34	; 0x22
 8003064:	d10d      	bne.n	8003082 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003074:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003080:	e044      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b21      	cmp	r3, #33	; 0x21
 8003090:	d112      	bne.n	80030b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	781a      	ldrb	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030b6:	e029      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d124      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b21      	cmp	r3, #33	; 0x21
 80030c6:	d121      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fe3a 	bl	8002d78 <HAL_I2C_MemTxCpltCallback>
}
 8003104:	e002      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fbee 	bl	80028e8 <I2C_Flush_DR>
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b22      	cmp	r3, #34	; 0x22
 8003126:	f040 80ac 	bne.w	8003282 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d921      	bls.n	800317c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b03      	cmp	r3, #3
 8003166:	f040 808c 	bne.w	8003282 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800317a:	e082      	b.n	8003282 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b02      	cmp	r3, #2
 8003182:	d075      	beq.n	8003270 <I2C_MasterReceive_RXNE+0x15c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d002      	beq.n	8003190 <I2C_MasterReceive_RXNE+0x7c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d16f      	bne.n	8003270 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f001 f82f 	bl	80041f4 <I2C_WaitOnSTOPRequestThroughIT>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d142      	bne.n	8003222 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d10a      	bne.n	800320c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fdc0 	bl	8002d8a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800320a:	e03a      	b.n	8003282 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2212      	movs	r2, #18
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fd7b 	bl	8002d16 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003220:	e02f      	b.n	8003282 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003230:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fd97 	bl	8002d9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800326e:	e008      	b.n	8003282 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	605a      	str	r2, [r3, #4]
}
 8003280:	e7ff      	b.n	8003282 <I2C_MasterReceive_RXNE+0x16e>
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d11b      	bne.n	80032da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032d8:	e0bd      	b.n	8003456 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d129      	bne.n	8003338 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00a      	beq.n	8003310 <I2C_MasterReceive_BTF+0x86>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d007      	beq.n	8003310 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003336:	e08e      	b.n	8003456 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d176      	bne.n	8003430 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d002      	beq.n	800334e <I2C_MasterReceive_BTF+0xc4>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b10      	cmp	r3, #16
 800334c:	d108      	bne.n	8003360 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e019      	b.n	8003394 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b04      	cmp	r3, #4
 8003364:	d002      	beq.n	800336c <I2C_MasterReceive_BTF+0xe2>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d108      	bne.n	800337e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e00a      	b.n	8003394 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d007      	beq.n	8003394 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d10a      	bne.n	800341a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fcb9 	bl	8002d8a <HAL_I2C_MemRxCpltCallback>
}
 8003418:	e01d      	b.n	8003456 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2212      	movs	r2, #18
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fc74 	bl	8002d16 <HAL_I2C_MasterRxCpltCallback>
}
 800342e:	e012      	b.n	8003456 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b40      	cmp	r3, #64	; 0x40
 8003470:	d117      	bne.n	80034a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800348a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800348c:	e067      	b.n	800355e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
}
 80034a0:	e05d      	b.n	800355e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034aa:	d133      	bne.n	8003514 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b21      	cmp	r3, #33	; 0x21
 80034b6:	d109      	bne.n	80034cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c8:	611a      	str	r2, [r3, #16]
 80034ca:	e008      	b.n	80034de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d004      	beq.n	80034f0 <I2C_Master_SB+0x92>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d032      	beq.n	800355e <I2C_Master_SB+0x100>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02d      	beq.n	800355e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003510:	605a      	str	r2, [r3, #4]
}
 8003512:	e024      	b.n	800355e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10e      	bne.n	800353a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	b29b      	uxth	r3, r3
 8003522:	11db      	asrs	r3, r3, #7
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0306 	and.w	r3, r3, #6
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f063 030f 	orn	r3, r3, #15
 8003530:	b2da      	uxtb	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	611a      	str	r2, [r3, #16]
}
 8003538:	e011      	b.n	800355e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10d      	bne.n	800355e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	b29b      	uxth	r3, r3
 8003548:	11db      	asrs	r3, r3, #7
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0306 	and.w	r3, r3, #6
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f063 030e 	orn	r3, r3, #14
 8003556:	b2da      	uxtb	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	611a      	str	r2, [r3, #16]
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	b2da      	uxtb	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <I2C_Master_ADD10+0x26>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d108      	bne.n	80035a0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <I2C_Master_ADD10+0x48>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b091      	sub	sp, #68	; 0x44
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b22      	cmp	r3, #34	; 0x22
 80035e2:	f040 8174 	bne.w	80038ce <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <I2C_Master_ADDR+0x54>
 80035ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d10b      	bne.n	800360e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f6:	2300      	movs	r3, #0
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	e16b      	b.n	80038e6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <I2C_Master_ADDR+0x98>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800361e:	d118      	bne.n	8003652 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
 8003650:	e149      	b.n	80038e6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d113      	bne.n	8003684 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e120      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 808a 	bne.w	80037a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003696:	d137      	bne.n	8003708 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	d113      	bne.n	80036e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	e0f2      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	623b      	str	r3, [r7, #32]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e0de      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b08      	cmp	r3, #8
 800370c:	d02e      	beq.n	800376c <I2C_Master_ADDR+0x1b2>
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2b20      	cmp	r3, #32
 8003712:	d02b      	beq.n	800376c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	2b12      	cmp	r3, #18
 8003718:	d102      	bne.n	8003720 <I2C_Master_ADDR+0x166>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b01      	cmp	r3, #1
 800371e:	d125      	bne.n	800376c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00e      	beq.n	8003744 <I2C_Master_ADDR+0x18a>
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b02      	cmp	r3, #2
 800372a:	d00b      	beq.n	8003744 <I2C_Master_ADDR+0x18a>
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	2b10      	cmp	r3, #16
 8003730:	d008      	beq.n	8003744 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e007      	b.n	8003754 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003752:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	e0ac      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e090      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d158      	bne.n	8003860 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d021      	beq.n	80037f8 <I2C_Master_ADDR+0x23e>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d01e      	beq.n	80037f8 <I2C_Master_ADDR+0x23e>
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d01b      	beq.n	80037f8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e012      	b.n	800381e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003806:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d14b      	bne.n	80038c6 <I2C_Master_ADDR+0x30c>
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003834:	d00b      	beq.n	800384e <I2C_Master_ADDR+0x294>
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2b01      	cmp	r3, #1
 800383a:	d008      	beq.n	800384e <I2C_Master_ADDR+0x294>
 800383c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383e:	2b08      	cmp	r3, #8
 8003840:	d005      	beq.n	800384e <I2C_Master_ADDR+0x294>
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	2b10      	cmp	r3, #16
 8003846:	d002      	beq.n	800384e <I2C_Master_ADDR+0x294>
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	2b20      	cmp	r3, #32
 800384c:	d13b      	bne.n	80038c6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	e032      	b.n	80038c6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800386e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387e:	d117      	bne.n	80038b0 <I2C_Master_ADDR+0x2f6>
 8003880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003882:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003886:	d00b      	beq.n	80038a0 <I2C_Master_ADDR+0x2e6>
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2b01      	cmp	r3, #1
 800388c:	d008      	beq.n	80038a0 <I2C_Master_ADDR+0x2e6>
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2b08      	cmp	r3, #8
 8003892:	d005      	beq.n	80038a0 <I2C_Master_ADDR+0x2e6>
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	2b10      	cmp	r3, #16
 8003898:	d002      	beq.n	80038a0 <I2C_Master_ADDR+0x2e6>
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	2b20      	cmp	r3, #32
 800389e:	d107      	bne.n	80038b0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038cc:	e00b      	b.n	80038e6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
}
 80038e4:	e7ff      	b.n	80038e6 <I2C_Master_ADDR+0x32c>
 80038e6:	bf00      	nop
 80038e8:	3744      	adds	r7, #68	; 0x44
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02b      	beq.n	8003962 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	781a      	ldrb	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <I2C_SlaveTransmit_TXE+0x72>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b29      	cmp	r3, #41	; 0x29
 800393c:	d111      	bne.n	8003962 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2221      	movs	r2, #33	; 0x21
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2228      	movs	r2, #40	; 0x28
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff f9e3 	bl	8002d28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d011      	beq.n	80039a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d02c      	beq.n	8003a1e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d114      	bne.n	8003a1e <I2C_SlaveReceive_RXNE+0x74>
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b2a      	cmp	r3, #42	; 0x2a
 80039f8:	d111      	bne.n	8003a1e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2222      	movs	r2, #34	; 0x22
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2228      	movs	r2, #40	; 0x28
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff f98e 	bl	8002d3a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d012      	beq.n	8003a5e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a82:	2b28      	cmp	r3, #40	; 0x28
 8003a84:	d125      	bne.n	8003ad2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a94:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d103      	bne.n	8003ab6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	81bb      	strh	r3, [r7, #12]
 8003ab4:	e002      	b.n	8003abc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ac4:	89ba      	ldrh	r2, [r7, #12]
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f93e 	bl	8002d4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ad0:	e00e      	b.n	8003af0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b06:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b16:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b54:	d172      	bne.n	8003c3c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	d002      	beq.n	8003b62 <I2C_Slave_STOPF+0x6a>
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b60:	d135      	bne.n	8003bce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fbce 	bl	800233c <HAL_DMA_GetState>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d049      	beq.n	8003c3a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	4a69      	ldr	r2, [pc, #420]	; (8003d50 <I2C_Slave_STOPF+0x258>)
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fb4a 	bl	800224c <HAL_DMA_Abort_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03d      	beq.n	8003c3a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bcc:	e035      	b.n	8003c3a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fb98 	bl	800233c <HAL_DMA_GetState>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d014      	beq.n	8003c3c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <I2C_Slave_STOPF+0x258>)
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fb14 	bl	800224c <HAL_DMA_Abort_IT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
 8003c38:	e000      	b.n	8003c3c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c3a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03e      	beq.n	8003cc4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d112      	bne.n	8003c7a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d112      	bne.n	8003cae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0204 	orr.w	r2, r3, #4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8b7 	bl	8003e40 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cd2:	e039      	b.n	8003d48 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd8:	d109      	bne.n	8003cee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2228      	movs	r2, #40	; 0x28
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff f826 	bl	8002d3a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b28      	cmp	r3, #40	; 0x28
 8003cf8:	d111      	bne.n	8003d1e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <I2C_Slave_STOPF+0x25c>)
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff f825 	bl	8002d66 <HAL_I2C_ListenCpltCallback>
}
 8003d1c:	e014      	b.n	8003d48 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	2b22      	cmp	r3, #34	; 0x22
 8003d24:	d002      	beq.n	8003d2c <I2C_Slave_STOPF+0x234>
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b22      	cmp	r3, #34	; 0x22
 8003d2a:	d10d      	bne.n	8003d48 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe fff9 	bl	8002d3a <HAL_I2C_SlaveRxCpltCallback>
}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	080040a5 	.word	0x080040a5
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d002      	beq.n	8003d7a <I2C_Slave_AF+0x22>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d129      	bne.n	8003dce <I2C_Slave_AF+0x76>
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b28      	cmp	r3, #40	; 0x28
 8003d7e:	d126      	bne.n	8003dce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2e      	ldr	r2, [pc, #184]	; (8003e3c <I2C_Slave_AF+0xe4>)
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d94:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d9e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe ffcd 	bl	8002d66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003dcc:	e031      	b.n	8003e32 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	2b21      	cmp	r3, #33	; 0x21
 8003dd2:	d129      	bne.n	8003e28 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <I2C_Slave_AF+0xe4>)
 8003dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2221      	movs	r2, #33	; 0x21
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dfe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e08:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e18:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fd64 	bl	80028e8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fe ff81 	bl	8002d28 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e26:	e004      	b.n	8003e32 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e30:	615a      	str	r2, [r3, #20]
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	ffff0000 	.word	0xffff0000

08003e40 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d002      	beq.n	8003e64 <I2C_ITError+0x24>
 8003e5e:	7bbb      	ldrb	r3, [r7, #14]
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d10a      	bne.n	8003e7a <I2C_ITError+0x3a>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b22      	cmp	r3, #34	; 0x22
 8003e68:	d107      	bne.n	8003e7a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e78:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d107      	bne.n	8003e94 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2228      	movs	r2, #40	; 0x28
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e92:	e015      	b.n	8003ec0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea2:	d00a      	beq.n	8003eba <I2C_ITError+0x7a>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b60      	cmp	r3, #96	; 0x60
 8003ea8:	d007      	beq.n	8003eba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ece:	d162      	bne.n	8003f96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ede:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d020      	beq.n	8003f30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	; (800409c <I2C_ITError+0x25c>)
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe f9a6 	bl	800224c <HAL_DMA_Abort_IT>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 8089 	beq.w	800401a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4798      	blx	r3
 8003f2e:	e074      	b.n	800401a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	4a59      	ldr	r2, [pc, #356]	; (800409c <I2C_ITError+0x25c>)
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f985 	bl	800224c <HAL_DMA_Abort_IT>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d068      	beq.n	800401a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d10b      	bne.n	8003f6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f90:	4610      	mov	r0, r2
 8003f92:	4798      	blx	r3
 8003f94:	e041      	b.n	800401a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b60      	cmp	r3, #96	; 0x60
 8003fa0:	d125      	bne.n	8003fee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d10b      	bne.n	8003fd6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fee1 	bl	8002dae <HAL_I2C_AbortCpltCallback>
 8003fec:	e015      	b.n	800401a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d10b      	bne.n	8004014 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fe fec1 	bl	8002d9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10e      	bne.n	8004048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004056:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b04      	cmp	r3, #4
 800406a:	d113      	bne.n	8004094 <I2C_ITError+0x254>
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b28      	cmp	r3, #40	; 0x28
 8004070:	d110      	bne.n	8004094 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <I2C_ITError+0x260>)
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fe fe69 	bl	8002d66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	080040a5 	.word	0x080040a5
 80040a0:	ffff0000 	.word	0xffff0000

080040a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040be:	4b4b      	ldr	r3, [pc, #300]	; (80041ec <I2C_DMAAbort+0x148>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	08db      	lsrs	r3, r3, #3
 80040c4:	4a4a      	ldr	r2, [pc, #296]	; (80041f0 <I2C_DMAAbort+0x14c>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a1a      	lsrs	r2, r3, #8
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00da      	lsls	r2, r3, #3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040ea:	e00a      	b.n	8004102 <I2C_DMAAbort+0x5e>
    }
    count--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d0ea      	beq.n	80040d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2200      	movs	r2, #0
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	2200      	movs	r2, #0
 8004146:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2200      	movs	r2, #0
 8004156:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d10e      	bne.n	8004192 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7fe fe0f 	bl	8002dae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004190:	e027      	b.n	80041e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004198:	2b28      	cmp	r3, #40	; 0x28
 800419a:	d117      	bne.n	80041cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2228      	movs	r2, #40	; 0x28
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041ca:	e007      	b.n	80041dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041dc:	6978      	ldr	r0, [r7, #20]
 80041de:	f7fe fddd 	bl	8002d9c <HAL_I2C_ErrorCallback>
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000000 	.word	0x20000000
 80041f0:	14f8b589 	.word	0x14f8b589

080041f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004200:	4b13      	ldr	r3, [pc, #76]	; (8004250 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	08db      	lsrs	r3, r3, #3
 8004206:	4a13      	ldr	r2, [pc, #76]	; (8004254 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0a1a      	lsrs	r2, r3, #8
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e008      	b.n	8004244 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800423c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004240:	d0e9      	beq.n	8004216 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000000 	.word	0x20000000
 8004254:	14f8b589 	.word	0x14f8b589

08004258 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004268:	d103      	bne.n	8004272 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004270:	e007      	b.n	8004282 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800427a:	d102      	bne.n	8004282 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2208      	movs	r2, #8
 8004280:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e272      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8087 	beq.w	80043ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ac:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d00c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042b8:	4b8f      	ldr	r3, [pc, #572]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d112      	bne.n	80042ea <HAL_RCC_OscConfig+0x5e>
 80042c4:	4b8c      	ldr	r3, [pc, #560]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d10b      	bne.n	80042ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x12c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d168      	bne.n	80043b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e24c      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x76>
 80042f4:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a7f      	ldr	r2, [pc, #508]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e02e      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x98>
 800430a:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7a      	ldr	r2, [pc, #488]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b78      	ldr	r3, [pc, #480]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a77      	ldr	r2, [pc, #476]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800431c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0xbc>
 800432e:	4b72      	ldr	r3, [pc, #456]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a71      	ldr	r2, [pc, #452]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xd4>
 8004348:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6a      	ldr	r2, [pc, #424]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a67      	ldr	r2, [pc, #412]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800435e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd f9fc 	bl	8001764 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd f9f8 	bl	8001764 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e200      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xe4>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd f9e8 	bl	8001764 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd f9e4 	bl	8001764 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1ec      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x10c>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043d2:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d11c      	bne.n	8004418 <HAL_RCC_OscConfig+0x18c>
 80043de:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x176>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c0      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4939      	ldr	r1, [pc, #228]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e03a      	b.n	800448e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x270>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fd f99d 	bl	8001764 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fd f999 	bl	8001764 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1a1      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4927      	ldr	r1, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	e015      	b.n	800448e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x270>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd f97c 	bl	8001764 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004470:	f7fd f978 	bl	8001764 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e180      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03a      	beq.n	8004510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d019      	beq.n	80044d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <HAL_RCC_OscConfig+0x274>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a8:	f7fd f95c 	bl	8001764 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fd f958 	bl	8001764 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e160      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ce:	2001      	movs	r0, #1
 80044d0:	f000 face 	bl	8004a70 <RCC_Delay>
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_RCC_OscConfig+0x274>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fd f942 	bl	8001764 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e2:	e00f      	b.n	8004504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e4:	f7fd f93e 	bl	8001764 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d908      	bls.n	8004504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e146      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	42420000 	.word	0x42420000
 8004500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004504:	4b92      	ldr	r3, [pc, #584]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e9      	bne.n	80044e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a6 	beq.w	800466a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b8b      	ldr	r3, [pc, #556]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10d      	bne.n	800454a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4a87      	ldr	r2, [pc, #540]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	61d3      	str	r3, [r2, #28]
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b7f      	ldr	r3, [pc, #508]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7e      	ldr	r2, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fd f8ff 	bl	8001764 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fd f8fb 	bl	8001764 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e103      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b75      	ldr	r3, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x4c8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x312>
 8004590:	4b6f      	ldr	r3, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6213      	str	r3, [r2, #32]
 800459c:	e02d      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x334>
 80045a6:	4b6a      	ldr	r3, [pc, #424]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a69      	ldr	r2, [pc, #420]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	6213      	str	r3, [r2, #32]
 80045b2:	4b67      	ldr	r3, [pc, #412]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	4a66      	ldr	r2, [pc, #408]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	6213      	str	r3, [r2, #32]
 80045be:	e01c      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCC_OscConfig+0x356>
 80045c8:	4b61      	ldr	r3, [pc, #388]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4a60      	ldr	r2, [pc, #384]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	6213      	str	r3, [r2, #32]
 80045d4:	4b5e      	ldr	r3, [pc, #376]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4a5d      	ldr	r2, [pc, #372]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	e00b      	b.n	80045fa <HAL_RCC_OscConfig+0x36e>
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4a57      	ldr	r2, [pc, #348]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 0304 	bic.w	r3, r3, #4
 80045f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d015      	beq.n	800462e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fd f8af 	bl	8001764 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460a:	f7fd f8ab 	bl	8001764 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f241 3288 	movw	r2, #5000	; 0x1388
 8004618:	4293      	cmp	r3, r2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0b1      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	4b4b      	ldr	r3, [pc, #300]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0ee      	beq.n	800460a <HAL_RCC_OscConfig+0x37e>
 800462c:	e014      	b.n	8004658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fd f899 	bl	8001764 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004636:	f7fd f895 	bl	8001764 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	4293      	cmp	r3, r2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e09b      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	4b40      	ldr	r3, [pc, #256]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ee      	bne.n	8004636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d105      	bne.n	800466a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465e:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4a3b      	ldr	r2, [pc, #236]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8087 	beq.w	8004782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b08      	cmp	r3, #8
 800467e:	d061      	beq.n	8004744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d146      	bne.n	8004716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fd f869 	bl	8001764 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fd f865 	bl	8001764 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e06d      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d108      	bne.n	80046d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4921      	ldr	r1, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a19      	ldr	r1, [r3, #32]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	430b      	orrs	r3, r1
 80046e2:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fd f839 	bl	8001764 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fd f835 	bl	8001764 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e03d      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x46a>
 8004714:	e035      	b.n	8004782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_OscConfig+0x4cc>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd f822 	bl	8001764 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd f81e 	bl	8001764 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e026      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x498>
 8004742:	e01e      	b.n	8004782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e019      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
 8004750:	40021000 	.word	0x40021000
 8004754:	40007000 	.word	0x40007000
 8004758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_OscConfig+0x500>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	429a      	cmp	r2, r3
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0d0      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d910      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0207 	bic.w	r2, r3, #7
 80047ba:	4965      	ldr	r1, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800480e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d040      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d115      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484e:	4b41      	ldr	r3, [pc, #260]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e073      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	4b3d      	ldr	r3, [pc, #244]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06b      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f023 0203 	bic.w	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4936      	ldr	r1, [pc, #216]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004880:	f7fc ff70 	bl	8001764 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fc ff6c 	bl	8001764 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e053      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 020c 	and.w	r2, r3, #12
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d1eb      	bne.n	8004888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d210      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 0207 	bic.w	r2, r3, #7
 80048c6:	4922      	ldr	r1, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1cc>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1d0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fece 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40022000 	.word	0x40022000
 8004954:	40021000 	.word	0x40021000
 8004958:	0800856c 	.word	0x0800856c
 800495c:	20000000 	.word	0x20000000
 8004960:	20000004 	.word	0x20000004

08004964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	2300      	movs	r3, #0
 8004978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b04      	cmp	r3, #4
 800498c:	d002      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x30>
 800498e:	2b08      	cmp	r3, #8
 8004990:	d003      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x36>
 8004992:	e027      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004996:	613b      	str	r3, [r7, #16]
      break;
 8004998:	e027      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	0c9b      	lsrs	r3, r3, #18
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4a17      	ldr	r2, [pc, #92]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0c5b      	lsrs	r3, r3, #17
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	4a11      	ldr	r2, [pc, #68]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <HAL_RCC_GetSysClockFreq+0x98>)
 80049c6:	fb03 f202 	mul.w	r2, r3, r2
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e004      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	613b      	str	r3, [r7, #16]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <HAL_RCC_GetSysClockFreq+0x98>)
 80049e6:	613b      	str	r3, [r7, #16]
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	693b      	ldr	r3, [r7, #16]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	007a1200 	.word	0x007a1200
 8004a00:	08008584 	.word	0x08008584
 8004a04:	08008594 	.word	0x08008594
 8004a08:	003d0900 	.word	0x003d0900

08004a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a10:	4b02      	ldr	r3, [pc, #8]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a24:	f7ff fff2 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	0800857c 	.word	0x0800857c

08004a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a4c:	f7ff ffde 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0adb      	lsrs	r3, r3, #11
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800857c 	.word	0x0800857c

08004a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <RCC_Delay+0x34>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <RCC_Delay+0x38>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0a5b      	lsrs	r3, r3, #9
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a8c:	bf00      	nop
  }
  while (Delay --);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f9      	bne.n	8004a8c <RCC_Delay+0x1c>
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d07d      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004acc:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	61d3      	str	r3, [r2, #28]
 8004ae4:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af4:	4b46      	ldr	r3, [pc, #280]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d118      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0c:	f7fc fe2a 	bl	8001764 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b14:	f7fc fe26 	bl	8001764 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e06d      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02e      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d027      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b50:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b5a:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b66:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d014      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fc fdf5 	bl	8001764 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fc fdf1 	bl	8001764 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e036      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ee      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4917      	ldr	r1, [pc, #92]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	490b      	ldr	r1, [pc, #44]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	4904      	ldr	r1, [pc, #16]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42420440 	.word	0x42420440

08004c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e042      	b.n	8004cb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fc fba8 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2224      	movs	r2, #36	; 0x24
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fd71 	bl	8005744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d16d      	bne.n	8004db4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_UART_Transmit+0x2c>
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e066      	b.n	8004db6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2221      	movs	r2, #33	; 0x21
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fd35 	bl	8001764 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	88fa      	ldrh	r2, [r7, #6]
 8004d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d10:	d108      	bne.n	8004d24 <HAL_UART_Transmit+0x6c>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	e003      	b.n	8004d2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d2c:	e02a      	b.n	8004d84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 faf9 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e036      	b.n	8004db6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3302      	adds	r3, #2
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	e007      	b.n	8004d76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3301      	adds	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1cf      	bne.n	8004d2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fac9 	bl	8005330 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e006      	b.n	8004db6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e000      	b.n	8004db6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004db4:	2302      	movs	r3, #2
  }
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3720      	adds	r7, #32
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b0ba      	sub	sp, #232	; 0xe8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_UART_IRQHandler+0x66>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fbd1 	bl	80055c6 <UART_Receive_IT>
      return;
 8004e24:	e25b      	b.n	80052de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80de 	beq.w	8004fec <HAL_UART_IRQHandler+0x22c>
 8004e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80d1 	beq.w	8004fec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_UART_IRQHandler+0xae>
 8004e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <HAL_UART_IRQHandler+0xd2>
 8004e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f043 0202 	orr.w	r2, r3, #2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_UART_IRQHandler+0xf6>
 8004e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	f043 0204 	orr.w	r2, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x126>
 8004ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f043 0208 	orr.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 81f2 	beq.w	80052d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_UART_IRQHandler+0x14e>
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb5c 	bl	80055c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <HAL_UART_IRQHandler+0x17a>
 8004f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d04f      	beq.n	8004fda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa66 	bl	800540c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d041      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1d9      	bne.n	8004f4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d013      	beq.n	8004fca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	4a7e      	ldr	r2, [pc, #504]	; (80051a0 <HAL_UART_IRQHandler+0x3e0>)
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd f94c 	bl	800224c <HAL_DMA_Abort_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d016      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	e00e      	b.n	8004fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f99c 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	e00a      	b.n	8004fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f998 	bl	8005308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd8:	e006      	b.n	8004fe8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f994 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004fe6:	e175      	b.n	80052d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	bf00      	nop
    return;
 8004fea:	e173      	b.n	80052d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f040 814f 	bne.w	8005294 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8148 	beq.w	8005294 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8141 	beq.w	8005294 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80b6 	beq.w	80051a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8145 	beq.w	80052d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005056:	429a      	cmp	r2, r3
 8005058:	f080 813e 	bcs.w	80052d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005062:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b20      	cmp	r3, #32
 800506c:	f000 8088 	beq.w	8005180 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	330c      	adds	r3, #12
 8005076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800508a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800508e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800509c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1d9      	bne.n	8005070 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e1      	bne.n	80050bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3314      	adds	r3, #20
 80050fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3314      	adds	r3, #20
 8005118:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800511c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800511e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005122:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800512a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e3      	bne.n	80050f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800514e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005150:	f023 0310 	bic.w	r3, r3, #16
 8005154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005162:	65ba      	str	r2, [r7, #88]	; 0x58
 8005164:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e3      	bne.n	800513e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd f82b 	bl	80021d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800518e:	b29b      	uxth	r3, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8bf 	bl	800531a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800519c:	e09c      	b.n	80052d8 <HAL_UART_IRQHandler+0x518>
 800519e:	bf00      	nop
 80051a0:	080054d1 	.word	0x080054d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 808e 	beq.w	80052dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8089 	beq.w	80052dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051ee:	647a      	str	r2, [r7, #68]	; 0x44
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	623b      	str	r3, [r7, #32]
   return(result);
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005226:	633a      	str	r2, [r7, #48]	; 0x30
 8005228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800522c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e3      	bne.n	8005202 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	60fb      	str	r3, [r7, #12]
   return(result);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0310 	bic.w	r3, r3, #16
 800525e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800526c:	61fa      	str	r2, [r7, #28]
 800526e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	617b      	str	r3, [r7, #20]
   return(result);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e3      	bne.n	8005248 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f844 	bl	800531a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005292:	e023      	b.n	80052dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_UART_IRQHandler+0x4f4>
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f923 	bl	80054f8 <UART_Transmit_IT>
    return;
 80052b2:	e014      	b.n	80052de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00e      	beq.n	80052de <HAL_UART_IRQHandler+0x51e>
 80052c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f962 	bl	8005596 <UART_EndTransmit_IT>
    return;
 80052d2:	e004      	b.n	80052de <HAL_UART_IRQHandler+0x51e>
    return;
 80052d4:	bf00      	nop
 80052d6:	e002      	b.n	80052de <HAL_UART_IRQHandler+0x51e>
      return;
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_UART_IRQHandler+0x51e>
      return;
 80052dc:	bf00      	nop
  }
}
 80052de:	37e8      	adds	r7, #232	; 0xe8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b090      	sub	sp, #64	; 0x40
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	4613      	mov	r3, r2
 800533e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005340:	e050      	b.n	80053e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d04c      	beq.n	80053e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <UART_WaitOnFlagUntilTimeout+0x30>
 8005350:	f7fc fa08 	bl	8001764 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800535c:	429a      	cmp	r2, r3
 800535e:	d241      	bcs.n	80053e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005380:	637a      	str	r2, [r7, #52]	; 0x34
 8005382:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3314      	adds	r3, #20
 80053b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b4:	623a      	str	r2, [r7, #32]
 80053b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e00f      	b.n	8005404 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	4013      	ands	r3, r2
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d09f      	beq.n	8005342 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3740      	adds	r7, #64	; 0x40
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b095      	sub	sp, #84	; 0x54
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005434:	643a      	str	r2, [r7, #64]	; 0x40
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800543a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3314      	adds	r3, #20
 800544e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	61fb      	str	r3, [r7, #28]
   return(result);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3314      	adds	r3, #20
 8005466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005468:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800546e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e5      	bne.n	8005448 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	2b01      	cmp	r3, #1
 8005482:	d119      	bne.n	80054b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	60bb      	str	r3, [r7, #8]
   return(result);
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a4:	61ba      	str	r2, [r7, #24]
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6979      	ldr	r1, [r7, #20]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	613b      	str	r3, [r7, #16]
   return(result);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054c6:	bf00      	nop
 80054c8:	3754      	adds	r7, #84	; 0x54
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff ff0c 	bl	8005308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b21      	cmp	r3, #33	; 0x21
 800550a:	d13e      	bne.n	800558a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d114      	bne.n	8005540 <UART_Transmit_IT+0x48>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d110      	bne.n	8005540 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005532:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	1c9a      	adds	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]
 800553e:	e008      	b.n	8005552 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6211      	str	r1, [r2, #32]
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4619      	mov	r1, r3
 8005560:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005574:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005584:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff fe94 	bl	80052e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b08c      	sub	sp, #48	; 0x30
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b22      	cmp	r3, #34	; 0x22
 80055d8:	f040 80ae 	bne.w	8005738 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e4:	d117      	bne.n	8005616 <UART_Receive_IT+0x50>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d113      	bne.n	8005616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005604:	b29a      	uxth	r2, r3
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	1c9a      	adds	r2, r3, #2
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
 8005614:	e026      	b.n	8005664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005628:	d007      	beq.n	800563a <UART_Receive_IT+0x74>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <UART_Receive_IT+0x82>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e008      	b.n	800565a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005674:	2b00      	cmp	r3, #0
 8005676:	d15d      	bne.n	8005734 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0220 	bic.w	r2, r2, #32
 8005686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d135      	bne.n	800572a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0310 	bic.w	r3, r3, #16
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	623a      	str	r2, [r7, #32]
 80056e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b10      	cmp	r3, #16
 8005704:	d10a      	bne.n	800571c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fdf9 	bl	800531a <HAL_UARTEx_RxEventCallback>
 8005728:	e002      	b.n	8005730 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fde3 	bl	80052f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	e002      	b.n	800573a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	; 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800577e:	f023 030c 	bic.w	r3, r3, #12
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	430b      	orrs	r3, r1
 800578a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2c      	ldr	r2, [pc, #176]	; (8005858 <UART_SetConfig+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7ff f94c 	bl	8004a48 <HAL_RCC_GetPCLK2Freq>
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	e002      	b.n	80057ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057b4:	f7ff f934 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 80057b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009a      	lsls	r2, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	4a22      	ldr	r2, [pc, #136]	; (800585c <UART_SetConfig+0x118>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	0119      	lsls	r1, r3, #4
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009a      	lsls	r2, r3, #2
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80057f0:	4b1a      	ldr	r3, [pc, #104]	; (800585c <UART_SetConfig+0x118>)
 80057f2:	fba3 0302 	umull	r0, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2064      	movs	r0, #100	; 0x64
 80057fa:	fb00 f303 	mul.w	r3, r0, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	; 0x32
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <UART_SetConfig+0x118>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005810:	4419      	add	r1, r3
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009a      	lsls	r2, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	fbb2 f2f3 	udiv	r2, r2, r3
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <UART_SetConfig+0x118>)
 800582a:	fba3 0302 	umull	r0, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2064      	movs	r0, #100	; 0x64
 8005832:	fb00 f303 	mul.w	r3, r0, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	; 0x32
 800583c:	4a07      	ldr	r2, [pc, #28]	; (800585c <UART_SetConfig+0x118>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	440a      	add	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40013800 	.word	0x40013800
 800585c:	51eb851f 	.word	0x51eb851f

08005860 <__cvt>:
 8005860:	2b00      	cmp	r3, #0
 8005862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005866:	461f      	mov	r7, r3
 8005868:	bfbb      	ittet	lt
 800586a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800586e:	461f      	movlt	r7, r3
 8005870:	2300      	movge	r3, #0
 8005872:	232d      	movlt	r3, #45	; 0x2d
 8005874:	b088      	sub	sp, #32
 8005876:	4614      	mov	r4, r2
 8005878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800587a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800587c:	7013      	strb	r3, [r2, #0]
 800587e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005880:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005884:	f023 0820 	bic.w	r8, r3, #32
 8005888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800588c:	d005      	beq.n	800589a <__cvt+0x3a>
 800588e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005892:	d100      	bne.n	8005896 <__cvt+0x36>
 8005894:	3501      	adds	r5, #1
 8005896:	2302      	movs	r3, #2
 8005898:	e000      	b.n	800589c <__cvt+0x3c>
 800589a:	2303      	movs	r3, #3
 800589c:	aa07      	add	r2, sp, #28
 800589e:	9204      	str	r2, [sp, #16]
 80058a0:	aa06      	add	r2, sp, #24
 80058a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80058a6:	e9cd 3500 	strd	r3, r5, [sp]
 80058aa:	4622      	mov	r2, r4
 80058ac:	463b      	mov	r3, r7
 80058ae:	f000 fe73 	bl	8006598 <_dtoa_r>
 80058b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058b6:	4606      	mov	r6, r0
 80058b8:	d102      	bne.n	80058c0 <__cvt+0x60>
 80058ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058bc:	07db      	lsls	r3, r3, #31
 80058be:	d522      	bpl.n	8005906 <__cvt+0xa6>
 80058c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058c4:	eb06 0905 	add.w	r9, r6, r5
 80058c8:	d110      	bne.n	80058ec <__cvt+0x8c>
 80058ca:	7833      	ldrb	r3, [r6, #0]
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d10a      	bne.n	80058e6 <__cvt+0x86>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	4620      	mov	r0, r4
 80058d6:	4639      	mov	r1, r7
 80058d8:	f7fb f91a 	bl	8000b10 <__aeabi_dcmpeq>
 80058dc:	b918      	cbnz	r0, 80058e6 <__cvt+0x86>
 80058de:	f1c5 0501 	rsb	r5, r5, #1
 80058e2:	f8ca 5000 	str.w	r5, [sl]
 80058e6:	f8da 3000 	ldr.w	r3, [sl]
 80058ea:	4499      	add	r9, r3
 80058ec:	2200      	movs	r2, #0
 80058ee:	2300      	movs	r3, #0
 80058f0:	4620      	mov	r0, r4
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fb f90c 	bl	8000b10 <__aeabi_dcmpeq>
 80058f8:	b108      	cbz	r0, 80058fe <__cvt+0x9e>
 80058fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80058fe:	2230      	movs	r2, #48	; 0x30
 8005900:	9b07      	ldr	r3, [sp, #28]
 8005902:	454b      	cmp	r3, r9
 8005904:	d307      	bcc.n	8005916 <__cvt+0xb6>
 8005906:	4630      	mov	r0, r6
 8005908:	9b07      	ldr	r3, [sp, #28]
 800590a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800590c:	1b9b      	subs	r3, r3, r6
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	b008      	add	sp, #32
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	9107      	str	r1, [sp, #28]
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e7f0      	b.n	8005900 <__cvt+0xa0>

0800591e <__exponent>:
 800591e:	4603      	mov	r3, r0
 8005920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005922:	2900      	cmp	r1, #0
 8005924:	f803 2b02 	strb.w	r2, [r3], #2
 8005928:	bfb6      	itet	lt
 800592a:	222d      	movlt	r2, #45	; 0x2d
 800592c:	222b      	movge	r2, #43	; 0x2b
 800592e:	4249      	neglt	r1, r1
 8005930:	2909      	cmp	r1, #9
 8005932:	7042      	strb	r2, [r0, #1]
 8005934:	dd2a      	ble.n	800598c <__exponent+0x6e>
 8005936:	f10d 0207 	add.w	r2, sp, #7
 800593a:	4617      	mov	r7, r2
 800593c:	260a      	movs	r6, #10
 800593e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005942:	4694      	mov	ip, r2
 8005944:	fb06 1415 	mls	r4, r6, r5, r1
 8005948:	3430      	adds	r4, #48	; 0x30
 800594a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800594e:	460c      	mov	r4, r1
 8005950:	2c63      	cmp	r4, #99	; 0x63
 8005952:	4629      	mov	r1, r5
 8005954:	f102 32ff 	add.w	r2, r2, #4294967295
 8005958:	dcf1      	bgt.n	800593e <__exponent+0x20>
 800595a:	3130      	adds	r1, #48	; 0x30
 800595c:	f1ac 0402 	sub.w	r4, ip, #2
 8005960:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005964:	4622      	mov	r2, r4
 8005966:	1c41      	adds	r1, r0, #1
 8005968:	42ba      	cmp	r2, r7
 800596a:	d30a      	bcc.n	8005982 <__exponent+0x64>
 800596c:	f10d 0209 	add.w	r2, sp, #9
 8005970:	eba2 020c 	sub.w	r2, r2, ip
 8005974:	42bc      	cmp	r4, r7
 8005976:	bf88      	it	hi
 8005978:	2200      	movhi	r2, #0
 800597a:	4413      	add	r3, r2
 800597c:	1a18      	subs	r0, r3, r0
 800597e:	b003      	add	sp, #12
 8005980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005982:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005986:	f801 5f01 	strb.w	r5, [r1, #1]!
 800598a:	e7ed      	b.n	8005968 <__exponent+0x4a>
 800598c:	2330      	movs	r3, #48	; 0x30
 800598e:	3130      	adds	r1, #48	; 0x30
 8005990:	7083      	strb	r3, [r0, #2]
 8005992:	70c1      	strb	r1, [r0, #3]
 8005994:	1d03      	adds	r3, r0, #4
 8005996:	e7f1      	b.n	800597c <__exponent+0x5e>

08005998 <_printf_float>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	b091      	sub	sp, #68	; 0x44
 800599e:	460c      	mov	r4, r1
 80059a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80059a4:	4616      	mov	r6, r2
 80059a6:	461f      	mov	r7, r3
 80059a8:	4605      	mov	r5, r0
 80059aa:	f000 fce5 	bl	8006378 <_localeconv_r>
 80059ae:	6803      	ldr	r3, [r0, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	9309      	str	r3, [sp, #36]	; 0x24
 80059b4:	f7fa fbcc 	bl	8000150 <strlen>
 80059b8:	2300      	movs	r3, #0
 80059ba:	930e      	str	r3, [sp, #56]	; 0x38
 80059bc:	f8d8 3000 	ldr.w	r3, [r8]
 80059c0:	900a      	str	r0, [sp, #40]	; 0x28
 80059c2:	3307      	adds	r3, #7
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80059d0:	f8d4 b000 	ldr.w	fp, [r4]
 80059d4:	f8c8 2000 	str.w	r2, [r8]
 80059d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80059dc:	4652      	mov	r2, sl
 80059de:	4643      	mov	r3, r8
 80059e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80059e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	4650      	mov	r0, sl
 80059f0:	4b9c      	ldr	r3, [pc, #624]	; (8005c64 <_printf_float+0x2cc>)
 80059f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059f4:	f7fb f8be 	bl	8000b74 <__aeabi_dcmpun>
 80059f8:	bb70      	cbnz	r0, 8005a58 <_printf_float+0xc0>
 80059fa:	f04f 32ff 	mov.w	r2, #4294967295
 80059fe:	4650      	mov	r0, sl
 8005a00:	4b98      	ldr	r3, [pc, #608]	; (8005c64 <_printf_float+0x2cc>)
 8005a02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a04:	f7fb f898 	bl	8000b38 <__aeabi_dcmple>
 8005a08:	bb30      	cbnz	r0, 8005a58 <_printf_float+0xc0>
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	4650      	mov	r0, sl
 8005a10:	4641      	mov	r1, r8
 8005a12:	f7fb f887 	bl	8000b24 <__aeabi_dcmplt>
 8005a16:	b110      	cbz	r0, 8005a1e <_printf_float+0x86>
 8005a18:	232d      	movs	r3, #45	; 0x2d
 8005a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a1e:	4a92      	ldr	r2, [pc, #584]	; (8005c68 <_printf_float+0x2d0>)
 8005a20:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <_printf_float+0x2d4>)
 8005a22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a26:	bf94      	ite	ls
 8005a28:	4690      	movls	r8, r2
 8005a2a:	4698      	movhi	r8, r3
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f04f 0a00 	mov.w	sl, #0
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	f02b 0304 	bic.w	r3, fp, #4
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	4633      	mov	r3, r6
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9700      	str	r7, [sp, #0]
 8005a42:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a44:	f000 f9d6 	bl	8005df4 <_printf_common>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f040 8090 	bne.w	8005b6e <_printf_float+0x1d6>
 8005a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a52:	b011      	add	sp, #68	; 0x44
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	4652      	mov	r2, sl
 8005a5a:	4643      	mov	r3, r8
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4641      	mov	r1, r8
 8005a60:	f7fb f888 	bl	8000b74 <__aeabi_dcmpun>
 8005a64:	b148      	cbz	r0, 8005a7a <_printf_float+0xe2>
 8005a66:	f1b8 0f00 	cmp.w	r8, #0
 8005a6a:	bfb8      	it	lt
 8005a6c:	232d      	movlt	r3, #45	; 0x2d
 8005a6e:	4a80      	ldr	r2, [pc, #512]	; (8005c70 <_printf_float+0x2d8>)
 8005a70:	bfb8      	it	lt
 8005a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a76:	4b7f      	ldr	r3, [pc, #508]	; (8005c74 <_printf_float+0x2dc>)
 8005a78:	e7d3      	b.n	8005a22 <_printf_float+0x8a>
 8005a7a:	6863      	ldr	r3, [r4, #4]
 8005a7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	d142      	bne.n	8005b0a <_printf_float+0x172>
 8005a84:	2306      	movs	r3, #6
 8005a86:	6063      	str	r3, [r4, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	9206      	str	r2, [sp, #24]
 8005a8c:	aa0e      	add	r2, sp, #56	; 0x38
 8005a8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a92:	aa0d      	add	r2, sp, #52	; 0x34
 8005a94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a98:	9203      	str	r2, [sp, #12]
 8005a9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005aa2:	6023      	str	r3, [r4, #0]
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	4628      	mov	r0, r5
 8005aac:	4643      	mov	r3, r8
 8005aae:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ab0:	f7ff fed6 	bl	8005860 <__cvt>
 8005ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	2947      	cmp	r1, #71	; 0x47
 8005aba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005abc:	d108      	bne.n	8005ad0 <_printf_float+0x138>
 8005abe:	1cc8      	adds	r0, r1, #3
 8005ac0:	db02      	blt.n	8005ac8 <_printf_float+0x130>
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	dd40      	ble.n	8005b4a <_printf_float+0x1b2>
 8005ac8:	f1a9 0902 	sub.w	r9, r9, #2
 8005acc:	fa5f f989 	uxtb.w	r9, r9
 8005ad0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ad4:	d81f      	bhi.n	8005b16 <_printf_float+0x17e>
 8005ad6:	464a      	mov	r2, r9
 8005ad8:	3901      	subs	r1, #1
 8005ada:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ade:	910d      	str	r1, [sp, #52]	; 0x34
 8005ae0:	f7ff ff1d 	bl	800591e <__exponent>
 8005ae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	1813      	adds	r3, r2, r0
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	6123      	str	r3, [r4, #16]
 8005aee:	dc02      	bgt.n	8005af6 <_printf_float+0x15e>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	07d2      	lsls	r2, r2, #31
 8005af4:	d501      	bpl.n	8005afa <_printf_float+0x162>
 8005af6:	3301      	adds	r3, #1
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d09b      	beq.n	8005a3a <_printf_float+0xa2>
 8005b02:	232d      	movs	r3, #45	; 0x2d
 8005b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b08:	e797      	b.n	8005a3a <_printf_float+0xa2>
 8005b0a:	2947      	cmp	r1, #71	; 0x47
 8005b0c:	d1bc      	bne.n	8005a88 <_printf_float+0xf0>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1ba      	bne.n	8005a88 <_printf_float+0xf0>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7b7      	b.n	8005a86 <_printf_float+0xee>
 8005b16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b1a:	d118      	bne.n	8005b4e <_printf_float+0x1b6>
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	dd0b      	ble.n	8005b3a <_printf_float+0x1a2>
 8005b22:	6121      	str	r1, [r4, #16]
 8005b24:	b913      	cbnz	r3, 8005b2c <_printf_float+0x194>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	07d0      	lsls	r0, r2, #31
 8005b2a:	d502      	bpl.n	8005b32 <_printf_float+0x19a>
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	440b      	add	r3, r1
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	f04f 0a00 	mov.w	sl, #0
 8005b36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b38:	e7df      	b.n	8005afa <_printf_float+0x162>
 8005b3a:	b913      	cbnz	r3, 8005b42 <_printf_float+0x1aa>
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	07d2      	lsls	r2, r2, #31
 8005b40:	d501      	bpl.n	8005b46 <_printf_float+0x1ae>
 8005b42:	3302      	adds	r3, #2
 8005b44:	e7f4      	b.n	8005b30 <_printf_float+0x198>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e7f2      	b.n	8005b30 <_printf_float+0x198>
 8005b4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b50:	4299      	cmp	r1, r3
 8005b52:	db05      	blt.n	8005b60 <_printf_float+0x1c8>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	6121      	str	r1, [r4, #16]
 8005b58:	07d8      	lsls	r0, r3, #31
 8005b5a:	d5ea      	bpl.n	8005b32 <_printf_float+0x19a>
 8005b5c:	1c4b      	adds	r3, r1, #1
 8005b5e:	e7e7      	b.n	8005b30 <_printf_float+0x198>
 8005b60:	2900      	cmp	r1, #0
 8005b62:	bfcc      	ite	gt
 8005b64:	2201      	movgt	r2, #1
 8005b66:	f1c1 0202 	rsble	r2, r1, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	e7e0      	b.n	8005b30 <_printf_float+0x198>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	055a      	lsls	r2, r3, #21
 8005b72:	d407      	bmi.n	8005b84 <_printf_float+0x1ec>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	4642      	mov	r2, r8
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d12b      	bne.n	8005bda <_printf_float+0x242>
 8005b82:	e764      	b.n	8005a4e <_printf_float+0xb6>
 8005b84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b88:	f240 80dd 	bls.w	8005d46 <_printf_float+0x3ae>
 8005b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b90:	2200      	movs	r2, #0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f7fa ffbc 	bl	8000b10 <__aeabi_dcmpeq>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d033      	beq.n	8005c04 <_printf_float+0x26c>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	4a35      	ldr	r2, [pc, #212]	; (8005c78 <_printf_float+0x2e0>)
 8005ba4:	47b8      	blx	r7
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	f43f af51 	beq.w	8005a4e <_printf_float+0xb6>
 8005bac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	db02      	blt.n	8005bba <_printf_float+0x222>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	07d8      	lsls	r0, r3, #31
 8005bb8:	d50f      	bpl.n	8005bda <_printf_float+0x242>
 8005bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b8      	blx	r7
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f af42 	beq.w	8005a4e <_printf_float+0xb6>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	f104 091a 	add.w	r9, r4, #26
 8005bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	4543      	cmp	r3, r8
 8005bd8:	dc09      	bgt.n	8005bee <_printf_float+0x256>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	f100 8104 	bmi.w	8005dea <_printf_float+0x452>
 8005be2:	68e0      	ldr	r0, [r4, #12]
 8005be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005be6:	4298      	cmp	r0, r3
 8005be8:	bfb8      	it	lt
 8005bea:	4618      	movlt	r0, r3
 8005bec:	e731      	b.n	8005a52 <_printf_float+0xba>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f af28 	beq.w	8005a4e <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	e7e6      	b.n	8005bd2 <_printf_float+0x23a>
 8005c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	dc38      	bgt.n	8005c7c <_printf_float+0x2e4>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <_printf_float+0x2e0>)
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f af1a 	beq.w	8005a4e <_printf_float+0xb6>
 8005c1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d102      	bne.n	8005c28 <_printf_float+0x290>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	07d9      	lsls	r1, r3, #31
 8005c26:	d5d8      	bpl.n	8005bda <_printf_float+0x242>
 8005c28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c2c:	4631      	mov	r1, r6
 8005c2e:	4628      	mov	r0, r5
 8005c30:	47b8      	blx	r7
 8005c32:	3001      	adds	r0, #1
 8005c34:	f43f af0b 	beq.w	8005a4e <_printf_float+0xb6>
 8005c38:	f04f 0900 	mov.w	r9, #0
 8005c3c:	f104 0a1a 	add.w	sl, r4, #26
 8005c40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c42:	425b      	negs	r3, r3
 8005c44:	454b      	cmp	r3, r9
 8005c46:	dc01      	bgt.n	8005c4c <_printf_float+0x2b4>
 8005c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4a:	e794      	b.n	8005b76 <_printf_float+0x1de>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	4652      	mov	r2, sl
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	f43f aef9 	beq.w	8005a4e <_printf_float+0xb6>
 8005c5c:	f109 0901 	add.w	r9, r9, #1
 8005c60:	e7ee      	b.n	8005c40 <_printf_float+0x2a8>
 8005c62:	bf00      	nop
 8005c64:	7fefffff 	.word	0x7fefffff
 8005c68:	08008596 	.word	0x08008596
 8005c6c:	0800859a 	.word	0x0800859a
 8005c70:	0800859e 	.word	0x0800859e
 8005c74:	080085a2 	.word	0x080085a2
 8005c78:	080085a6 	.word	0x080085a6
 8005c7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bfa8      	it	ge
 8005c84:	461a      	movge	r2, r3
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	4691      	mov	r9, r2
 8005c8a:	dc37      	bgt.n	8005cfc <_printf_float+0x364>
 8005c8c:	f04f 0b00 	mov.w	fp, #0
 8005c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c94:	f104 021a 	add.w	r2, r4, #26
 8005c98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c9c:	ebaa 0309 	sub.w	r3, sl, r9
 8005ca0:	455b      	cmp	r3, fp
 8005ca2:	dc33      	bgt.n	8005d0c <_printf_float+0x374>
 8005ca4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	db3b      	blt.n	8005d24 <_printf_float+0x38c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07da      	lsls	r2, r3, #31
 8005cb0:	d438      	bmi.n	8005d24 <_printf_float+0x38c>
 8005cb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005cb6:	eba2 0903 	sub.w	r9, r2, r3
 8005cba:	eba2 020a 	sub.w	r2, r2, sl
 8005cbe:	4591      	cmp	r9, r2
 8005cc0:	bfa8      	it	ge
 8005cc2:	4691      	movge	r9, r2
 8005cc4:	f1b9 0f00 	cmp.w	r9, #0
 8005cc8:	dc34      	bgt.n	8005d34 <_printf_float+0x39c>
 8005cca:	f04f 0800 	mov.w	r8, #0
 8005cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cd2:	f104 0a1a 	add.w	sl, r4, #26
 8005cd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	eba3 0309 	sub.w	r3, r3, r9
 8005ce0:	4543      	cmp	r3, r8
 8005ce2:	f77f af7a 	ble.w	8005bda <_printf_float+0x242>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4631      	mov	r1, r6
 8005cec:	4628      	mov	r0, r5
 8005cee:	47b8      	blx	r7
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	f43f aeac 	beq.w	8005a4e <_printf_float+0xb6>
 8005cf6:	f108 0801 	add.w	r8, r8, #1
 8005cfa:	e7ec      	b.n	8005cd6 <_printf_float+0x33e>
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4642      	mov	r2, r8
 8005d02:	4628      	mov	r0, r5
 8005d04:	47b8      	blx	r7
 8005d06:	3001      	adds	r0, #1
 8005d08:	d1c0      	bne.n	8005c8c <_printf_float+0x2f4>
 8005d0a:	e6a0      	b.n	8005a4e <_printf_float+0xb6>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4628      	mov	r0, r5
 8005d12:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d14:	47b8      	blx	r7
 8005d16:	3001      	adds	r0, #1
 8005d18:	f43f ae99 	beq.w	8005a4e <_printf_float+0xb6>
 8005d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d1e:	f10b 0b01 	add.w	fp, fp, #1
 8005d22:	e7b9      	b.n	8005c98 <_printf_float+0x300>
 8005d24:	4631      	mov	r1, r6
 8005d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d1bf      	bne.n	8005cb2 <_printf_float+0x31a>
 8005d32:	e68c      	b.n	8005a4e <_printf_float+0xb6>
 8005d34:	464b      	mov	r3, r9
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	eb08 020a 	add.w	r2, r8, sl
 8005d3e:	47b8      	blx	r7
 8005d40:	3001      	adds	r0, #1
 8005d42:	d1c2      	bne.n	8005cca <_printf_float+0x332>
 8005d44:	e683      	b.n	8005a4e <_printf_float+0xb6>
 8005d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d48:	2a01      	cmp	r2, #1
 8005d4a:	dc01      	bgt.n	8005d50 <_printf_float+0x3b8>
 8005d4c:	07db      	lsls	r3, r3, #31
 8005d4e:	d539      	bpl.n	8005dc4 <_printf_float+0x42c>
 8005d50:	2301      	movs	r3, #1
 8005d52:	4642      	mov	r2, r8
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f ae77 	beq.w	8005a4e <_printf_float+0xb6>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b8      	blx	r7
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f ae6f 	beq.w	8005a4e <_printf_float+0xb6>
 8005d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005d7c:	f7fa fec8 	bl	8000b10 <__aeabi_dcmpeq>
 8005d80:	b9d8      	cbnz	r0, 8005dba <_printf_float+0x422>
 8005d82:	f109 33ff 	add.w	r3, r9, #4294967295
 8005d86:	f108 0201 	add.w	r2, r8, #1
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	d10e      	bne.n	8005db2 <_printf_float+0x41a>
 8005d94:	e65b      	b.n	8005a4e <_printf_float+0xb6>
 8005d96:	2301      	movs	r3, #1
 8005d98:	464a      	mov	r2, r9
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	f43f ae54 	beq.w	8005a4e <_printf_float+0xb6>
 8005da6:	f108 0801 	add.w	r8, r8, #1
 8005daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4543      	cmp	r3, r8
 8005db0:	dcf1      	bgt.n	8005d96 <_printf_float+0x3fe>
 8005db2:	4653      	mov	r3, sl
 8005db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005db8:	e6de      	b.n	8005b78 <_printf_float+0x1e0>
 8005dba:	f04f 0800 	mov.w	r8, #0
 8005dbe:	f104 091a 	add.w	r9, r4, #26
 8005dc2:	e7f2      	b.n	8005daa <_printf_float+0x412>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	e7df      	b.n	8005d8a <_printf_float+0x3f2>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	464a      	mov	r2, r9
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b8      	blx	r7
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f ae3a 	beq.w	8005a4e <_printf_float+0xb6>
 8005dda:	f108 0801 	add.w	r8, r8, #1
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005de2:	1a5b      	subs	r3, r3, r1
 8005de4:	4543      	cmp	r3, r8
 8005de6:	dcf0      	bgt.n	8005dca <_printf_float+0x432>
 8005de8:	e6fb      	b.n	8005be2 <_printf_float+0x24a>
 8005dea:	f04f 0800 	mov.w	r8, #0
 8005dee:	f104 0919 	add.w	r9, r4, #25
 8005df2:	e7f4      	b.n	8005dde <_printf_float+0x446>

08005df4 <_printf_common>:
 8005df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df8:	4616      	mov	r6, r2
 8005dfa:	4699      	mov	r9, r3
 8005dfc:	688a      	ldr	r2, [r1, #8]
 8005dfe:	690b      	ldr	r3, [r1, #16]
 8005e00:	4607      	mov	r7, r0
 8005e02:	4293      	cmp	r3, r2
 8005e04:	bfb8      	it	lt
 8005e06:	4613      	movlt	r3, r2
 8005e08:	6033      	str	r3, [r6, #0]
 8005e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e14:	b10a      	cbz	r2, 8005e1a <_printf_common+0x26>
 8005e16:	3301      	adds	r3, #1
 8005e18:	6033      	str	r3, [r6, #0]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	0699      	lsls	r1, r3, #26
 8005e1e:	bf42      	ittt	mi
 8005e20:	6833      	ldrmi	r3, [r6, #0]
 8005e22:	3302      	addmi	r3, #2
 8005e24:	6033      	strmi	r3, [r6, #0]
 8005e26:	6825      	ldr	r5, [r4, #0]
 8005e28:	f015 0506 	ands.w	r5, r5, #6
 8005e2c:	d106      	bne.n	8005e3c <_printf_common+0x48>
 8005e2e:	f104 0a19 	add.w	sl, r4, #25
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	6832      	ldr	r2, [r6, #0]
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	42ab      	cmp	r3, r5
 8005e3a:	dc2b      	bgt.n	8005e94 <_printf_common+0xa0>
 8005e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e40:	1e13      	subs	r3, r2, #0
 8005e42:	6822      	ldr	r2, [r4, #0]
 8005e44:	bf18      	it	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	0692      	lsls	r2, r2, #26
 8005e4a:	d430      	bmi.n	8005eae <_printf_common+0xba>
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d023      	beq.n	8005ea2 <_printf_common+0xae>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	f003 0306 	and.w	r3, r3, #6
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	bf14      	ite	ne
 8005e66:	2500      	movne	r5, #0
 8005e68:	6833      	ldreq	r3, [r6, #0]
 8005e6a:	f04f 0600 	mov.w	r6, #0
 8005e6e:	bf08      	it	eq
 8005e70:	68e5      	ldreq	r5, [r4, #12]
 8005e72:	f104 041a 	add.w	r4, r4, #26
 8005e76:	bf08      	it	eq
 8005e78:	1aed      	subeq	r5, r5, r3
 8005e7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e7e:	bf08      	it	eq
 8005e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bfc4      	itt	gt
 8005e88:	1a9b      	subgt	r3, r3, r2
 8005e8a:	18ed      	addgt	r5, r5, r3
 8005e8c:	42b5      	cmp	r5, r6
 8005e8e:	d11a      	bne.n	8005ec6 <_printf_common+0xd2>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e008      	b.n	8005ea6 <_printf_common+0xb2>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4652      	mov	r2, sl
 8005e98:	4649      	mov	r1, r9
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d103      	bne.n	8005eaa <_printf_common+0xb6>
 8005ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eaa:	3501      	adds	r5, #1
 8005eac:	e7c1      	b.n	8005e32 <_printf_common+0x3e>
 8005eae:	2030      	movs	r0, #48	; 0x30
 8005eb0:	18e1      	adds	r1, r4, r3
 8005eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ebc:	4422      	add	r2, r4
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec4:	e7c2      	b.n	8005e4c <_printf_common+0x58>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4649      	mov	r1, r9
 8005ecc:	4638      	mov	r0, r7
 8005ece:	47c0      	blx	r8
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d0e6      	beq.n	8005ea2 <_printf_common+0xae>
 8005ed4:	3601      	adds	r6, #1
 8005ed6:	e7d9      	b.n	8005e8c <_printf_common+0x98>

08005ed8 <_printf_i>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	7e0f      	ldrb	r7, [r1, #24]
 8005ede:	4691      	mov	r9, r2
 8005ee0:	2f78      	cmp	r7, #120	; 0x78
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	469a      	mov	sl, r3
 8005ee8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eee:	d807      	bhi.n	8005f00 <_printf_i+0x28>
 8005ef0:	2f62      	cmp	r7, #98	; 0x62
 8005ef2:	d80a      	bhi.n	8005f0a <_printf_i+0x32>
 8005ef4:	2f00      	cmp	r7, #0
 8005ef6:	f000 80d5 	beq.w	80060a4 <_printf_i+0x1cc>
 8005efa:	2f58      	cmp	r7, #88	; 0x58
 8005efc:	f000 80c1 	beq.w	8006082 <_printf_i+0x1aa>
 8005f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f08:	e03a      	b.n	8005f80 <_printf_i+0xa8>
 8005f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f0e:	2b15      	cmp	r3, #21
 8005f10:	d8f6      	bhi.n	8005f00 <_printf_i+0x28>
 8005f12:	a101      	add	r1, pc, #4	; (adr r1, 8005f18 <_printf_i+0x40>)
 8005f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f01 	.word	0x08005f01
 8005f24:	08005f01 	.word	0x08005f01
 8005f28:	08005f01 	.word	0x08005f01
 8005f2c:	08005f01 	.word	0x08005f01
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f01 	.word	0x08005f01
 8005f38:	08005f01 	.word	0x08005f01
 8005f3c:	08005f01 	.word	0x08005f01
 8005f40:	08005f01 	.word	0x08005f01
 8005f44:	0800608b 	.word	0x0800608b
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08006045 	.word	0x08006045
 8005f50:	08005f01 	.word	0x08005f01
 8005f54:	08005f01 	.word	0x08005f01
 8005f58:	080060ad 	.word	0x080060ad
 8005f5c:	08005f01 	.word	0x08005f01
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005f01 	.word	0x08005f01
 8005f68:	08005f01 	.word	0x08005f01
 8005f6c:	0800604d 	.word	0x0800604d
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	602a      	str	r2, [r5, #0]
 8005f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0a0      	b.n	80060c6 <_printf_i+0x1ee>
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	0607      	lsls	r7, r0, #24
 8005f8a:	f103 0104 	add.w	r1, r3, #4
 8005f8e:	6029      	str	r1, [r5, #0]
 8005f90:	d501      	bpl.n	8005f96 <_printf_i+0xbe>
 8005f92:	681e      	ldr	r6, [r3, #0]
 8005f94:	e003      	b.n	8005f9e <_printf_i+0xc6>
 8005f96:	0646      	lsls	r6, r0, #25
 8005f98:	d5fb      	bpl.n	8005f92 <_printf_i+0xba>
 8005f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	da03      	bge.n	8005faa <_printf_i+0xd2>
 8005fa2:	232d      	movs	r3, #45	; 0x2d
 8005fa4:	4276      	negs	r6, r6
 8005fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005faa:	230a      	movs	r3, #10
 8005fac:	4859      	ldr	r0, [pc, #356]	; (8006114 <_printf_i+0x23c>)
 8005fae:	e012      	b.n	8005fd6 <_printf_i+0xfe>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	6820      	ldr	r0, [r4, #0]
 8005fb4:	1d19      	adds	r1, r3, #4
 8005fb6:	6029      	str	r1, [r5, #0]
 8005fb8:	0605      	lsls	r5, r0, #24
 8005fba:	d501      	bpl.n	8005fc0 <_printf_i+0xe8>
 8005fbc:	681e      	ldr	r6, [r3, #0]
 8005fbe:	e002      	b.n	8005fc6 <_printf_i+0xee>
 8005fc0:	0641      	lsls	r1, r0, #25
 8005fc2:	d5fb      	bpl.n	8005fbc <_printf_i+0xe4>
 8005fc4:	881e      	ldrh	r6, [r3, #0]
 8005fc6:	2f6f      	cmp	r7, #111	; 0x6f
 8005fc8:	bf0c      	ite	eq
 8005fca:	2308      	moveq	r3, #8
 8005fcc:	230a      	movne	r3, #10
 8005fce:	4851      	ldr	r0, [pc, #324]	; (8006114 <_printf_i+0x23c>)
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fd6:	6865      	ldr	r5, [r4, #4]
 8005fd8:	2d00      	cmp	r5, #0
 8005fda:	bfa8      	it	ge
 8005fdc:	6821      	ldrge	r1, [r4, #0]
 8005fde:	60a5      	str	r5, [r4, #8]
 8005fe0:	bfa4      	itt	ge
 8005fe2:	f021 0104 	bicge.w	r1, r1, #4
 8005fe6:	6021      	strge	r1, [r4, #0]
 8005fe8:	b90e      	cbnz	r6, 8005fee <_printf_i+0x116>
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	d04b      	beq.n	8006086 <_printf_i+0x1ae>
 8005fee:	4615      	mov	r5, r2
 8005ff0:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ff4:	fb03 6711 	mls	r7, r3, r1, r6
 8005ff8:	5dc7      	ldrb	r7, [r0, r7]
 8005ffa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ffe:	4637      	mov	r7, r6
 8006000:	42bb      	cmp	r3, r7
 8006002:	460e      	mov	r6, r1
 8006004:	d9f4      	bls.n	8005ff0 <_printf_i+0x118>
 8006006:	2b08      	cmp	r3, #8
 8006008:	d10b      	bne.n	8006022 <_printf_i+0x14a>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	07de      	lsls	r6, r3, #31
 800600e:	d508      	bpl.n	8006022 <_printf_i+0x14a>
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	6861      	ldr	r1, [r4, #4]
 8006014:	4299      	cmp	r1, r3
 8006016:	bfde      	ittt	le
 8006018:	2330      	movle	r3, #48	; 0x30
 800601a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800601e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006022:	1b52      	subs	r2, r2, r5
 8006024:	6122      	str	r2, [r4, #16]
 8006026:	464b      	mov	r3, r9
 8006028:	4621      	mov	r1, r4
 800602a:	4640      	mov	r0, r8
 800602c:	f8cd a000 	str.w	sl, [sp]
 8006030:	aa03      	add	r2, sp, #12
 8006032:	f7ff fedf 	bl	8005df4 <_printf_common>
 8006036:	3001      	adds	r0, #1
 8006038:	d14a      	bne.n	80060d0 <_printf_i+0x1f8>
 800603a:	f04f 30ff 	mov.w	r0, #4294967295
 800603e:	b004      	add	sp, #16
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	2778      	movs	r7, #120	; 0x78
 800604e:	4832      	ldr	r0, [pc, #200]	; (8006118 <_printf_i+0x240>)
 8006050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	6829      	ldr	r1, [r5, #0]
 8006058:	061f      	lsls	r7, r3, #24
 800605a:	f851 6b04 	ldr.w	r6, [r1], #4
 800605e:	d402      	bmi.n	8006066 <_printf_i+0x18e>
 8006060:	065f      	lsls	r7, r3, #25
 8006062:	bf48      	it	mi
 8006064:	b2b6      	uxthmi	r6, r6
 8006066:	07df      	lsls	r7, r3, #31
 8006068:	bf48      	it	mi
 800606a:	f043 0320 	orrmi.w	r3, r3, #32
 800606e:	6029      	str	r1, [r5, #0]
 8006070:	bf48      	it	mi
 8006072:	6023      	strmi	r3, [r4, #0]
 8006074:	b91e      	cbnz	r6, 800607e <_printf_i+0x1a6>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	f023 0320 	bic.w	r3, r3, #32
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	2310      	movs	r3, #16
 8006080:	e7a6      	b.n	8005fd0 <_printf_i+0xf8>
 8006082:	4824      	ldr	r0, [pc, #144]	; (8006114 <_printf_i+0x23c>)
 8006084:	e7e4      	b.n	8006050 <_printf_i+0x178>
 8006086:	4615      	mov	r5, r2
 8006088:	e7bd      	b.n	8006006 <_printf_i+0x12e>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	6826      	ldr	r6, [r4, #0]
 800608e:	1d18      	adds	r0, r3, #4
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	6028      	str	r0, [r5, #0]
 8006094:	0635      	lsls	r5, r6, #24
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	d501      	bpl.n	800609e <_printf_i+0x1c6>
 800609a:	6019      	str	r1, [r3, #0]
 800609c:	e002      	b.n	80060a4 <_printf_i+0x1cc>
 800609e:	0670      	lsls	r0, r6, #25
 80060a0:	d5fb      	bpl.n	800609a <_printf_i+0x1c2>
 80060a2:	8019      	strh	r1, [r3, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	4615      	mov	r5, r2
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	e7bc      	b.n	8006026 <_printf_i+0x14e>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	2100      	movs	r1, #0
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	602a      	str	r2, [r5, #0]
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	4628      	mov	r0, r5
 80060ba:	f000 f9d4 	bl	8006466 <memchr>
 80060be:	b108      	cbz	r0, 80060c4 <_printf_i+0x1ec>
 80060c0:	1b40      	subs	r0, r0, r5
 80060c2:	6060      	str	r0, [r4, #4]
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	2300      	movs	r3, #0
 80060ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ce:	e7aa      	b.n	8006026 <_printf_i+0x14e>
 80060d0:	462a      	mov	r2, r5
 80060d2:	4649      	mov	r1, r9
 80060d4:	4640      	mov	r0, r8
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	47d0      	blx	sl
 80060da:	3001      	adds	r0, #1
 80060dc:	d0ad      	beq.n	800603a <_printf_i+0x162>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	079b      	lsls	r3, r3, #30
 80060e2:	d413      	bmi.n	800610c <_printf_i+0x234>
 80060e4:	68e0      	ldr	r0, [r4, #12]
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	4298      	cmp	r0, r3
 80060ea:	bfb8      	it	lt
 80060ec:	4618      	movlt	r0, r3
 80060ee:	e7a6      	b.n	800603e <_printf_i+0x166>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4632      	mov	r2, r6
 80060f4:	4649      	mov	r1, r9
 80060f6:	4640      	mov	r0, r8
 80060f8:	47d0      	blx	sl
 80060fa:	3001      	adds	r0, #1
 80060fc:	d09d      	beq.n	800603a <_printf_i+0x162>
 80060fe:	3501      	adds	r5, #1
 8006100:	68e3      	ldr	r3, [r4, #12]
 8006102:	9903      	ldr	r1, [sp, #12]
 8006104:	1a5b      	subs	r3, r3, r1
 8006106:	42ab      	cmp	r3, r5
 8006108:	dcf2      	bgt.n	80060f0 <_printf_i+0x218>
 800610a:	e7eb      	b.n	80060e4 <_printf_i+0x20c>
 800610c:	2500      	movs	r5, #0
 800610e:	f104 0619 	add.w	r6, r4, #25
 8006112:	e7f5      	b.n	8006100 <_printf_i+0x228>
 8006114:	080085a8 	.word	0x080085a8
 8006118:	080085b9 	.word	0x080085b9

0800611c <std>:
 800611c:	2300      	movs	r3, #0
 800611e:	b510      	push	{r4, lr}
 8006120:	4604      	mov	r4, r0
 8006122:	e9c0 3300 	strd	r3, r3, [r0]
 8006126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800612a:	6083      	str	r3, [r0, #8]
 800612c:	8181      	strh	r1, [r0, #12]
 800612e:	6643      	str	r3, [r0, #100]	; 0x64
 8006130:	81c2      	strh	r2, [r0, #14]
 8006132:	6183      	str	r3, [r0, #24]
 8006134:	4619      	mov	r1, r3
 8006136:	2208      	movs	r2, #8
 8006138:	305c      	adds	r0, #92	; 0x5c
 800613a:	f000 f914 	bl	8006366 <memset>
 800613e:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <std+0x58>)
 8006140:	6224      	str	r4, [r4, #32]
 8006142:	6263      	str	r3, [r4, #36]	; 0x24
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <std+0x5c>)
 8006146:	62a3      	str	r3, [r4, #40]	; 0x28
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <std+0x60>)
 800614a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <std+0x64>)
 800614e:	6323      	str	r3, [r4, #48]	; 0x30
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <std+0x68>)
 8006152:	429c      	cmp	r4, r3
 8006154:	d006      	beq.n	8006164 <std+0x48>
 8006156:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800615a:	4294      	cmp	r4, r2
 800615c:	d002      	beq.n	8006164 <std+0x48>
 800615e:	33d0      	adds	r3, #208	; 0xd0
 8006160:	429c      	cmp	r4, r3
 8006162:	d105      	bne.n	8006170 <std+0x54>
 8006164:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800616c:	f000 b978 	b.w	8006460 <__retarget_lock_init_recursive>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	bf00      	nop
 8006174:	080062e1 	.word	0x080062e1
 8006178:	08006303 	.word	0x08006303
 800617c:	0800633b 	.word	0x0800633b
 8006180:	0800635f 	.word	0x0800635f
 8006184:	20000334 	.word	0x20000334

08006188 <stdio_exit_handler>:
 8006188:	4a02      	ldr	r2, [pc, #8]	; (8006194 <stdio_exit_handler+0xc>)
 800618a:	4903      	ldr	r1, [pc, #12]	; (8006198 <stdio_exit_handler+0x10>)
 800618c:	4803      	ldr	r0, [pc, #12]	; (800619c <stdio_exit_handler+0x14>)
 800618e:	f000 b869 	b.w	8006264 <_fwalk_sglue>
 8006192:	bf00      	nop
 8006194:	2000000c 	.word	0x2000000c
 8006198:	08007dfd 	.word	0x08007dfd
 800619c:	20000018 	.word	0x20000018

080061a0 <cleanup_stdio>:
 80061a0:	6841      	ldr	r1, [r0, #4]
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <cleanup_stdio+0x34>)
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4299      	cmp	r1, r3
 80061a8:	4604      	mov	r4, r0
 80061aa:	d001      	beq.n	80061b0 <cleanup_stdio+0x10>
 80061ac:	f001 fe26 	bl	8007dfc <_fflush_r>
 80061b0:	68a1      	ldr	r1, [r4, #8]
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <cleanup_stdio+0x38>)
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d002      	beq.n	80061be <cleanup_stdio+0x1e>
 80061b8:	4620      	mov	r0, r4
 80061ba:	f001 fe1f 	bl	8007dfc <_fflush_r>
 80061be:	68e1      	ldr	r1, [r4, #12]
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <cleanup_stdio+0x3c>)
 80061c2:	4299      	cmp	r1, r3
 80061c4:	d004      	beq.n	80061d0 <cleanup_stdio+0x30>
 80061c6:	4620      	mov	r0, r4
 80061c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061cc:	f001 be16 	b.w	8007dfc <_fflush_r>
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	bf00      	nop
 80061d4:	20000334 	.word	0x20000334
 80061d8:	2000039c 	.word	0x2000039c
 80061dc:	20000404 	.word	0x20000404

080061e0 <global_stdio_init.part.0>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <global_stdio_init.part.0+0x30>)
 80061e4:	4c0b      	ldr	r4, [pc, #44]	; (8006214 <global_stdio_init.part.0+0x34>)
 80061e6:	4a0c      	ldr	r2, [pc, #48]	; (8006218 <global_stdio_init.part.0+0x38>)
 80061e8:	4620      	mov	r0, r4
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	2104      	movs	r1, #4
 80061ee:	2200      	movs	r2, #0
 80061f0:	f7ff ff94 	bl	800611c <std>
 80061f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80061f8:	2201      	movs	r2, #1
 80061fa:	2109      	movs	r1, #9
 80061fc:	f7ff ff8e 	bl	800611c <std>
 8006200:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006204:	2202      	movs	r2, #2
 8006206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800620a:	2112      	movs	r1, #18
 800620c:	f7ff bf86 	b.w	800611c <std>
 8006210:	2000046c 	.word	0x2000046c
 8006214:	20000334 	.word	0x20000334
 8006218:	08006189 	.word	0x08006189

0800621c <__sfp_lock_acquire>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__sfp_lock_acquire+0x8>)
 800621e:	f000 b920 	b.w	8006462 <__retarget_lock_acquire_recursive>
 8006222:	bf00      	nop
 8006224:	20000475 	.word	0x20000475

08006228 <__sfp_lock_release>:
 8006228:	4801      	ldr	r0, [pc, #4]	; (8006230 <__sfp_lock_release+0x8>)
 800622a:	f000 b91b 	b.w	8006464 <__retarget_lock_release_recursive>
 800622e:	bf00      	nop
 8006230:	20000475 	.word	0x20000475

08006234 <__sinit>:
 8006234:	b510      	push	{r4, lr}
 8006236:	4604      	mov	r4, r0
 8006238:	f7ff fff0 	bl	800621c <__sfp_lock_acquire>
 800623c:	6a23      	ldr	r3, [r4, #32]
 800623e:	b11b      	cbz	r3, 8006248 <__sinit+0x14>
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006244:	f7ff bff0 	b.w	8006228 <__sfp_lock_release>
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <__sinit+0x28>)
 800624a:	6223      	str	r3, [r4, #32]
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <__sinit+0x2c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f5      	bne.n	8006240 <__sinit+0xc>
 8006254:	f7ff ffc4 	bl	80061e0 <global_stdio_init.part.0>
 8006258:	e7f2      	b.n	8006240 <__sinit+0xc>
 800625a:	bf00      	nop
 800625c:	080061a1 	.word	0x080061a1
 8006260:	2000046c 	.word	0x2000046c

08006264 <_fwalk_sglue>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4607      	mov	r7, r0
 800626a:	4688      	mov	r8, r1
 800626c:	4614      	mov	r4, r2
 800626e:	2600      	movs	r6, #0
 8006270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006274:	f1b9 0901 	subs.w	r9, r9, #1
 8006278:	d505      	bpl.n	8006286 <_fwalk_sglue+0x22>
 800627a:	6824      	ldr	r4, [r4, #0]
 800627c:	2c00      	cmp	r4, #0
 800627e:	d1f7      	bne.n	8006270 <_fwalk_sglue+0xc>
 8006280:	4630      	mov	r0, r6
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d907      	bls.n	800629c <_fwalk_sglue+0x38>
 800628c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006290:	3301      	adds	r3, #1
 8006292:	d003      	beq.n	800629c <_fwalk_sglue+0x38>
 8006294:	4629      	mov	r1, r5
 8006296:	4638      	mov	r0, r7
 8006298:	47c0      	blx	r8
 800629a:	4306      	orrs	r6, r0
 800629c:	3568      	adds	r5, #104	; 0x68
 800629e:	e7e9      	b.n	8006274 <_fwalk_sglue+0x10>

080062a0 <siprintf>:
 80062a0:	b40e      	push	{r1, r2, r3}
 80062a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062a6:	b500      	push	{lr}
 80062a8:	b09c      	sub	sp, #112	; 0x70
 80062aa:	ab1d      	add	r3, sp, #116	; 0x74
 80062ac:	9002      	str	r0, [sp, #8]
 80062ae:	9006      	str	r0, [sp, #24]
 80062b0:	9107      	str	r1, [sp, #28]
 80062b2:	9104      	str	r1, [sp, #16]
 80062b4:	4808      	ldr	r0, [pc, #32]	; (80062d8 <siprintf+0x38>)
 80062b6:	4909      	ldr	r1, [pc, #36]	; (80062dc <siprintf+0x3c>)
 80062b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80062bc:	9105      	str	r1, [sp, #20]
 80062be:	6800      	ldr	r0, [r0, #0]
 80062c0:	a902      	add	r1, sp, #8
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	f001 fc1a 	bl	8007afc <_svfiprintf_r>
 80062c8:	2200      	movs	r2, #0
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	b01c      	add	sp, #112	; 0x70
 80062d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d4:	b003      	add	sp, #12
 80062d6:	4770      	bx	lr
 80062d8:	20000064 	.word	0x20000064
 80062dc:	ffff0208 	.word	0xffff0208

080062e0 <__sread>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e8:	f000 f86c 	bl	80063c4 <_read_r>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	bfab      	itete	ge
 80062f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062f2:	89a3      	ldrhlt	r3, [r4, #12]
 80062f4:	181b      	addge	r3, r3, r0
 80062f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062fa:	bfac      	ite	ge
 80062fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80062fe:	81a3      	strhlt	r3, [r4, #12]
 8006300:	bd10      	pop	{r4, pc}

08006302 <__swrite>:
 8006302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006306:	461f      	mov	r7, r3
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	4605      	mov	r5, r0
 800630c:	05db      	lsls	r3, r3, #23
 800630e:	460c      	mov	r4, r1
 8006310:	4616      	mov	r6, r2
 8006312:	d505      	bpl.n	8006320 <__swrite+0x1e>
 8006314:	2302      	movs	r3, #2
 8006316:	2200      	movs	r2, #0
 8006318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631c:	f000 f840 	bl	80063a0 <_lseek_r>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	4632      	mov	r2, r6
 8006324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006328:	81a3      	strh	r3, [r4, #12]
 800632a:	4628      	mov	r0, r5
 800632c:	463b      	mov	r3, r7
 800632e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006336:	f000 b857 	b.w	80063e8 <_write_r>

0800633a <__sseek>:
 800633a:	b510      	push	{r4, lr}
 800633c:	460c      	mov	r4, r1
 800633e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006342:	f000 f82d 	bl	80063a0 <_lseek_r>
 8006346:	1c43      	adds	r3, r0, #1
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	bf15      	itete	ne
 800634c:	6560      	strne	r0, [r4, #84]	; 0x54
 800634e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006356:	81a3      	strheq	r3, [r4, #12]
 8006358:	bf18      	it	ne
 800635a:	81a3      	strhne	r3, [r4, #12]
 800635c:	bd10      	pop	{r4, pc}

0800635e <__sclose>:
 800635e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006362:	f000 b80d 	b.w	8006380 <_close_r>

08006366 <memset>:
 8006366:	4603      	mov	r3, r0
 8006368:	4402      	add	r2, r0
 800636a:	4293      	cmp	r3, r2
 800636c:	d100      	bne.n	8006370 <memset+0xa>
 800636e:	4770      	bx	lr
 8006370:	f803 1b01 	strb.w	r1, [r3], #1
 8006374:	e7f9      	b.n	800636a <memset+0x4>
	...

08006378 <_localeconv_r>:
 8006378:	4800      	ldr	r0, [pc, #0]	; (800637c <_localeconv_r+0x4>)
 800637a:	4770      	bx	lr
 800637c:	20000158 	.word	0x20000158

08006380 <_close_r>:
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	2300      	movs	r3, #0
 8006384:	4d05      	ldr	r5, [pc, #20]	; (800639c <_close_r+0x1c>)
 8006386:	4604      	mov	r4, r0
 8006388:	4608      	mov	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fb f900 	bl	8001590 <_close>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d102      	bne.n	800639a <_close_r+0x1a>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	b103      	cbz	r3, 800639a <_close_r+0x1a>
 8006398:	6023      	str	r3, [r4, #0]
 800639a:	bd38      	pop	{r3, r4, r5, pc}
 800639c:	20000470 	.word	0x20000470

080063a0 <_lseek_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	2200      	movs	r2, #0
 80063aa:	4d05      	ldr	r5, [pc, #20]	; (80063c0 <_lseek_r+0x20>)
 80063ac:	602a      	str	r2, [r5, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fb f912 	bl	80015d8 <_lseek>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_lseek_r+0x1e>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	b103      	cbz	r3, 80063be <_lseek_r+0x1e>
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	20000470 	.word	0x20000470

080063c4 <_read_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4604      	mov	r4, r0
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	2200      	movs	r2, #0
 80063ce:	4d05      	ldr	r5, [pc, #20]	; (80063e4 <_read_r+0x20>)
 80063d0:	602a      	str	r2, [r5, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f7fb f8a3 	bl	800151e <_read>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_read_r+0x1e>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_read_r+0x1e>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	20000470 	.word	0x20000470

080063e8 <_write_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	2200      	movs	r2, #0
 80063f2:	4d05      	ldr	r5, [pc, #20]	; (8006408 <_write_r+0x20>)
 80063f4:	602a      	str	r2, [r5, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f7fb f8ae 	bl	8001558 <_write>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_write_r+0x1e>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	b103      	cbz	r3, 8006406 <_write_r+0x1e>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	20000470 	.word	0x20000470

0800640c <__errno>:
 800640c:	4b01      	ldr	r3, [pc, #4]	; (8006414 <__errno+0x8>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000064 	.word	0x20000064

08006418 <__libc_init_array>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	2600      	movs	r6, #0
 800641c:	4d0c      	ldr	r5, [pc, #48]	; (8006450 <__libc_init_array+0x38>)
 800641e:	4c0d      	ldr	r4, [pc, #52]	; (8006454 <__libc_init_array+0x3c>)
 8006420:	1b64      	subs	r4, r4, r5
 8006422:	10a4      	asrs	r4, r4, #2
 8006424:	42a6      	cmp	r6, r4
 8006426:	d109      	bne.n	800643c <__libc_init_array+0x24>
 8006428:	f002 f888 	bl	800853c <_init>
 800642c:	2600      	movs	r6, #0
 800642e:	4d0a      	ldr	r5, [pc, #40]	; (8006458 <__libc_init_array+0x40>)
 8006430:	4c0a      	ldr	r4, [pc, #40]	; (800645c <__libc_init_array+0x44>)
 8006432:	1b64      	subs	r4, r4, r5
 8006434:	10a4      	asrs	r4, r4, #2
 8006436:	42a6      	cmp	r6, r4
 8006438:	d105      	bne.n	8006446 <__libc_init_array+0x2e>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006440:	4798      	blx	r3
 8006442:	3601      	adds	r6, #1
 8006444:	e7ee      	b.n	8006424 <__libc_init_array+0xc>
 8006446:	f855 3b04 	ldr.w	r3, [r5], #4
 800644a:	4798      	blx	r3
 800644c:	3601      	adds	r6, #1
 800644e:	e7f2      	b.n	8006436 <__libc_init_array+0x1e>
 8006450:	08008904 	.word	0x08008904
 8006454:	08008904 	.word	0x08008904
 8006458:	08008904 	.word	0x08008904
 800645c:	08008908 	.word	0x08008908

08006460 <__retarget_lock_init_recursive>:
 8006460:	4770      	bx	lr

08006462 <__retarget_lock_acquire_recursive>:
 8006462:	4770      	bx	lr

08006464 <__retarget_lock_release_recursive>:
 8006464:	4770      	bx	lr

08006466 <memchr>:
 8006466:	4603      	mov	r3, r0
 8006468:	b510      	push	{r4, lr}
 800646a:	b2c9      	uxtb	r1, r1
 800646c:	4402      	add	r2, r0
 800646e:	4293      	cmp	r3, r2
 8006470:	4618      	mov	r0, r3
 8006472:	d101      	bne.n	8006478 <memchr+0x12>
 8006474:	2000      	movs	r0, #0
 8006476:	e003      	b.n	8006480 <memchr+0x1a>
 8006478:	7804      	ldrb	r4, [r0, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	428c      	cmp	r4, r1
 800647e:	d1f6      	bne.n	800646e <memchr+0x8>
 8006480:	bd10      	pop	{r4, pc}

08006482 <quorem>:
 8006482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006486:	6903      	ldr	r3, [r0, #16]
 8006488:	690c      	ldr	r4, [r1, #16]
 800648a:	4607      	mov	r7, r0
 800648c:	42a3      	cmp	r3, r4
 800648e:	db7f      	blt.n	8006590 <quorem+0x10e>
 8006490:	3c01      	subs	r4, #1
 8006492:	f100 0514 	add.w	r5, r0, #20
 8006496:	f101 0814 	add.w	r8, r1, #20
 800649a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a8:	3301      	adds	r3, #1
 80064aa:	429a      	cmp	r2, r3
 80064ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064b8:	d331      	bcc.n	800651e <quorem+0x9c>
 80064ba:	f04f 0e00 	mov.w	lr, #0
 80064be:	4640      	mov	r0, r8
 80064c0:	46ac      	mov	ip, r5
 80064c2:	46f2      	mov	sl, lr
 80064c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c8:	b293      	uxth	r3, r2
 80064ca:	fb06 e303 	mla	r3, r6, r3, lr
 80064ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064d2:	0c1a      	lsrs	r2, r3, #16
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	fb06 220e 	mla	r2, r6, lr, r2
 80064da:	ebaa 0303 	sub.w	r3, sl, r3
 80064de:	f8dc a000 	ldr.w	sl, [ip]
 80064e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064e6:	fa1f fa8a 	uxth.w	sl, sl
 80064ea:	4453      	add	r3, sl
 80064ec:	f8dc a000 	ldr.w	sl, [ip]
 80064f0:	b292      	uxth	r2, r2
 80064f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006500:	4581      	cmp	r9, r0
 8006502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006506:	f84c 3b04 	str.w	r3, [ip], #4
 800650a:	d2db      	bcs.n	80064c4 <quorem+0x42>
 800650c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006510:	b92b      	cbnz	r3, 800651e <quorem+0x9c>
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	3b04      	subs	r3, #4
 8006516:	429d      	cmp	r5, r3
 8006518:	461a      	mov	r2, r3
 800651a:	d32d      	bcc.n	8006578 <quorem+0xf6>
 800651c:	613c      	str	r4, [r7, #16]
 800651e:	4638      	mov	r0, r7
 8006520:	f001 f994 	bl	800784c <__mcmp>
 8006524:	2800      	cmp	r0, #0
 8006526:	db23      	blt.n	8006570 <quorem+0xee>
 8006528:	4629      	mov	r1, r5
 800652a:	2000      	movs	r0, #0
 800652c:	3601      	adds	r6, #1
 800652e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006532:	f8d1 c000 	ldr.w	ip, [r1]
 8006536:	b293      	uxth	r3, r2
 8006538:	1ac3      	subs	r3, r0, r3
 800653a:	0c12      	lsrs	r2, r2, #16
 800653c:	fa1f f08c 	uxth.w	r0, ip
 8006540:	4403      	add	r3, r0
 8006542:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006546:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800654a:	b29b      	uxth	r3, r3
 800654c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006550:	45c1      	cmp	r9, r8
 8006552:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006556:	f841 3b04 	str.w	r3, [r1], #4
 800655a:	d2e8      	bcs.n	800652e <quorem+0xac>
 800655c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006564:	b922      	cbnz	r2, 8006570 <quorem+0xee>
 8006566:	3b04      	subs	r3, #4
 8006568:	429d      	cmp	r5, r3
 800656a:	461a      	mov	r2, r3
 800656c:	d30a      	bcc.n	8006584 <quorem+0x102>
 800656e:	613c      	str	r4, [r7, #16]
 8006570:	4630      	mov	r0, r6
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	3b04      	subs	r3, #4
 800657c:	2a00      	cmp	r2, #0
 800657e:	d1cd      	bne.n	800651c <quorem+0x9a>
 8006580:	3c01      	subs	r4, #1
 8006582:	e7c8      	b.n	8006516 <quorem+0x94>
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	3b04      	subs	r3, #4
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1f0      	bne.n	800656e <quorem+0xec>
 800658c:	3c01      	subs	r4, #1
 800658e:	e7eb      	b.n	8006568 <quorem+0xe6>
 8006590:	2000      	movs	r0, #0
 8006592:	e7ee      	b.n	8006572 <quorem+0xf0>
 8006594:	0000      	movs	r0, r0
	...

08006598 <_dtoa_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	4616      	mov	r6, r2
 800659e:	461f      	mov	r7, r3
 80065a0:	69c4      	ldr	r4, [r0, #28]
 80065a2:	b099      	sub	sp, #100	; 0x64
 80065a4:	4605      	mov	r5, r0
 80065a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065ae:	b974      	cbnz	r4, 80065ce <_dtoa_r+0x36>
 80065b0:	2010      	movs	r0, #16
 80065b2:	f000 fe1d 	bl	80071f0 <malloc>
 80065b6:	4602      	mov	r2, r0
 80065b8:	61e8      	str	r0, [r5, #28]
 80065ba:	b920      	cbnz	r0, 80065c6 <_dtoa_r+0x2e>
 80065bc:	21ef      	movs	r1, #239	; 0xef
 80065be:	4bac      	ldr	r3, [pc, #688]	; (8006870 <_dtoa_r+0x2d8>)
 80065c0:	48ac      	ldr	r0, [pc, #688]	; (8006874 <_dtoa_r+0x2dc>)
 80065c2:	f001 fc7b 	bl	8007ebc <__assert_func>
 80065c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065ca:	6004      	str	r4, [r0, #0]
 80065cc:	60c4      	str	r4, [r0, #12]
 80065ce:	69eb      	ldr	r3, [r5, #28]
 80065d0:	6819      	ldr	r1, [r3, #0]
 80065d2:	b151      	cbz	r1, 80065ea <_dtoa_r+0x52>
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	2301      	movs	r3, #1
 80065d8:	4093      	lsls	r3, r2
 80065da:	604a      	str	r2, [r1, #4]
 80065dc:	608b      	str	r3, [r1, #8]
 80065de:	4628      	mov	r0, r5
 80065e0:	f000 fefa 	bl	80073d8 <_Bfree>
 80065e4:	2200      	movs	r2, #0
 80065e6:	69eb      	ldr	r3, [r5, #28]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	1e3b      	subs	r3, r7, #0
 80065ec:	bfaf      	iteee	ge
 80065ee:	2300      	movge	r3, #0
 80065f0:	2201      	movlt	r2, #1
 80065f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	9305      	strlt	r3, [sp, #20]
 80065f8:	bfa8      	it	ge
 80065fa:	f8c8 3000 	strge.w	r3, [r8]
 80065fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006602:	4b9d      	ldr	r3, [pc, #628]	; (8006878 <_dtoa_r+0x2e0>)
 8006604:	bfb8      	it	lt
 8006606:	f8c8 2000 	strlt.w	r2, [r8]
 800660a:	ea33 0309 	bics.w	r3, r3, r9
 800660e:	d119      	bne.n	8006644 <_dtoa_r+0xac>
 8006610:	f242 730f 	movw	r3, #9999	; 0x270f
 8006614:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800661c:	4333      	orrs	r3, r6
 800661e:	f000 8589 	beq.w	8007134 <_dtoa_r+0xb9c>
 8006622:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006624:	b953      	cbnz	r3, 800663c <_dtoa_r+0xa4>
 8006626:	4b95      	ldr	r3, [pc, #596]	; (800687c <_dtoa_r+0x2e4>)
 8006628:	e023      	b.n	8006672 <_dtoa_r+0xda>
 800662a:	4b95      	ldr	r3, [pc, #596]	; (8006880 <_dtoa_r+0x2e8>)
 800662c:	9303      	str	r3, [sp, #12]
 800662e:	3308      	adds	r3, #8
 8006630:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	9803      	ldr	r0, [sp, #12]
 8006636:	b019      	add	sp, #100	; 0x64
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	4b8f      	ldr	r3, [pc, #572]	; (800687c <_dtoa_r+0x2e4>)
 800663e:	9303      	str	r3, [sp, #12]
 8006640:	3303      	adds	r3, #3
 8006642:	e7f5      	b.n	8006630 <_dtoa_r+0x98>
 8006644:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006648:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800664c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006650:	2200      	movs	r2, #0
 8006652:	2300      	movs	r3, #0
 8006654:	f7fa fa5c 	bl	8000b10 <__aeabi_dcmpeq>
 8006658:	4680      	mov	r8, r0
 800665a:	b160      	cbz	r0, 8006676 <_dtoa_r+0xde>
 800665c:	2301      	movs	r3, #1
 800665e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 8562 	beq.w	800712e <_dtoa_r+0xb96>
 800666a:	4b86      	ldr	r3, [pc, #536]	; (8006884 <_dtoa_r+0x2ec>)
 800666c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	3b01      	subs	r3, #1
 8006672:	9303      	str	r3, [sp, #12]
 8006674:	e7de      	b.n	8006634 <_dtoa_r+0x9c>
 8006676:	ab16      	add	r3, sp, #88	; 0x58
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	ab17      	add	r3, sp, #92	; 0x5c
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	4628      	mov	r0, r5
 8006680:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006684:	f001 f98a 	bl	800799c <__d2b>
 8006688:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800668c:	4682      	mov	sl, r0
 800668e:	2c00      	cmp	r4, #0
 8006690:	d07e      	beq.n	8006790 <_dtoa_r+0x1f8>
 8006692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006698:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800669c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80066a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80066a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066ac:	4619      	mov	r1, r3
 80066ae:	2200      	movs	r2, #0
 80066b0:	4b75      	ldr	r3, [pc, #468]	; (8006888 <_dtoa_r+0x2f0>)
 80066b2:	f7f9 fe0d 	bl	80002d0 <__aeabi_dsub>
 80066b6:	a368      	add	r3, pc, #416	; (adr r3, 8006858 <_dtoa_r+0x2c0>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7f9 ffc0 	bl	8000640 <__aeabi_dmul>
 80066c0:	a367      	add	r3, pc, #412	; (adr r3, 8006860 <_dtoa_r+0x2c8>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fe05 	bl	80002d4 <__adddf3>
 80066ca:	4606      	mov	r6, r0
 80066cc:	4620      	mov	r0, r4
 80066ce:	460f      	mov	r7, r1
 80066d0:	f7f9 ff4c 	bl	800056c <__aeabi_i2d>
 80066d4:	a364      	add	r3, pc, #400	; (adr r3, 8006868 <_dtoa_r+0x2d0>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 ffb1 	bl	8000640 <__aeabi_dmul>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fdf5 	bl	80002d4 <__adddf3>
 80066ea:	4606      	mov	r6, r0
 80066ec:	460f      	mov	r7, r1
 80066ee:	f7fa fa57 	bl	8000ba0 <__aeabi_d2iz>
 80066f2:	2200      	movs	r2, #0
 80066f4:	4683      	mov	fp, r0
 80066f6:	2300      	movs	r3, #0
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa fa12 	bl	8000b24 <__aeabi_dcmplt>
 8006700:	b148      	cbz	r0, 8006716 <_dtoa_r+0x17e>
 8006702:	4658      	mov	r0, fp
 8006704:	f7f9 ff32 	bl	800056c <__aeabi_i2d>
 8006708:	4632      	mov	r2, r6
 800670a:	463b      	mov	r3, r7
 800670c:	f7fa fa00 	bl	8000b10 <__aeabi_dcmpeq>
 8006710:	b908      	cbnz	r0, 8006716 <_dtoa_r+0x17e>
 8006712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006716:	f1bb 0f16 	cmp.w	fp, #22
 800671a:	d857      	bhi.n	80067cc <_dtoa_r+0x234>
 800671c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006720:	4b5a      	ldr	r3, [pc, #360]	; (800688c <_dtoa_r+0x2f4>)
 8006722:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7fa f9fb 	bl	8000b24 <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d04e      	beq.n	80067d0 <_dtoa_r+0x238>
 8006732:	2300      	movs	r3, #0
 8006734:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006738:	930f      	str	r3, [sp, #60]	; 0x3c
 800673a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800673c:	1b1b      	subs	r3, r3, r4
 800673e:	1e5a      	subs	r2, r3, #1
 8006740:	bf46      	itte	mi
 8006742:	f1c3 0901 	rsbmi	r9, r3, #1
 8006746:	2300      	movmi	r3, #0
 8006748:	f04f 0900 	movpl.w	r9, #0
 800674c:	9209      	str	r2, [sp, #36]	; 0x24
 800674e:	bf48      	it	mi
 8006750:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006752:	f1bb 0f00 	cmp.w	fp, #0
 8006756:	db3d      	blt.n	80067d4 <_dtoa_r+0x23c>
 8006758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800675e:	445b      	add	r3, fp
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	2300      	movs	r3, #0
 8006764:	930a      	str	r3, [sp, #40]	; 0x28
 8006766:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006768:	2b09      	cmp	r3, #9
 800676a:	d867      	bhi.n	800683c <_dtoa_r+0x2a4>
 800676c:	2b05      	cmp	r3, #5
 800676e:	bfc4      	itt	gt
 8006770:	3b04      	subgt	r3, #4
 8006772:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006774:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006776:	bfc8      	it	gt
 8006778:	2400      	movgt	r4, #0
 800677a:	f1a3 0302 	sub.w	r3, r3, #2
 800677e:	bfd8      	it	le
 8006780:	2401      	movle	r4, #1
 8006782:	2b03      	cmp	r3, #3
 8006784:	f200 8086 	bhi.w	8006894 <_dtoa_r+0x2fc>
 8006788:	e8df f003 	tbb	[pc, r3]
 800678c:	5637392c 	.word	0x5637392c
 8006790:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006794:	441c      	add	r4, r3
 8006796:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800679a:	2b20      	cmp	r3, #32
 800679c:	bfc1      	itttt	gt
 800679e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067a2:	fa09 f903 	lslgt.w	r9, r9, r3
 80067a6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80067aa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80067ae:	bfd6      	itet	le
 80067b0:	f1c3 0320 	rsble	r3, r3, #32
 80067b4:	ea49 0003 	orrgt.w	r0, r9, r3
 80067b8:	fa06 f003 	lslle.w	r0, r6, r3
 80067bc:	f7f9 fec6 	bl	800054c <__aeabi_ui2d>
 80067c0:	2201      	movs	r2, #1
 80067c2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80067c6:	3c01      	subs	r4, #1
 80067c8:	9213      	str	r2, [sp, #76]	; 0x4c
 80067ca:	e76f      	b.n	80066ac <_dtoa_r+0x114>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7b3      	b.n	8006738 <_dtoa_r+0x1a0>
 80067d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80067d2:	e7b2      	b.n	800673a <_dtoa_r+0x1a2>
 80067d4:	f1cb 0300 	rsb	r3, fp, #0
 80067d8:	930a      	str	r3, [sp, #40]	; 0x28
 80067da:	2300      	movs	r3, #0
 80067dc:	eba9 090b 	sub.w	r9, r9, fp
 80067e0:	930e      	str	r3, [sp, #56]	; 0x38
 80067e2:	e7c0      	b.n	8006766 <_dtoa_r+0x1ce>
 80067e4:	2300      	movs	r3, #0
 80067e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dc55      	bgt.n	800689a <_dtoa_r+0x302>
 80067ee:	2301      	movs	r3, #1
 80067f0:	461a      	mov	r2, r3
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	9223      	str	r2, [sp, #140]	; 0x8c
 80067f8:	e00b      	b.n	8006812 <_dtoa_r+0x27a>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7f3      	b.n	80067e6 <_dtoa_r+0x24e>
 80067fe:	2300      	movs	r3, #0
 8006800:	930b      	str	r3, [sp, #44]	; 0x2c
 8006802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006804:	445b      	add	r3, fp
 8006806:	9306      	str	r3, [sp, #24]
 8006808:	3301      	adds	r3, #1
 800680a:	2b01      	cmp	r3, #1
 800680c:	9308      	str	r3, [sp, #32]
 800680e:	bfb8      	it	lt
 8006810:	2301      	movlt	r3, #1
 8006812:	2100      	movs	r1, #0
 8006814:	2204      	movs	r2, #4
 8006816:	69e8      	ldr	r0, [r5, #28]
 8006818:	f102 0614 	add.w	r6, r2, #20
 800681c:	429e      	cmp	r6, r3
 800681e:	d940      	bls.n	80068a2 <_dtoa_r+0x30a>
 8006820:	6041      	str	r1, [r0, #4]
 8006822:	4628      	mov	r0, r5
 8006824:	f000 fd98 	bl	8007358 <_Balloc>
 8006828:	9003      	str	r0, [sp, #12]
 800682a:	2800      	cmp	r0, #0
 800682c:	d13c      	bne.n	80068a8 <_dtoa_r+0x310>
 800682e:	4602      	mov	r2, r0
 8006830:	f240 11af 	movw	r1, #431	; 0x1af
 8006834:	4b16      	ldr	r3, [pc, #88]	; (8006890 <_dtoa_r+0x2f8>)
 8006836:	e6c3      	b.n	80065c0 <_dtoa_r+0x28>
 8006838:	2301      	movs	r3, #1
 800683a:	e7e1      	b.n	8006800 <_dtoa_r+0x268>
 800683c:	2401      	movs	r4, #1
 800683e:	2300      	movs	r3, #0
 8006840:	940b      	str	r4, [sp, #44]	; 0x2c
 8006842:	9322      	str	r3, [sp, #136]	; 0x88
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	2200      	movs	r2, #0
 800684a:	9306      	str	r3, [sp, #24]
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	2312      	movs	r3, #18
 8006850:	e7d1      	b.n	80067f6 <_dtoa_r+0x25e>
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
 8006858:	636f4361 	.word	0x636f4361
 800685c:	3fd287a7 	.word	0x3fd287a7
 8006860:	8b60c8b3 	.word	0x8b60c8b3
 8006864:	3fc68a28 	.word	0x3fc68a28
 8006868:	509f79fb 	.word	0x509f79fb
 800686c:	3fd34413 	.word	0x3fd34413
 8006870:	080085d7 	.word	0x080085d7
 8006874:	080085ee 	.word	0x080085ee
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	080085d3 	.word	0x080085d3
 8006880:	080085ca 	.word	0x080085ca
 8006884:	080085a7 	.word	0x080085a7
 8006888:	3ff80000 	.word	0x3ff80000
 800688c:	080086d8 	.word	0x080086d8
 8006890:	08008646 	.word	0x08008646
 8006894:	2301      	movs	r3, #1
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	e7d4      	b.n	8006844 <_dtoa_r+0x2ac>
 800689a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800689c:	9306      	str	r3, [sp, #24]
 800689e:	9308      	str	r3, [sp, #32]
 80068a0:	e7b7      	b.n	8006812 <_dtoa_r+0x27a>
 80068a2:	3101      	adds	r1, #1
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	e7b7      	b.n	8006818 <_dtoa_r+0x280>
 80068a8:	69eb      	ldr	r3, [r5, #28]
 80068aa:	9a03      	ldr	r2, [sp, #12]
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	9b08      	ldr	r3, [sp, #32]
 80068b0:	2b0e      	cmp	r3, #14
 80068b2:	f200 80a8 	bhi.w	8006a06 <_dtoa_r+0x46e>
 80068b6:	2c00      	cmp	r4, #0
 80068b8:	f000 80a5 	beq.w	8006a06 <_dtoa_r+0x46e>
 80068bc:	f1bb 0f00 	cmp.w	fp, #0
 80068c0:	dd34      	ble.n	800692c <_dtoa_r+0x394>
 80068c2:	4b9a      	ldr	r3, [pc, #616]	; (8006b2c <_dtoa_r+0x594>)
 80068c4:	f00b 020f 	and.w	r2, fp, #15
 80068c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80068d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068d8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80068dc:	d016      	beq.n	800690c <_dtoa_r+0x374>
 80068de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068e2:	4b93      	ldr	r3, [pc, #588]	; (8006b30 <_dtoa_r+0x598>)
 80068e4:	2703      	movs	r7, #3
 80068e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ea:	f7f9 ffd3 	bl	8000894 <__aeabi_ddiv>
 80068ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f2:	f004 040f 	and.w	r4, r4, #15
 80068f6:	4e8e      	ldr	r6, [pc, #568]	; (8006b30 <_dtoa_r+0x598>)
 80068f8:	b954      	cbnz	r4, 8006910 <_dtoa_r+0x378>
 80068fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006902:	f7f9 ffc7 	bl	8000894 <__aeabi_ddiv>
 8006906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690a:	e029      	b.n	8006960 <_dtoa_r+0x3c8>
 800690c:	2702      	movs	r7, #2
 800690e:	e7f2      	b.n	80068f6 <_dtoa_r+0x35e>
 8006910:	07e1      	lsls	r1, r4, #31
 8006912:	d508      	bpl.n	8006926 <_dtoa_r+0x38e>
 8006914:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006918:	e9d6 2300 	ldrd	r2, r3, [r6]
 800691c:	f7f9 fe90 	bl	8000640 <__aeabi_dmul>
 8006920:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006924:	3701      	adds	r7, #1
 8006926:	1064      	asrs	r4, r4, #1
 8006928:	3608      	adds	r6, #8
 800692a:	e7e5      	b.n	80068f8 <_dtoa_r+0x360>
 800692c:	f000 80a5 	beq.w	8006a7a <_dtoa_r+0x4e2>
 8006930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006934:	f1cb 0400 	rsb	r4, fp, #0
 8006938:	4b7c      	ldr	r3, [pc, #496]	; (8006b2c <_dtoa_r+0x594>)
 800693a:	f004 020f 	and.w	r2, r4, #15
 800693e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fe7b 	bl	8000640 <__aeabi_dmul>
 800694a:	2702      	movs	r7, #2
 800694c:	2300      	movs	r3, #0
 800694e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006952:	4e77      	ldr	r6, [pc, #476]	; (8006b30 <_dtoa_r+0x598>)
 8006954:	1124      	asrs	r4, r4, #4
 8006956:	2c00      	cmp	r4, #0
 8006958:	f040 8084 	bne.w	8006a64 <_dtoa_r+0x4cc>
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1d2      	bne.n	8006906 <_dtoa_r+0x36e>
 8006960:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006964:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8087 	beq.w	8006a7e <_dtoa_r+0x4e6>
 8006970:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006974:	2200      	movs	r2, #0
 8006976:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <_dtoa_r+0x59c>)
 8006978:	f7fa f8d4 	bl	8000b24 <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	d07e      	beq.n	8006a7e <_dtoa_r+0x4e6>
 8006980:	9b08      	ldr	r3, [sp, #32]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d07b      	beq.n	8006a7e <_dtoa_r+0x4e6>
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd38      	ble.n	80069fe <_dtoa_r+0x466>
 800698c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006990:	2200      	movs	r2, #0
 8006992:	4b69      	ldr	r3, [pc, #420]	; (8006b38 <_dtoa_r+0x5a0>)
 8006994:	f7f9 fe54 	bl	8000640 <__aeabi_dmul>
 8006998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800699c:	9c06      	ldr	r4, [sp, #24]
 800699e:	f10b 38ff 	add.w	r8, fp, #4294967295
 80069a2:	3701      	adds	r7, #1
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7f9 fde1 	bl	800056c <__aeabi_i2d>
 80069aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ae:	f7f9 fe47 	bl	8000640 <__aeabi_dmul>
 80069b2:	2200      	movs	r2, #0
 80069b4:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <_dtoa_r+0x5a4>)
 80069b6:	f7f9 fc8d 	bl	80002d4 <__adddf3>
 80069ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c2:	9611      	str	r6, [sp, #68]	; 0x44
 80069c4:	2c00      	cmp	r4, #0
 80069c6:	d15d      	bne.n	8006a84 <_dtoa_r+0x4ec>
 80069c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069cc:	2200      	movs	r2, #0
 80069ce:	4b5c      	ldr	r3, [pc, #368]	; (8006b40 <_dtoa_r+0x5a8>)
 80069d0:	f7f9 fc7e 	bl	80002d0 <__aeabi_dsub>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069dc:	4633      	mov	r3, r6
 80069de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069e0:	f7fa f8be 	bl	8000b60 <__aeabi_dcmpgt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 8295 	bne.w	8006f14 <_dtoa_r+0x97c>
 80069ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069f4:	f7fa f896 	bl	8000b24 <__aeabi_dcmplt>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f040 8289 	bne.w	8006f10 <_dtoa_r+0x978>
 80069fe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f2c0 8151 	blt.w	8006cb0 <_dtoa_r+0x718>
 8006a0e:	f1bb 0f0e 	cmp.w	fp, #14
 8006a12:	f300 814d 	bgt.w	8006cb0 <_dtoa_r+0x718>
 8006a16:	4b45      	ldr	r3, [pc, #276]	; (8006b2c <_dtoa_r+0x594>)
 8006a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f280 80da 	bge.w	8006be0 <_dtoa_r+0x648>
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f300 80d6 	bgt.w	8006be0 <_dtoa_r+0x648>
 8006a34:	f040 826b 	bne.w	8006f0e <_dtoa_r+0x976>
 8006a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4b40      	ldr	r3, [pc, #256]	; (8006b40 <_dtoa_r+0x5a8>)
 8006a40:	f7f9 fdfe 	bl	8000640 <__aeabi_dmul>
 8006a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a48:	f7fa f880 	bl	8000b4c <__aeabi_dcmpge>
 8006a4c:	9c08      	ldr	r4, [sp, #32]
 8006a4e:	4626      	mov	r6, r4
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f040 8241 	bne.w	8006ed8 <_dtoa_r+0x940>
 8006a56:	2331      	movs	r3, #49	; 0x31
 8006a58:	9f03      	ldr	r7, [sp, #12]
 8006a5a:	f10b 0b01 	add.w	fp, fp, #1
 8006a5e:	f807 3b01 	strb.w	r3, [r7], #1
 8006a62:	e23d      	b.n	8006ee0 <_dtoa_r+0x948>
 8006a64:	07e2      	lsls	r2, r4, #31
 8006a66:	d505      	bpl.n	8006a74 <_dtoa_r+0x4dc>
 8006a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a6c:	f7f9 fde8 	bl	8000640 <__aeabi_dmul>
 8006a70:	2301      	movs	r3, #1
 8006a72:	3701      	adds	r7, #1
 8006a74:	1064      	asrs	r4, r4, #1
 8006a76:	3608      	adds	r6, #8
 8006a78:	e76d      	b.n	8006956 <_dtoa_r+0x3be>
 8006a7a:	2702      	movs	r7, #2
 8006a7c:	e770      	b.n	8006960 <_dtoa_r+0x3c8>
 8006a7e:	46d8      	mov	r8, fp
 8006a80:	9c08      	ldr	r4, [sp, #32]
 8006a82:	e78f      	b.n	80069a4 <_dtoa_r+0x40c>
 8006a84:	9903      	ldr	r1, [sp, #12]
 8006a86:	4b29      	ldr	r3, [pc, #164]	; (8006b2c <_dtoa_r+0x594>)
 8006a88:	4421      	add	r1, r4
 8006a8a:	9112      	str	r1, [sp, #72]	; 0x48
 8006a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d054      	beq.n	8006b48 <_dtoa_r+0x5b0>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	4928      	ldr	r1, [pc, #160]	; (8006b44 <_dtoa_r+0x5ac>)
 8006aa2:	f7f9 fef7 	bl	8000894 <__aeabi_ddiv>
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	f7f9 fc11 	bl	80002d0 <__aeabi_dsub>
 8006aae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ab2:	9f03      	ldr	r7, [sp, #12]
 8006ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ab8:	f7fa f872 	bl	8000ba0 <__aeabi_d2iz>
 8006abc:	4604      	mov	r4, r0
 8006abe:	f7f9 fd55 	bl	800056c <__aeabi_i2d>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aca:	f7f9 fc01 	bl	80002d0 <__aeabi_dsub>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	3430      	adds	r4, #48	; 0x30
 8006ad4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006adc:	f807 4b01 	strb.w	r4, [r7], #1
 8006ae0:	f7fa f820 	bl	8000b24 <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d173      	bne.n	8006bd0 <_dtoa_r+0x638>
 8006ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aec:	2000      	movs	r0, #0
 8006aee:	4911      	ldr	r1, [pc, #68]	; (8006b34 <_dtoa_r+0x59c>)
 8006af0:	f7f9 fbee 	bl	80002d0 <__aeabi_dsub>
 8006af4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006af8:	f7fa f814 	bl	8000b24 <__aeabi_dcmplt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f040 80b6 	bne.w	8006c6e <_dtoa_r+0x6d6>
 8006b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b04:	429f      	cmp	r7, r3
 8006b06:	f43f af7a 	beq.w	80069fe <_dtoa_r+0x466>
 8006b0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <_dtoa_r+0x5a0>)
 8006b12:	f7f9 fd95 	bl	8000640 <__aeabi_dmul>
 8006b16:	2200      	movs	r2, #0
 8006b18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <_dtoa_r+0x5a0>)
 8006b22:	f7f9 fd8d 	bl	8000640 <__aeabi_dmul>
 8006b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b2a:	e7c3      	b.n	8006ab4 <_dtoa_r+0x51c>
 8006b2c:	080086d8 	.word	0x080086d8
 8006b30:	080086b0 	.word	0x080086b0
 8006b34:	3ff00000 	.word	0x3ff00000
 8006b38:	40240000 	.word	0x40240000
 8006b3c:	401c0000 	.word	0x401c0000
 8006b40:	40140000 	.word	0x40140000
 8006b44:	3fe00000 	.word	0x3fe00000
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 fd78 	bl	8000640 <__aeabi_dmul>
 8006b50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b52:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b56:	9c03      	ldr	r4, [sp, #12]
 8006b58:	9314      	str	r3, [sp, #80]	; 0x50
 8006b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b5e:	f7fa f81f 	bl	8000ba0 <__aeabi_d2iz>
 8006b62:	9015      	str	r0, [sp, #84]	; 0x54
 8006b64:	f7f9 fd02 	bl	800056c <__aeabi_i2d>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b70:	f7f9 fbae 	bl	80002d0 <__aeabi_dsub>
 8006b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b76:	4606      	mov	r6, r0
 8006b78:	3330      	adds	r3, #48	; 0x30
 8006b7a:	f804 3b01 	strb.w	r3, [r4], #1
 8006b7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b80:	460f      	mov	r7, r1
 8006b82:	429c      	cmp	r4, r3
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	d124      	bne.n	8006bd4 <_dtoa_r+0x63c>
 8006b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b8e:	4baf      	ldr	r3, [pc, #700]	; (8006e4c <_dtoa_r+0x8b4>)
 8006b90:	f7f9 fba0 	bl	80002d4 <__adddf3>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 ffe0 	bl	8000b60 <__aeabi_dcmpgt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d163      	bne.n	8006c6c <_dtoa_r+0x6d4>
 8006ba4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ba8:	2000      	movs	r0, #0
 8006baa:	49a8      	ldr	r1, [pc, #672]	; (8006e4c <_dtoa_r+0x8b4>)
 8006bac:	f7f9 fb90 	bl	80002d0 <__aeabi_dsub>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 ffb4 	bl	8000b24 <__aeabi_dcmplt>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f43f af1e 	beq.w	80069fe <_dtoa_r+0x466>
 8006bc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006bc4:	1e7b      	subs	r3, r7, #1
 8006bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8006bc8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006bcc:	2b30      	cmp	r3, #48	; 0x30
 8006bce:	d0f8      	beq.n	8006bc2 <_dtoa_r+0x62a>
 8006bd0:	46c3      	mov	fp, r8
 8006bd2:	e03b      	b.n	8006c4c <_dtoa_r+0x6b4>
 8006bd4:	4b9e      	ldr	r3, [pc, #632]	; (8006e50 <_dtoa_r+0x8b8>)
 8006bd6:	f7f9 fd33 	bl	8000640 <__aeabi_dmul>
 8006bda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bde:	e7bc      	b.n	8006b5a <_dtoa_r+0x5c2>
 8006be0:	9f03      	ldr	r7, [sp, #12]
 8006be2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7f9 fe51 	bl	8000894 <__aeabi_ddiv>
 8006bf2:	f7f9 ffd5 	bl	8000ba0 <__aeabi_d2iz>
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	f7f9 fcb8 	bl	800056c <__aeabi_i2d>
 8006bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c00:	f7f9 fd1e 	bl	8000640 <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 fb60 	bl	80002d0 <__aeabi_dsub>
 8006c10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c14:	f807 6b01 	strb.w	r6, [r7], #1
 8006c18:	9e03      	ldr	r6, [sp, #12]
 8006c1a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c1e:	1bbe      	subs	r6, r7, r6
 8006c20:	45b4      	cmp	ip, r6
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	d136      	bne.n	8006c96 <_dtoa_r+0x6fe>
 8006c28:	f7f9 fb54 	bl	80002d4 <__adddf3>
 8006c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c30:	4680      	mov	r8, r0
 8006c32:	4689      	mov	r9, r1
 8006c34:	f7f9 ff94 	bl	8000b60 <__aeabi_dcmpgt>
 8006c38:	bb58      	cbnz	r0, 8006c92 <_dtoa_r+0x6fa>
 8006c3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 ff65 	bl	8000b10 <__aeabi_dcmpeq>
 8006c46:	b108      	cbz	r0, 8006c4c <_dtoa_r+0x6b4>
 8006c48:	07e3      	lsls	r3, r4, #31
 8006c4a:	d422      	bmi.n	8006c92 <_dtoa_r+0x6fa>
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fbc2 	bl	80073d8 <_Bfree>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c58:	703b      	strb	r3, [r7, #0]
 8006c5a:	f10b 0301 	add.w	r3, fp, #1
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f43f ace6 	beq.w	8006634 <_dtoa_r+0x9c>
 8006c68:	601f      	str	r7, [r3, #0]
 8006c6a:	e4e3      	b.n	8006634 <_dtoa_r+0x9c>
 8006c6c:	4627      	mov	r7, r4
 8006c6e:	463b      	mov	r3, r7
 8006c70:	461f      	mov	r7, r3
 8006c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c76:	2a39      	cmp	r2, #57	; 0x39
 8006c78:	d107      	bne.n	8006c8a <_dtoa_r+0x6f2>
 8006c7a:	9a03      	ldr	r2, [sp, #12]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d1f7      	bne.n	8006c70 <_dtoa_r+0x6d8>
 8006c80:	2230      	movs	r2, #48	; 0x30
 8006c82:	9903      	ldr	r1, [sp, #12]
 8006c84:	f108 0801 	add.w	r8, r8, #1
 8006c88:	700a      	strb	r2, [r1, #0]
 8006c8a:	781a      	ldrb	r2, [r3, #0]
 8006c8c:	3201      	adds	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	e79e      	b.n	8006bd0 <_dtoa_r+0x638>
 8006c92:	46d8      	mov	r8, fp
 8006c94:	e7eb      	b.n	8006c6e <_dtoa_r+0x6d6>
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b6d      	ldr	r3, [pc, #436]	; (8006e50 <_dtoa_r+0x8b8>)
 8006c9a:	f7f9 fcd1 	bl	8000640 <__aeabi_dmul>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	f7f9 ff33 	bl	8000b10 <__aeabi_dcmpeq>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d09b      	beq.n	8006be6 <_dtoa_r+0x64e>
 8006cae:	e7cd      	b.n	8006c4c <_dtoa_r+0x6b4>
 8006cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	f000 80c4 	beq.w	8006e40 <_dtoa_r+0x8a8>
 8006cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cba:	2a01      	cmp	r2, #1
 8006cbc:	f300 80a8 	bgt.w	8006e10 <_dtoa_r+0x878>
 8006cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	f000 80a0 	beq.w	8006e08 <_dtoa_r+0x870>
 8006cc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ccc:	464f      	mov	r7, r9
 8006cce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	441a      	add	r2, r3
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	4499      	add	r9, r3
 8006cda:	9209      	str	r2, [sp, #36]	; 0x24
 8006cdc:	f000 fc32 	bl	8007544 <__i2b>
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	b15f      	cbz	r7, 8006cfc <_dtoa_r+0x764>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	dd08      	ble.n	8006cfc <_dtoa_r+0x764>
 8006cea:	42bb      	cmp	r3, r7
 8006cec:	bfa8      	it	ge
 8006cee:	463b      	movge	r3, r7
 8006cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cf2:	eba9 0903 	sub.w	r9, r9, r3
 8006cf6:	1aff      	subs	r7, r7, r3
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfe:	b1f3      	cbz	r3, 8006d3e <_dtoa_r+0x7a6>
 8006d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80a0 	beq.w	8006e48 <_dtoa_r+0x8b0>
 8006d08:	2c00      	cmp	r4, #0
 8006d0a:	dd10      	ble.n	8006d2e <_dtoa_r+0x796>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4622      	mov	r2, r4
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fcd5 	bl	80076c0 <__pow5mult>
 8006d16:	4652      	mov	r2, sl
 8006d18:	4601      	mov	r1, r0
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 fc27 	bl	8007570 <__multiply>
 8006d22:	4680      	mov	r8, r0
 8006d24:	4651      	mov	r1, sl
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 fb56 	bl	80073d8 <_Bfree>
 8006d2c:	46c2      	mov	sl, r8
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	1b1a      	subs	r2, r3, r4
 8006d32:	d004      	beq.n	8006d3e <_dtoa_r+0x7a6>
 8006d34:	4651      	mov	r1, sl
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fcc2 	bl	80076c0 <__pow5mult>
 8006d3c:	4682      	mov	sl, r0
 8006d3e:	2101      	movs	r1, #1
 8006d40:	4628      	mov	r0, r5
 8006d42:	f000 fbff 	bl	8007544 <__i2b>
 8006d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d48:	4604      	mov	r4, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f340 8082 	ble.w	8006e54 <_dtoa_r+0x8bc>
 8006d50:	461a      	mov	r2, r3
 8006d52:	4601      	mov	r1, r0
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 fcb3 	bl	80076c0 <__pow5mult>
 8006d5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	dd7b      	ble.n	8006e5a <_dtoa_r+0x8c2>
 8006d62:	f04f 0800 	mov.w	r8, #0
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d6c:	6918      	ldr	r0, [r3, #16]
 8006d6e:	f000 fb9b 	bl	80074a8 <__hi0bits>
 8006d72:	f1c0 0020 	rsb	r0, r0, #32
 8006d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d78:	4418      	add	r0, r3
 8006d7a:	f010 001f 	ands.w	r0, r0, #31
 8006d7e:	f000 8092 	beq.w	8006ea6 <_dtoa_r+0x90e>
 8006d82:	f1c0 0320 	rsb	r3, r0, #32
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	f340 8085 	ble.w	8006e96 <_dtoa_r+0x8fe>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	f1c0 001c 	rsb	r0, r0, #28
 8006d92:	4403      	add	r3, r0
 8006d94:	4481      	add	r9, r0
 8006d96:	4407      	add	r7, r0
 8006d98:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9a:	f1b9 0f00 	cmp.w	r9, #0
 8006d9e:	dd05      	ble.n	8006dac <_dtoa_r+0x814>
 8006da0:	4651      	mov	r1, sl
 8006da2:	464a      	mov	r2, r9
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 fce5 	bl	8007774 <__lshift>
 8006daa:	4682      	mov	sl, r0
 8006dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dd05      	ble.n	8006dbe <_dtoa_r+0x826>
 8006db2:	4621      	mov	r1, r4
 8006db4:	461a      	mov	r2, r3
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 fcdc 	bl	8007774 <__lshift>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d072      	beq.n	8006eaa <_dtoa_r+0x912>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	f000 fd40 	bl	800784c <__mcmp>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	da6c      	bge.n	8006eaa <_dtoa_r+0x912>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	220a      	movs	r2, #10
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 fb20 	bl	800741c <__multadd>
 8006ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dde:	4682      	mov	sl, r0
 8006de0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 81ac 	beq.w	8007142 <_dtoa_r+0xbaa>
 8006dea:	2300      	movs	r3, #0
 8006dec:	4631      	mov	r1, r6
 8006dee:	220a      	movs	r2, #10
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fb13 	bl	800741c <__multadd>
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	4606      	mov	r6, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f300 8093 	bgt.w	8006f26 <_dtoa_r+0x98e>
 8006e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	dc59      	bgt.n	8006eba <_dtoa_r+0x922>
 8006e06:	e08e      	b.n	8006f26 <_dtoa_r+0x98e>
 8006e08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e0e:	e75d      	b.n	8006ccc <_dtoa_r+0x734>
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	1e5c      	subs	r4, r3, #1
 8006e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	bfbf      	itttt	lt
 8006e1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e1c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006e1e:	1ae3      	sublt	r3, r4, r3
 8006e20:	18d2      	addlt	r2, r2, r3
 8006e22:	bfa8      	it	ge
 8006e24:	1b1c      	subge	r4, r3, r4
 8006e26:	9b08      	ldr	r3, [sp, #32]
 8006e28:	bfbe      	ittt	lt
 8006e2a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e2c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006e2e:	2400      	movlt	r4, #0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bfb5      	itete	lt
 8006e34:	eba9 0703 	sublt.w	r7, r9, r3
 8006e38:	464f      	movge	r7, r9
 8006e3a:	2300      	movlt	r3, #0
 8006e3c:	9b08      	ldrge	r3, [sp, #32]
 8006e3e:	e747      	b.n	8006cd0 <_dtoa_r+0x738>
 8006e40:	464f      	mov	r7, r9
 8006e42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e46:	e74c      	b.n	8006ce2 <_dtoa_r+0x74a>
 8006e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4a:	e773      	b.n	8006d34 <_dtoa_r+0x79c>
 8006e4c:	3fe00000 	.word	0x3fe00000
 8006e50:	40240000 	.word	0x40240000
 8006e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	dc18      	bgt.n	8006e8c <_dtoa_r+0x8f4>
 8006e5a:	9b04      	ldr	r3, [sp, #16]
 8006e5c:	b9b3      	cbnz	r3, 8006e8c <_dtoa_r+0x8f4>
 8006e5e:	9b05      	ldr	r3, [sp, #20]
 8006e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e64:	b993      	cbnz	r3, 8006e8c <_dtoa_r+0x8f4>
 8006e66:	9b05      	ldr	r3, [sp, #20]
 8006e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	0d1b      	lsrs	r3, r3, #20
 8006e6e:	051b      	lsls	r3, r3, #20
 8006e70:	b17b      	cbz	r3, 8006e92 <_dtoa_r+0x8fa>
 8006e72:	f04f 0801 	mov.w	r8, #1
 8006e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e78:	f109 0901 	add.w	r9, r9, #1
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f47f af6f 	bne.w	8006d66 <_dtoa_r+0x7ce>
 8006e88:	2001      	movs	r0, #1
 8006e8a:	e774      	b.n	8006d76 <_dtoa_r+0x7de>
 8006e8c:	f04f 0800 	mov.w	r8, #0
 8006e90:	e7f6      	b.n	8006e80 <_dtoa_r+0x8e8>
 8006e92:	4698      	mov	r8, r3
 8006e94:	e7f4      	b.n	8006e80 <_dtoa_r+0x8e8>
 8006e96:	d080      	beq.n	8006d9a <_dtoa_r+0x802>
 8006e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9a:	331c      	adds	r3, #28
 8006e9c:	441a      	add	r2, r3
 8006e9e:	4499      	add	r9, r3
 8006ea0:	441f      	add	r7, r3
 8006ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea4:	e779      	b.n	8006d9a <_dtoa_r+0x802>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	e7f6      	b.n	8006e98 <_dtoa_r+0x900>
 8006eaa:	9b08      	ldr	r3, [sp, #32]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc34      	bgt.n	8006f1a <_dtoa_r+0x982>
 8006eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	dd31      	ble.n	8006f1a <_dtoa_r+0x982>
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	9306      	str	r3, [sp, #24]
 8006eba:	9b06      	ldr	r3, [sp, #24]
 8006ebc:	b963      	cbnz	r3, 8006ed8 <_dtoa_r+0x940>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 faaa 	bl	800741c <__multadd>
 8006ec8:	4601      	mov	r1, r0
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4650      	mov	r0, sl
 8006ece:	f000 fcbd 	bl	800784c <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f73f adbf 	bgt.w	8006a56 <_dtoa_r+0x4be>
 8006ed8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eda:	9f03      	ldr	r7, [sp, #12]
 8006edc:	ea6f 0b03 	mvn.w	fp, r3
 8006ee0:	f04f 0800 	mov.w	r8, #0
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 fa76 	bl	80073d8 <_Bfree>
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	f43f aead 	beq.w	8006c4c <_dtoa_r+0x6b4>
 8006ef2:	f1b8 0f00 	cmp.w	r8, #0
 8006ef6:	d005      	beq.n	8006f04 <_dtoa_r+0x96c>
 8006ef8:	45b0      	cmp	r8, r6
 8006efa:	d003      	beq.n	8006f04 <_dtoa_r+0x96c>
 8006efc:	4641      	mov	r1, r8
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 fa6a 	bl	80073d8 <_Bfree>
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fa66 	bl	80073d8 <_Bfree>
 8006f0c:	e69e      	b.n	8006c4c <_dtoa_r+0x6b4>
 8006f0e:	2400      	movs	r4, #0
 8006f10:	4626      	mov	r6, r4
 8006f12:	e7e1      	b.n	8006ed8 <_dtoa_r+0x940>
 8006f14:	46c3      	mov	fp, r8
 8006f16:	4626      	mov	r6, r4
 8006f18:	e59d      	b.n	8006a56 <_dtoa_r+0x4be>
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80c8 	beq.w	80070b2 <_dtoa_r+0xb1a>
 8006f22:	9b08      	ldr	r3, [sp, #32]
 8006f24:	9306      	str	r3, [sp, #24]
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	dd05      	ble.n	8006f36 <_dtoa_r+0x99e>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	463a      	mov	r2, r7
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 fc20 	bl	8007774 <__lshift>
 8006f34:	4606      	mov	r6, r0
 8006f36:	f1b8 0f00 	cmp.w	r8, #0
 8006f3a:	d05b      	beq.n	8006ff4 <_dtoa_r+0xa5c>
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	6871      	ldr	r1, [r6, #4]
 8006f40:	f000 fa0a 	bl	8007358 <_Balloc>
 8006f44:	4607      	mov	r7, r0
 8006f46:	b928      	cbnz	r0, 8006f54 <_dtoa_r+0x9bc>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006f4e:	4b81      	ldr	r3, [pc, #516]	; (8007154 <_dtoa_r+0xbbc>)
 8006f50:	f7ff bb36 	b.w	80065c0 <_dtoa_r+0x28>
 8006f54:	6932      	ldr	r2, [r6, #16]
 8006f56:	f106 010c 	add.w	r1, r6, #12
 8006f5a:	3202      	adds	r2, #2
 8006f5c:	0092      	lsls	r2, r2, #2
 8006f5e:	300c      	adds	r0, #12
 8006f60:	f000 ff9e 	bl	8007ea0 <memcpy>
 8006f64:	2201      	movs	r2, #1
 8006f66:	4639      	mov	r1, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	f000 fc03 	bl	8007774 <__lshift>
 8006f6e:	46b0      	mov	r8, r6
 8006f70:	4606      	mov	r6, r0
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	9a03      	ldr	r2, [sp, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	930a      	str	r3, [sp, #40]	; 0x28
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4650      	mov	r0, sl
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	f7ff fa76 	bl	8006482 <quorem>
 8006f96:	4641      	mov	r1, r8
 8006f98:	9006      	str	r0, [sp, #24]
 8006f9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f9e:	4650      	mov	r0, sl
 8006fa0:	f000 fc54 	bl	800784c <__mcmp>
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fc6a 	bl	8007884 <__mdiff>
 8006fb0:	68c2      	ldr	r2, [r0, #12]
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	bb02      	cbnz	r2, 8006ff8 <_dtoa_r+0xa60>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4650      	mov	r0, sl
 8006fba:	f000 fc47 	bl	800784c <__mcmp>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	920c      	str	r2, [sp, #48]	; 0x30
 8006fc6:	f000 fa07 	bl	80073d8 <_Bfree>
 8006fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fce:	9f08      	ldr	r7, [sp, #32]
 8006fd0:	ea43 0102 	orr.w	r1, r3, r2
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	4319      	orrs	r1, r3
 8006fd8:	d110      	bne.n	8006ffc <_dtoa_r+0xa64>
 8006fda:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006fde:	d029      	beq.n	8007034 <_dtoa_r+0xa9c>
 8006fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd02      	ble.n	8006fec <_dtoa_r+0xa54>
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	f883 9000 	strb.w	r9, [r3]
 8006ff2:	e777      	b.n	8006ee4 <_dtoa_r+0x94c>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	e7ba      	b.n	8006f6e <_dtoa_r+0x9d6>
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	e7e1      	b.n	8006fc0 <_dtoa_r+0xa28>
 8006ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	db04      	blt.n	800700c <_dtoa_r+0xa74>
 8007002:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007004:	430b      	orrs	r3, r1
 8007006:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007008:	430b      	orrs	r3, r1
 800700a:	d120      	bne.n	800704e <_dtoa_r+0xab6>
 800700c:	2a00      	cmp	r2, #0
 800700e:	dded      	ble.n	8006fec <_dtoa_r+0xa54>
 8007010:	4651      	mov	r1, sl
 8007012:	2201      	movs	r2, #1
 8007014:	4628      	mov	r0, r5
 8007016:	f000 fbad 	bl	8007774 <__lshift>
 800701a:	4621      	mov	r1, r4
 800701c:	4682      	mov	sl, r0
 800701e:	f000 fc15 	bl	800784c <__mcmp>
 8007022:	2800      	cmp	r0, #0
 8007024:	dc03      	bgt.n	800702e <_dtoa_r+0xa96>
 8007026:	d1e1      	bne.n	8006fec <_dtoa_r+0xa54>
 8007028:	f019 0f01 	tst.w	r9, #1
 800702c:	d0de      	beq.n	8006fec <_dtoa_r+0xa54>
 800702e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007032:	d1d8      	bne.n	8006fe6 <_dtoa_r+0xa4e>
 8007034:	2339      	movs	r3, #57	; 0x39
 8007036:	9a04      	ldr	r2, [sp, #16]
 8007038:	7013      	strb	r3, [r2, #0]
 800703a:	463b      	mov	r3, r7
 800703c:	461f      	mov	r7, r3
 800703e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007042:	3b01      	subs	r3, #1
 8007044:	2a39      	cmp	r2, #57	; 0x39
 8007046:	d06b      	beq.n	8007120 <_dtoa_r+0xb88>
 8007048:	3201      	adds	r2, #1
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	e74a      	b.n	8006ee4 <_dtoa_r+0x94c>
 800704e:	2a00      	cmp	r2, #0
 8007050:	dd07      	ble.n	8007062 <_dtoa_r+0xaca>
 8007052:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007056:	d0ed      	beq.n	8007034 <_dtoa_r+0xa9c>
 8007058:	9a04      	ldr	r2, [sp, #16]
 800705a:	f109 0301 	add.w	r3, r9, #1
 800705e:	7013      	strb	r3, [r2, #0]
 8007060:	e740      	b.n	8006ee4 <_dtoa_r+0x94c>
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007066:	f803 9c01 	strb.w	r9, [r3, #-1]
 800706a:	4293      	cmp	r3, r2
 800706c:	d042      	beq.n	80070f4 <_dtoa_r+0xb5c>
 800706e:	4651      	mov	r1, sl
 8007070:	2300      	movs	r3, #0
 8007072:	220a      	movs	r2, #10
 8007074:	4628      	mov	r0, r5
 8007076:	f000 f9d1 	bl	800741c <__multadd>
 800707a:	45b0      	cmp	r8, r6
 800707c:	4682      	mov	sl, r0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	f04f 020a 	mov.w	r2, #10
 8007086:	4641      	mov	r1, r8
 8007088:	4628      	mov	r0, r5
 800708a:	d107      	bne.n	800709c <_dtoa_r+0xb04>
 800708c:	f000 f9c6 	bl	800741c <__multadd>
 8007090:	4680      	mov	r8, r0
 8007092:	4606      	mov	r6, r0
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	3301      	adds	r3, #1
 8007098:	9308      	str	r3, [sp, #32]
 800709a:	e775      	b.n	8006f88 <_dtoa_r+0x9f0>
 800709c:	f000 f9be 	bl	800741c <__multadd>
 80070a0:	4631      	mov	r1, r6
 80070a2:	4680      	mov	r8, r0
 80070a4:	2300      	movs	r3, #0
 80070a6:	220a      	movs	r2, #10
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 f9b7 	bl	800741c <__multadd>
 80070ae:	4606      	mov	r6, r0
 80070b0:	e7f0      	b.n	8007094 <_dtoa_r+0xafc>
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	9306      	str	r3, [sp, #24]
 80070b6:	9f03      	ldr	r7, [sp, #12]
 80070b8:	4621      	mov	r1, r4
 80070ba:	4650      	mov	r0, sl
 80070bc:	f7ff f9e1 	bl	8006482 <quorem>
 80070c0:	9b03      	ldr	r3, [sp, #12]
 80070c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80070c6:	f807 9b01 	strb.w	r9, [r7], #1
 80070ca:	1afa      	subs	r2, r7, r3
 80070cc:	9b06      	ldr	r3, [sp, #24]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	dd07      	ble.n	80070e2 <_dtoa_r+0xb4a>
 80070d2:	4651      	mov	r1, sl
 80070d4:	2300      	movs	r3, #0
 80070d6:	220a      	movs	r2, #10
 80070d8:	4628      	mov	r0, r5
 80070da:	f000 f99f 	bl	800741c <__multadd>
 80070de:	4682      	mov	sl, r0
 80070e0:	e7ea      	b.n	80070b8 <_dtoa_r+0xb20>
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	f04f 0800 	mov.w	r8, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfcc      	ite	gt
 80070ec:	461f      	movgt	r7, r3
 80070ee:	2701      	movle	r7, #1
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	441f      	add	r7, r3
 80070f4:	4651      	mov	r1, sl
 80070f6:	2201      	movs	r2, #1
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 fb3b 	bl	8007774 <__lshift>
 80070fe:	4621      	mov	r1, r4
 8007100:	4682      	mov	sl, r0
 8007102:	f000 fba3 	bl	800784c <__mcmp>
 8007106:	2800      	cmp	r0, #0
 8007108:	dc97      	bgt.n	800703a <_dtoa_r+0xaa2>
 800710a:	d102      	bne.n	8007112 <_dtoa_r+0xb7a>
 800710c:	f019 0f01 	tst.w	r9, #1
 8007110:	d193      	bne.n	800703a <_dtoa_r+0xaa2>
 8007112:	463b      	mov	r3, r7
 8007114:	461f      	mov	r7, r3
 8007116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800711a:	2a30      	cmp	r2, #48	; 0x30
 800711c:	d0fa      	beq.n	8007114 <_dtoa_r+0xb7c>
 800711e:	e6e1      	b.n	8006ee4 <_dtoa_r+0x94c>
 8007120:	9a03      	ldr	r2, [sp, #12]
 8007122:	429a      	cmp	r2, r3
 8007124:	d18a      	bne.n	800703c <_dtoa_r+0xaa4>
 8007126:	2331      	movs	r3, #49	; 0x31
 8007128:	f10b 0b01 	add.w	fp, fp, #1
 800712c:	e797      	b.n	800705e <_dtoa_r+0xac6>
 800712e:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <_dtoa_r+0xbc0>)
 8007130:	f7ff ba9f 	b.w	8006672 <_dtoa_r+0xda>
 8007134:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007136:	2b00      	cmp	r3, #0
 8007138:	f47f aa77 	bne.w	800662a <_dtoa_r+0x92>
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <_dtoa_r+0xbc4>)
 800713e:	f7ff ba98 	b.w	8006672 <_dtoa_r+0xda>
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dcb6      	bgt.n	80070b6 <_dtoa_r+0xb1e>
 8007148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800714a:	2b02      	cmp	r3, #2
 800714c:	f73f aeb5 	bgt.w	8006eba <_dtoa_r+0x922>
 8007150:	e7b1      	b.n	80070b6 <_dtoa_r+0xb1e>
 8007152:	bf00      	nop
 8007154:	08008646 	.word	0x08008646
 8007158:	080085a6 	.word	0x080085a6
 800715c:	080085ca 	.word	0x080085ca

08007160 <_free_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4605      	mov	r5, r0
 8007164:	2900      	cmp	r1, #0
 8007166:	d040      	beq.n	80071ea <_free_r+0x8a>
 8007168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716c:	1f0c      	subs	r4, r1, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfb8      	it	lt
 8007172:	18e4      	addlt	r4, r4, r3
 8007174:	f000 f8e4 	bl	8007340 <__malloc_lock>
 8007178:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <_free_r+0x8c>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	b933      	cbnz	r3, 800718c <_free_r+0x2c>
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	6014      	str	r4, [r2, #0]
 8007182:	4628      	mov	r0, r5
 8007184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007188:	f000 b8e0 	b.w	800734c <__malloc_unlock>
 800718c:	42a3      	cmp	r3, r4
 800718e:	d908      	bls.n	80071a2 <_free_r+0x42>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	1821      	adds	r1, r4, r0
 8007194:	428b      	cmp	r3, r1
 8007196:	bf01      	itttt	eq
 8007198:	6819      	ldreq	r1, [r3, #0]
 800719a:	685b      	ldreq	r3, [r3, #4]
 800719c:	1809      	addeq	r1, r1, r0
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	e7ed      	b.n	800717e <_free_r+0x1e>
 80071a2:	461a      	mov	r2, r3
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	b10b      	cbz	r3, 80071ac <_free_r+0x4c>
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d9fa      	bls.n	80071a2 <_free_r+0x42>
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	1850      	adds	r0, r2, r1
 80071b0:	42a0      	cmp	r0, r4
 80071b2:	d10b      	bne.n	80071cc <_free_r+0x6c>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	4401      	add	r1, r0
 80071b8:	1850      	adds	r0, r2, r1
 80071ba:	4283      	cmp	r3, r0
 80071bc:	6011      	str	r1, [r2, #0]
 80071be:	d1e0      	bne.n	8007182 <_free_r+0x22>
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4408      	add	r0, r1
 80071c6:	6010      	str	r0, [r2, #0]
 80071c8:	6053      	str	r3, [r2, #4]
 80071ca:	e7da      	b.n	8007182 <_free_r+0x22>
 80071cc:	d902      	bls.n	80071d4 <_free_r+0x74>
 80071ce:	230c      	movs	r3, #12
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	e7d6      	b.n	8007182 <_free_r+0x22>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	1821      	adds	r1, r4, r0
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf01      	itttt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	1809      	addeq	r1, r1, r0
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	6063      	str	r3, [r4, #4]
 80071e6:	6054      	str	r4, [r2, #4]
 80071e8:	e7cb      	b.n	8007182 <_free_r+0x22>
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20000478 	.word	0x20000478

080071f0 <malloc>:
 80071f0:	4b02      	ldr	r3, [pc, #8]	; (80071fc <malloc+0xc>)
 80071f2:	4601      	mov	r1, r0
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f000 b823 	b.w	8007240 <_malloc_r>
 80071fa:	bf00      	nop
 80071fc:	20000064 	.word	0x20000064

08007200 <sbrk_aligned>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4e0e      	ldr	r6, [pc, #56]	; (800723c <sbrk_aligned+0x3c>)
 8007204:	460c      	mov	r4, r1
 8007206:	6831      	ldr	r1, [r6, #0]
 8007208:	4605      	mov	r5, r0
 800720a:	b911      	cbnz	r1, 8007212 <sbrk_aligned+0x12>
 800720c:	f000 fe38 	bl	8007e80 <_sbrk_r>
 8007210:	6030      	str	r0, [r6, #0]
 8007212:	4621      	mov	r1, r4
 8007214:	4628      	mov	r0, r5
 8007216:	f000 fe33 	bl	8007e80 <_sbrk_r>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d00a      	beq.n	8007234 <sbrk_aligned+0x34>
 800721e:	1cc4      	adds	r4, r0, #3
 8007220:	f024 0403 	bic.w	r4, r4, #3
 8007224:	42a0      	cmp	r0, r4
 8007226:	d007      	beq.n	8007238 <sbrk_aligned+0x38>
 8007228:	1a21      	subs	r1, r4, r0
 800722a:	4628      	mov	r0, r5
 800722c:	f000 fe28 	bl	8007e80 <_sbrk_r>
 8007230:	3001      	adds	r0, #1
 8007232:	d101      	bne.n	8007238 <sbrk_aligned+0x38>
 8007234:	f04f 34ff 	mov.w	r4, #4294967295
 8007238:	4620      	mov	r0, r4
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	2000047c 	.word	0x2000047c

08007240 <_malloc_r>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	1ccd      	adds	r5, r1, #3
 8007246:	f025 0503 	bic.w	r5, r5, #3
 800724a:	3508      	adds	r5, #8
 800724c:	2d0c      	cmp	r5, #12
 800724e:	bf38      	it	cc
 8007250:	250c      	movcc	r5, #12
 8007252:	2d00      	cmp	r5, #0
 8007254:	4607      	mov	r7, r0
 8007256:	db01      	blt.n	800725c <_malloc_r+0x1c>
 8007258:	42a9      	cmp	r1, r5
 800725a:	d905      	bls.n	8007268 <_malloc_r+0x28>
 800725c:	230c      	movs	r3, #12
 800725e:	2600      	movs	r6, #0
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4630      	mov	r0, r6
 8007264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007268:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800733c <_malloc_r+0xfc>
 800726c:	f000 f868 	bl	8007340 <__malloc_lock>
 8007270:	f8d8 3000 	ldr.w	r3, [r8]
 8007274:	461c      	mov	r4, r3
 8007276:	bb5c      	cbnz	r4, 80072d0 <_malloc_r+0x90>
 8007278:	4629      	mov	r1, r5
 800727a:	4638      	mov	r0, r7
 800727c:	f7ff ffc0 	bl	8007200 <sbrk_aligned>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	4604      	mov	r4, r0
 8007284:	d155      	bne.n	8007332 <_malloc_r+0xf2>
 8007286:	f8d8 4000 	ldr.w	r4, [r8]
 800728a:	4626      	mov	r6, r4
 800728c:	2e00      	cmp	r6, #0
 800728e:	d145      	bne.n	800731c <_malloc_r+0xdc>
 8007290:	2c00      	cmp	r4, #0
 8007292:	d048      	beq.n	8007326 <_malloc_r+0xe6>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	4631      	mov	r1, r6
 8007298:	4638      	mov	r0, r7
 800729a:	eb04 0903 	add.w	r9, r4, r3
 800729e:	f000 fdef 	bl	8007e80 <_sbrk_r>
 80072a2:	4581      	cmp	r9, r0
 80072a4:	d13f      	bne.n	8007326 <_malloc_r+0xe6>
 80072a6:	6821      	ldr	r1, [r4, #0]
 80072a8:	4638      	mov	r0, r7
 80072aa:	1a6d      	subs	r5, r5, r1
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7ff ffa7 	bl	8007200 <sbrk_aligned>
 80072b2:	3001      	adds	r0, #1
 80072b4:	d037      	beq.n	8007326 <_malloc_r+0xe6>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	442b      	add	r3, r5
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	f8d8 3000 	ldr.w	r3, [r8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d038      	beq.n	8007336 <_malloc_r+0xf6>
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	42a2      	cmp	r2, r4
 80072c8:	d12b      	bne.n	8007322 <_malloc_r+0xe2>
 80072ca:	2200      	movs	r2, #0
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	e00f      	b.n	80072f0 <_malloc_r+0xb0>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	1b52      	subs	r2, r2, r5
 80072d4:	d41f      	bmi.n	8007316 <_malloc_r+0xd6>
 80072d6:	2a0b      	cmp	r2, #11
 80072d8:	d917      	bls.n	800730a <_malloc_r+0xca>
 80072da:	1961      	adds	r1, r4, r5
 80072dc:	42a3      	cmp	r3, r4
 80072de:	6025      	str	r5, [r4, #0]
 80072e0:	bf18      	it	ne
 80072e2:	6059      	strne	r1, [r3, #4]
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	bf08      	it	eq
 80072e8:	f8c8 1000 	streq.w	r1, [r8]
 80072ec:	5162      	str	r2, [r4, r5]
 80072ee:	604b      	str	r3, [r1, #4]
 80072f0:	4638      	mov	r0, r7
 80072f2:	f104 060b 	add.w	r6, r4, #11
 80072f6:	f000 f829 	bl	800734c <__malloc_unlock>
 80072fa:	f026 0607 	bic.w	r6, r6, #7
 80072fe:	1d23      	adds	r3, r4, #4
 8007300:	1af2      	subs	r2, r6, r3
 8007302:	d0ae      	beq.n	8007262 <_malloc_r+0x22>
 8007304:	1b9b      	subs	r3, r3, r6
 8007306:	50a3      	str	r3, [r4, r2]
 8007308:	e7ab      	b.n	8007262 <_malloc_r+0x22>
 800730a:	42a3      	cmp	r3, r4
 800730c:	6862      	ldr	r2, [r4, #4]
 800730e:	d1dd      	bne.n	80072cc <_malloc_r+0x8c>
 8007310:	f8c8 2000 	str.w	r2, [r8]
 8007314:	e7ec      	b.n	80072f0 <_malloc_r+0xb0>
 8007316:	4623      	mov	r3, r4
 8007318:	6864      	ldr	r4, [r4, #4]
 800731a:	e7ac      	b.n	8007276 <_malloc_r+0x36>
 800731c:	4634      	mov	r4, r6
 800731e:	6876      	ldr	r6, [r6, #4]
 8007320:	e7b4      	b.n	800728c <_malloc_r+0x4c>
 8007322:	4613      	mov	r3, r2
 8007324:	e7cc      	b.n	80072c0 <_malloc_r+0x80>
 8007326:	230c      	movs	r3, #12
 8007328:	4638      	mov	r0, r7
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	f000 f80e 	bl	800734c <__malloc_unlock>
 8007330:	e797      	b.n	8007262 <_malloc_r+0x22>
 8007332:	6025      	str	r5, [r4, #0]
 8007334:	e7dc      	b.n	80072f0 <_malloc_r+0xb0>
 8007336:	605b      	str	r3, [r3, #4]
 8007338:	deff      	udf	#255	; 0xff
 800733a:	bf00      	nop
 800733c:	20000478 	.word	0x20000478

08007340 <__malloc_lock>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__malloc_lock+0x8>)
 8007342:	f7ff b88e 	b.w	8006462 <__retarget_lock_acquire_recursive>
 8007346:	bf00      	nop
 8007348:	20000474 	.word	0x20000474

0800734c <__malloc_unlock>:
 800734c:	4801      	ldr	r0, [pc, #4]	; (8007354 <__malloc_unlock+0x8>)
 800734e:	f7ff b889 	b.w	8006464 <__retarget_lock_release_recursive>
 8007352:	bf00      	nop
 8007354:	20000474 	.word	0x20000474

08007358 <_Balloc>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	69c6      	ldr	r6, [r0, #28]
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	b976      	cbnz	r6, 8007380 <_Balloc+0x28>
 8007362:	2010      	movs	r0, #16
 8007364:	f7ff ff44 	bl	80071f0 <malloc>
 8007368:	4602      	mov	r2, r0
 800736a:	61e0      	str	r0, [r4, #28]
 800736c:	b920      	cbnz	r0, 8007378 <_Balloc+0x20>
 800736e:	216b      	movs	r1, #107	; 0x6b
 8007370:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <_Balloc+0x78>)
 8007372:	4818      	ldr	r0, [pc, #96]	; (80073d4 <_Balloc+0x7c>)
 8007374:	f000 fda2 	bl	8007ebc <__assert_func>
 8007378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800737c:	6006      	str	r6, [r0, #0]
 800737e:	60c6      	str	r6, [r0, #12]
 8007380:	69e6      	ldr	r6, [r4, #28]
 8007382:	68f3      	ldr	r3, [r6, #12]
 8007384:	b183      	cbz	r3, 80073a8 <_Balloc+0x50>
 8007386:	69e3      	ldr	r3, [r4, #28]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800738e:	b9b8      	cbnz	r0, 80073c0 <_Balloc+0x68>
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f605 	lsl.w	r6, r1, r5
 8007396:	1d72      	adds	r2, r6, #5
 8007398:	4620      	mov	r0, r4
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	f000 fdac 	bl	8007ef8 <_calloc_r>
 80073a0:	b160      	cbz	r0, 80073bc <_Balloc+0x64>
 80073a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073a6:	e00e      	b.n	80073c6 <_Balloc+0x6e>
 80073a8:	2221      	movs	r2, #33	; 0x21
 80073aa:	2104      	movs	r1, #4
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fda3 	bl	8007ef8 <_calloc_r>
 80073b2:	69e3      	ldr	r3, [r4, #28]
 80073b4:	60f0      	str	r0, [r6, #12]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e4      	bne.n	8007386 <_Balloc+0x2e>
 80073bc:	2000      	movs	r0, #0
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	6802      	ldr	r2, [r0, #0]
 80073c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073c6:	2300      	movs	r3, #0
 80073c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073cc:	e7f7      	b.n	80073be <_Balloc+0x66>
 80073ce:	bf00      	nop
 80073d0:	080085d7 	.word	0x080085d7
 80073d4:	08008657 	.word	0x08008657

080073d8 <_Bfree>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	69c6      	ldr	r6, [r0, #28]
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b976      	cbnz	r6, 8007400 <_Bfree+0x28>
 80073e2:	2010      	movs	r0, #16
 80073e4:	f7ff ff04 	bl	80071f0 <malloc>
 80073e8:	4602      	mov	r2, r0
 80073ea:	61e8      	str	r0, [r5, #28]
 80073ec:	b920      	cbnz	r0, 80073f8 <_Bfree+0x20>
 80073ee:	218f      	movs	r1, #143	; 0x8f
 80073f0:	4b08      	ldr	r3, [pc, #32]	; (8007414 <_Bfree+0x3c>)
 80073f2:	4809      	ldr	r0, [pc, #36]	; (8007418 <_Bfree+0x40>)
 80073f4:	f000 fd62 	bl	8007ebc <__assert_func>
 80073f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073fc:	6006      	str	r6, [r0, #0]
 80073fe:	60c6      	str	r6, [r0, #12]
 8007400:	b13c      	cbz	r4, 8007412 <_Bfree+0x3a>
 8007402:	69eb      	ldr	r3, [r5, #28]
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800740c:	6021      	str	r1, [r4, #0]
 800740e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007412:	bd70      	pop	{r4, r5, r6, pc}
 8007414:	080085d7 	.word	0x080085d7
 8007418:	08008657 	.word	0x08008657

0800741c <__multadd>:
 800741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007420:	4607      	mov	r7, r0
 8007422:	460c      	mov	r4, r1
 8007424:	461e      	mov	r6, r3
 8007426:	2000      	movs	r0, #0
 8007428:	690d      	ldr	r5, [r1, #16]
 800742a:	f101 0c14 	add.w	ip, r1, #20
 800742e:	f8dc 3000 	ldr.w	r3, [ip]
 8007432:	3001      	adds	r0, #1
 8007434:	b299      	uxth	r1, r3
 8007436:	fb02 6101 	mla	r1, r2, r1, r6
 800743a:	0c1e      	lsrs	r6, r3, #16
 800743c:	0c0b      	lsrs	r3, r1, #16
 800743e:	fb02 3306 	mla	r3, r2, r6, r3
 8007442:	b289      	uxth	r1, r1
 8007444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007448:	4285      	cmp	r5, r0
 800744a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800744e:	f84c 1b04 	str.w	r1, [ip], #4
 8007452:	dcec      	bgt.n	800742e <__multadd+0x12>
 8007454:	b30e      	cbz	r6, 800749a <__multadd+0x7e>
 8007456:	68a3      	ldr	r3, [r4, #8]
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc19      	bgt.n	8007490 <__multadd+0x74>
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4638      	mov	r0, r7
 8007460:	3101      	adds	r1, #1
 8007462:	f7ff ff79 	bl	8007358 <_Balloc>
 8007466:	4680      	mov	r8, r0
 8007468:	b928      	cbnz	r0, 8007476 <__multadd+0x5a>
 800746a:	4602      	mov	r2, r0
 800746c:	21ba      	movs	r1, #186	; 0xba
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <__multadd+0x84>)
 8007470:	480c      	ldr	r0, [pc, #48]	; (80074a4 <__multadd+0x88>)
 8007472:	f000 fd23 	bl	8007ebc <__assert_func>
 8007476:	6922      	ldr	r2, [r4, #16]
 8007478:	f104 010c 	add.w	r1, r4, #12
 800747c:	3202      	adds	r2, #2
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	300c      	adds	r0, #12
 8007482:	f000 fd0d 	bl	8007ea0 <memcpy>
 8007486:	4621      	mov	r1, r4
 8007488:	4638      	mov	r0, r7
 800748a:	f7ff ffa5 	bl	80073d8 <_Bfree>
 800748e:	4644      	mov	r4, r8
 8007490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007494:	3501      	adds	r5, #1
 8007496:	615e      	str	r6, [r3, #20]
 8007498:	6125      	str	r5, [r4, #16]
 800749a:	4620      	mov	r0, r4
 800749c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a0:	08008646 	.word	0x08008646
 80074a4:	08008657 	.word	0x08008657

080074a8 <__hi0bits>:
 80074a8:	0c02      	lsrs	r2, r0, #16
 80074aa:	0412      	lsls	r2, r2, #16
 80074ac:	4603      	mov	r3, r0
 80074ae:	b9ca      	cbnz	r2, 80074e4 <__hi0bits+0x3c>
 80074b0:	0403      	lsls	r3, r0, #16
 80074b2:	2010      	movs	r0, #16
 80074b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80074b8:	bf04      	itt	eq
 80074ba:	021b      	lsleq	r3, r3, #8
 80074bc:	3008      	addeq	r0, #8
 80074be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80074c2:	bf04      	itt	eq
 80074c4:	011b      	lsleq	r3, r3, #4
 80074c6:	3004      	addeq	r0, #4
 80074c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80074cc:	bf04      	itt	eq
 80074ce:	009b      	lsleq	r3, r3, #2
 80074d0:	3002      	addeq	r0, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db05      	blt.n	80074e2 <__hi0bits+0x3a>
 80074d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80074da:	f100 0001 	add.w	r0, r0, #1
 80074de:	bf08      	it	eq
 80074e0:	2020      	moveq	r0, #32
 80074e2:	4770      	bx	lr
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7e5      	b.n	80074b4 <__hi0bits+0xc>

080074e8 <__lo0bits>:
 80074e8:	6803      	ldr	r3, [r0, #0]
 80074ea:	4602      	mov	r2, r0
 80074ec:	f013 0007 	ands.w	r0, r3, #7
 80074f0:	d00b      	beq.n	800750a <__lo0bits+0x22>
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d421      	bmi.n	800753a <__lo0bits+0x52>
 80074f6:	0798      	lsls	r0, r3, #30
 80074f8:	bf49      	itett	mi
 80074fa:	085b      	lsrmi	r3, r3, #1
 80074fc:	089b      	lsrpl	r3, r3, #2
 80074fe:	2001      	movmi	r0, #1
 8007500:	6013      	strmi	r3, [r2, #0]
 8007502:	bf5c      	itt	pl
 8007504:	2002      	movpl	r0, #2
 8007506:	6013      	strpl	r3, [r2, #0]
 8007508:	4770      	bx	lr
 800750a:	b299      	uxth	r1, r3
 800750c:	b909      	cbnz	r1, 8007512 <__lo0bits+0x2a>
 800750e:	2010      	movs	r0, #16
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	b2d9      	uxtb	r1, r3
 8007514:	b909      	cbnz	r1, 800751a <__lo0bits+0x32>
 8007516:	3008      	adds	r0, #8
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	0719      	lsls	r1, r3, #28
 800751c:	bf04      	itt	eq
 800751e:	091b      	lsreq	r3, r3, #4
 8007520:	3004      	addeq	r0, #4
 8007522:	0799      	lsls	r1, r3, #30
 8007524:	bf04      	itt	eq
 8007526:	089b      	lsreq	r3, r3, #2
 8007528:	3002      	addeq	r0, #2
 800752a:	07d9      	lsls	r1, r3, #31
 800752c:	d403      	bmi.n	8007536 <__lo0bits+0x4e>
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	f100 0001 	add.w	r0, r0, #1
 8007534:	d003      	beq.n	800753e <__lo0bits+0x56>
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	4770      	bx	lr
 800753a:	2000      	movs	r0, #0
 800753c:	4770      	bx	lr
 800753e:	2020      	movs	r0, #32
 8007540:	4770      	bx	lr
	...

08007544 <__i2b>:
 8007544:	b510      	push	{r4, lr}
 8007546:	460c      	mov	r4, r1
 8007548:	2101      	movs	r1, #1
 800754a:	f7ff ff05 	bl	8007358 <_Balloc>
 800754e:	4602      	mov	r2, r0
 8007550:	b928      	cbnz	r0, 800755e <__i2b+0x1a>
 8007552:	f240 1145 	movw	r1, #325	; 0x145
 8007556:	4b04      	ldr	r3, [pc, #16]	; (8007568 <__i2b+0x24>)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <__i2b+0x28>)
 800755a:	f000 fcaf 	bl	8007ebc <__assert_func>
 800755e:	2301      	movs	r3, #1
 8007560:	6144      	str	r4, [r0, #20]
 8007562:	6103      	str	r3, [r0, #16]
 8007564:	bd10      	pop	{r4, pc}
 8007566:	bf00      	nop
 8007568:	08008646 	.word	0x08008646
 800756c:	08008657 	.word	0x08008657

08007570 <__multiply>:
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	4691      	mov	r9, r2
 8007576:	690a      	ldr	r2, [r1, #16]
 8007578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800757c:	460c      	mov	r4, r1
 800757e:	429a      	cmp	r2, r3
 8007580:	bfbe      	ittt	lt
 8007582:	460b      	movlt	r3, r1
 8007584:	464c      	movlt	r4, r9
 8007586:	4699      	movlt	r9, r3
 8007588:	6927      	ldr	r7, [r4, #16]
 800758a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	eb07 060a 	add.w	r6, r7, sl
 8007596:	42b3      	cmp	r3, r6
 8007598:	b085      	sub	sp, #20
 800759a:	bfb8      	it	lt
 800759c:	3101      	addlt	r1, #1
 800759e:	f7ff fedb 	bl	8007358 <_Balloc>
 80075a2:	b930      	cbnz	r0, 80075b2 <__multiply+0x42>
 80075a4:	4602      	mov	r2, r0
 80075a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80075aa:	4b43      	ldr	r3, [pc, #268]	; (80076b8 <__multiply+0x148>)
 80075ac:	4843      	ldr	r0, [pc, #268]	; (80076bc <__multiply+0x14c>)
 80075ae:	f000 fc85 	bl	8007ebc <__assert_func>
 80075b2:	f100 0514 	add.w	r5, r0, #20
 80075b6:	462b      	mov	r3, r5
 80075b8:	2200      	movs	r2, #0
 80075ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075be:	4543      	cmp	r3, r8
 80075c0:	d321      	bcc.n	8007606 <__multiply+0x96>
 80075c2:	f104 0314 	add.w	r3, r4, #20
 80075c6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075ca:	f109 0314 	add.w	r3, r9, #20
 80075ce:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075d2:	9202      	str	r2, [sp, #8]
 80075d4:	1b3a      	subs	r2, r7, r4
 80075d6:	3a15      	subs	r2, #21
 80075d8:	f022 0203 	bic.w	r2, r2, #3
 80075dc:	3204      	adds	r2, #4
 80075de:	f104 0115 	add.w	r1, r4, #21
 80075e2:	428f      	cmp	r7, r1
 80075e4:	bf38      	it	cc
 80075e6:	2204      	movcc	r2, #4
 80075e8:	9201      	str	r2, [sp, #4]
 80075ea:	9a02      	ldr	r2, [sp, #8]
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d80c      	bhi.n	800760c <__multiply+0x9c>
 80075f2:	2e00      	cmp	r6, #0
 80075f4:	dd03      	ble.n	80075fe <__multiply+0x8e>
 80075f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d05a      	beq.n	80076b4 <__multiply+0x144>
 80075fe:	6106      	str	r6, [r0, #16]
 8007600:	b005      	add	sp, #20
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	f843 2b04 	str.w	r2, [r3], #4
 800760a:	e7d8      	b.n	80075be <__multiply+0x4e>
 800760c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007610:	f1ba 0f00 	cmp.w	sl, #0
 8007614:	d023      	beq.n	800765e <__multiply+0xee>
 8007616:	46a9      	mov	r9, r5
 8007618:	f04f 0c00 	mov.w	ip, #0
 800761c:	f104 0e14 	add.w	lr, r4, #20
 8007620:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007624:	f8d9 1000 	ldr.w	r1, [r9]
 8007628:	fa1f fb82 	uxth.w	fp, r2
 800762c:	b289      	uxth	r1, r1
 800762e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007632:	4461      	add	r1, ip
 8007634:	f8d9 c000 	ldr.w	ip, [r9]
 8007638:	0c12      	lsrs	r2, r2, #16
 800763a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800763e:	fb0a c202 	mla	r2, sl, r2, ip
 8007642:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007646:	b289      	uxth	r1, r1
 8007648:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800764c:	4577      	cmp	r7, lr
 800764e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007652:	f849 1b04 	str.w	r1, [r9], #4
 8007656:	d8e3      	bhi.n	8007620 <__multiply+0xb0>
 8007658:	9a01      	ldr	r2, [sp, #4]
 800765a:	f845 c002 	str.w	ip, [r5, r2]
 800765e:	9a03      	ldr	r2, [sp, #12]
 8007660:	3304      	adds	r3, #4
 8007662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007666:	f1b9 0f00 	cmp.w	r9, #0
 800766a:	d021      	beq.n	80076b0 <__multiply+0x140>
 800766c:	46ae      	mov	lr, r5
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	6829      	ldr	r1, [r5, #0]
 8007674:	f104 0c14 	add.w	ip, r4, #20
 8007678:	f8bc b000 	ldrh.w	fp, [ip]
 800767c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007680:	b289      	uxth	r1, r1
 8007682:	fb09 220b 	mla	r2, r9, fp, r2
 8007686:	4452      	add	r2, sl
 8007688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800768c:	f84e 1b04 	str.w	r1, [lr], #4
 8007690:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007698:	f8be 1000 	ldrh.w	r1, [lr]
 800769c:	4567      	cmp	r7, ip
 800769e:	fb09 110a 	mla	r1, r9, sl, r1
 80076a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80076a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076aa:	d8e5      	bhi.n	8007678 <__multiply+0x108>
 80076ac:	9a01      	ldr	r2, [sp, #4]
 80076ae:	50a9      	str	r1, [r5, r2]
 80076b0:	3504      	adds	r5, #4
 80076b2:	e79a      	b.n	80075ea <__multiply+0x7a>
 80076b4:	3e01      	subs	r6, #1
 80076b6:	e79c      	b.n	80075f2 <__multiply+0x82>
 80076b8:	08008646 	.word	0x08008646
 80076bc:	08008657 	.word	0x08008657

080076c0 <__pow5mult>:
 80076c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c4:	4615      	mov	r5, r2
 80076c6:	f012 0203 	ands.w	r2, r2, #3
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	d007      	beq.n	80076e0 <__pow5mult+0x20>
 80076d0:	4c25      	ldr	r4, [pc, #148]	; (8007768 <__pow5mult+0xa8>)
 80076d2:	3a01      	subs	r2, #1
 80076d4:	2300      	movs	r3, #0
 80076d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076da:	f7ff fe9f 	bl	800741c <__multadd>
 80076de:	4607      	mov	r7, r0
 80076e0:	10ad      	asrs	r5, r5, #2
 80076e2:	d03d      	beq.n	8007760 <__pow5mult+0xa0>
 80076e4:	69f4      	ldr	r4, [r6, #28]
 80076e6:	b97c      	cbnz	r4, 8007708 <__pow5mult+0x48>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f7ff fd81 	bl	80071f0 <malloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	61f0      	str	r0, [r6, #28]
 80076f2:	b928      	cbnz	r0, 8007700 <__pow5mult+0x40>
 80076f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80076f8:	4b1c      	ldr	r3, [pc, #112]	; (800776c <__pow5mult+0xac>)
 80076fa:	481d      	ldr	r0, [pc, #116]	; (8007770 <__pow5mult+0xb0>)
 80076fc:	f000 fbde 	bl	8007ebc <__assert_func>
 8007700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007704:	6004      	str	r4, [r0, #0]
 8007706:	60c4      	str	r4, [r0, #12]
 8007708:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800770c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007710:	b94c      	cbnz	r4, 8007726 <__pow5mult+0x66>
 8007712:	f240 2171 	movw	r1, #625	; 0x271
 8007716:	4630      	mov	r0, r6
 8007718:	f7ff ff14 	bl	8007544 <__i2b>
 800771c:	2300      	movs	r3, #0
 800771e:	4604      	mov	r4, r0
 8007720:	f8c8 0008 	str.w	r0, [r8, #8]
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	f04f 0900 	mov.w	r9, #0
 800772a:	07eb      	lsls	r3, r5, #31
 800772c:	d50a      	bpl.n	8007744 <__pow5mult+0x84>
 800772e:	4639      	mov	r1, r7
 8007730:	4622      	mov	r2, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ff1c 	bl	8007570 <__multiply>
 8007738:	4680      	mov	r8, r0
 800773a:	4639      	mov	r1, r7
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fe4b 	bl	80073d8 <_Bfree>
 8007742:	4647      	mov	r7, r8
 8007744:	106d      	asrs	r5, r5, #1
 8007746:	d00b      	beq.n	8007760 <__pow5mult+0xa0>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	b938      	cbnz	r0, 800775c <__pow5mult+0x9c>
 800774c:	4622      	mov	r2, r4
 800774e:	4621      	mov	r1, r4
 8007750:	4630      	mov	r0, r6
 8007752:	f7ff ff0d 	bl	8007570 <__multiply>
 8007756:	6020      	str	r0, [r4, #0]
 8007758:	f8c0 9000 	str.w	r9, [r0]
 800775c:	4604      	mov	r4, r0
 800775e:	e7e4      	b.n	800772a <__pow5mult+0x6a>
 8007760:	4638      	mov	r0, r7
 8007762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007766:	bf00      	nop
 8007768:	080087a0 	.word	0x080087a0
 800776c:	080085d7 	.word	0x080085d7
 8007770:	08008657 	.word	0x08008657

08007774 <__lshift>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	460c      	mov	r4, r1
 800777a:	4607      	mov	r7, r0
 800777c:	4691      	mov	r9, r2
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	6849      	ldr	r1, [r1, #4]
 8007782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800778c:	f108 0601 	add.w	r6, r8, #1
 8007790:	42b3      	cmp	r3, r6
 8007792:	db0b      	blt.n	80077ac <__lshift+0x38>
 8007794:	4638      	mov	r0, r7
 8007796:	f7ff fddf 	bl	8007358 <_Balloc>
 800779a:	4605      	mov	r5, r0
 800779c:	b948      	cbnz	r0, 80077b2 <__lshift+0x3e>
 800779e:	4602      	mov	r2, r0
 80077a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <__lshift+0xd0>)
 80077a6:	4828      	ldr	r0, [pc, #160]	; (8007848 <__lshift+0xd4>)
 80077a8:	f000 fb88 	bl	8007ebc <__assert_func>
 80077ac:	3101      	adds	r1, #1
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	e7ee      	b.n	8007790 <__lshift+0x1c>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f100 0114 	add.w	r1, r0, #20
 80077b8:	f100 0210 	add.w	r2, r0, #16
 80077bc:	4618      	mov	r0, r3
 80077be:	4553      	cmp	r3, sl
 80077c0:	db33      	blt.n	800782a <__lshift+0xb6>
 80077c2:	6920      	ldr	r0, [r4, #16]
 80077c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077c8:	f104 0314 	add.w	r3, r4, #20
 80077cc:	f019 091f 	ands.w	r9, r9, #31
 80077d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077d8:	d02b      	beq.n	8007832 <__lshift+0xbe>
 80077da:	468a      	mov	sl, r1
 80077dc:	2200      	movs	r2, #0
 80077de:	f1c9 0e20 	rsb	lr, r9, #32
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	fa00 f009 	lsl.w	r0, r0, r9
 80077e8:	4310      	orrs	r0, r2
 80077ea:	f84a 0b04 	str.w	r0, [sl], #4
 80077ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f2:	459c      	cmp	ip, r3
 80077f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077f8:	d8f3      	bhi.n	80077e2 <__lshift+0x6e>
 80077fa:	ebac 0304 	sub.w	r3, ip, r4
 80077fe:	3b15      	subs	r3, #21
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	3304      	adds	r3, #4
 8007806:	f104 0015 	add.w	r0, r4, #21
 800780a:	4584      	cmp	ip, r0
 800780c:	bf38      	it	cc
 800780e:	2304      	movcc	r3, #4
 8007810:	50ca      	str	r2, [r1, r3]
 8007812:	b10a      	cbz	r2, 8007818 <__lshift+0xa4>
 8007814:	f108 0602 	add.w	r6, r8, #2
 8007818:	3e01      	subs	r6, #1
 800781a:	4638      	mov	r0, r7
 800781c:	4621      	mov	r1, r4
 800781e:	612e      	str	r6, [r5, #16]
 8007820:	f7ff fdda 	bl	80073d8 <_Bfree>
 8007824:	4628      	mov	r0, r5
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	f842 0f04 	str.w	r0, [r2, #4]!
 800782e:	3301      	adds	r3, #1
 8007830:	e7c5      	b.n	80077be <__lshift+0x4a>
 8007832:	3904      	subs	r1, #4
 8007834:	f853 2b04 	ldr.w	r2, [r3], #4
 8007838:	459c      	cmp	ip, r3
 800783a:	f841 2f04 	str.w	r2, [r1, #4]!
 800783e:	d8f9      	bhi.n	8007834 <__lshift+0xc0>
 8007840:	e7ea      	b.n	8007818 <__lshift+0xa4>
 8007842:	bf00      	nop
 8007844:	08008646 	.word	0x08008646
 8007848:	08008657 	.word	0x08008657

0800784c <__mcmp>:
 800784c:	4603      	mov	r3, r0
 800784e:	690a      	ldr	r2, [r1, #16]
 8007850:	6900      	ldr	r0, [r0, #16]
 8007852:	b530      	push	{r4, r5, lr}
 8007854:	1a80      	subs	r0, r0, r2
 8007856:	d10d      	bne.n	8007874 <__mcmp+0x28>
 8007858:	3314      	adds	r3, #20
 800785a:	3114      	adds	r1, #20
 800785c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007860:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800786c:	4295      	cmp	r5, r2
 800786e:	d002      	beq.n	8007876 <__mcmp+0x2a>
 8007870:	d304      	bcc.n	800787c <__mcmp+0x30>
 8007872:	2001      	movs	r0, #1
 8007874:	bd30      	pop	{r4, r5, pc}
 8007876:	42a3      	cmp	r3, r4
 8007878:	d3f4      	bcc.n	8007864 <__mcmp+0x18>
 800787a:	e7fb      	b.n	8007874 <__mcmp+0x28>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e7f8      	b.n	8007874 <__mcmp+0x28>
	...

08007884 <__mdiff>:
 8007884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007888:	460d      	mov	r5, r1
 800788a:	4607      	mov	r7, r0
 800788c:	4611      	mov	r1, r2
 800788e:	4628      	mov	r0, r5
 8007890:	4614      	mov	r4, r2
 8007892:	f7ff ffdb 	bl	800784c <__mcmp>
 8007896:	1e06      	subs	r6, r0, #0
 8007898:	d111      	bne.n	80078be <__mdiff+0x3a>
 800789a:	4631      	mov	r1, r6
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff fd5b 	bl	8007358 <_Balloc>
 80078a2:	4602      	mov	r2, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <__mdiff+0x2e>
 80078a6:	f240 2137 	movw	r1, #567	; 0x237
 80078aa:	4b3a      	ldr	r3, [pc, #232]	; (8007994 <__mdiff+0x110>)
 80078ac:	483a      	ldr	r0, [pc, #232]	; (8007998 <__mdiff+0x114>)
 80078ae:	f000 fb05 	bl	8007ebc <__assert_func>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80078b8:	4610      	mov	r0, r2
 80078ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	bfa4      	itt	ge
 80078c0:	4623      	movge	r3, r4
 80078c2:	462c      	movge	r4, r5
 80078c4:	4638      	mov	r0, r7
 80078c6:	6861      	ldr	r1, [r4, #4]
 80078c8:	bfa6      	itte	ge
 80078ca:	461d      	movge	r5, r3
 80078cc:	2600      	movge	r6, #0
 80078ce:	2601      	movlt	r6, #1
 80078d0:	f7ff fd42 	bl	8007358 <_Balloc>
 80078d4:	4602      	mov	r2, r0
 80078d6:	b918      	cbnz	r0, 80078e0 <__mdiff+0x5c>
 80078d8:	f240 2145 	movw	r1, #581	; 0x245
 80078dc:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <__mdiff+0x110>)
 80078de:	e7e5      	b.n	80078ac <__mdiff+0x28>
 80078e0:	f102 0814 	add.w	r8, r2, #20
 80078e4:	46c2      	mov	sl, r8
 80078e6:	f04f 0c00 	mov.w	ip, #0
 80078ea:	6927      	ldr	r7, [r4, #16]
 80078ec:	60c6      	str	r6, [r0, #12]
 80078ee:	692e      	ldr	r6, [r5, #16]
 80078f0:	f104 0014 	add.w	r0, r4, #20
 80078f4:	f105 0914 	add.w	r9, r5, #20
 80078f8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80078fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007900:	3410      	adds	r4, #16
 8007902:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007906:	f859 3b04 	ldr.w	r3, [r9], #4
 800790a:	fa1f f18b 	uxth.w	r1, fp
 800790e:	4461      	add	r1, ip
 8007910:	fa1f fc83 	uxth.w	ip, r3
 8007914:	0c1b      	lsrs	r3, r3, #16
 8007916:	eba1 010c 	sub.w	r1, r1, ip
 800791a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800791e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007922:	b289      	uxth	r1, r1
 8007924:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007928:	454e      	cmp	r6, r9
 800792a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800792e:	f84a 1b04 	str.w	r1, [sl], #4
 8007932:	d8e6      	bhi.n	8007902 <__mdiff+0x7e>
 8007934:	1b73      	subs	r3, r6, r5
 8007936:	3b15      	subs	r3, #21
 8007938:	f023 0303 	bic.w	r3, r3, #3
 800793c:	3515      	adds	r5, #21
 800793e:	3304      	adds	r3, #4
 8007940:	42ae      	cmp	r6, r5
 8007942:	bf38      	it	cc
 8007944:	2304      	movcc	r3, #4
 8007946:	4418      	add	r0, r3
 8007948:	4443      	add	r3, r8
 800794a:	461e      	mov	r6, r3
 800794c:	4605      	mov	r5, r0
 800794e:	4575      	cmp	r5, lr
 8007950:	d30e      	bcc.n	8007970 <__mdiff+0xec>
 8007952:	f10e 0103 	add.w	r1, lr, #3
 8007956:	1a09      	subs	r1, r1, r0
 8007958:	f021 0103 	bic.w	r1, r1, #3
 800795c:	3803      	subs	r0, #3
 800795e:	4586      	cmp	lr, r0
 8007960:	bf38      	it	cc
 8007962:	2100      	movcc	r1, #0
 8007964:	440b      	add	r3, r1
 8007966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800796a:	b189      	cbz	r1, 8007990 <__mdiff+0x10c>
 800796c:	6117      	str	r7, [r2, #16]
 800796e:	e7a3      	b.n	80078b8 <__mdiff+0x34>
 8007970:	f855 8b04 	ldr.w	r8, [r5], #4
 8007974:	fa1f f188 	uxth.w	r1, r8
 8007978:	4461      	add	r1, ip
 800797a:	140c      	asrs	r4, r1, #16
 800797c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007980:	b289      	uxth	r1, r1
 8007982:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007986:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800798a:	f846 1b04 	str.w	r1, [r6], #4
 800798e:	e7de      	b.n	800794e <__mdiff+0xca>
 8007990:	3f01      	subs	r7, #1
 8007992:	e7e8      	b.n	8007966 <__mdiff+0xe2>
 8007994:	08008646 	.word	0x08008646
 8007998:	08008657 	.word	0x08008657

0800799c <__d2b>:
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799e:	2101      	movs	r1, #1
 80079a0:	4617      	mov	r7, r2
 80079a2:	461c      	mov	r4, r3
 80079a4:	9e08      	ldr	r6, [sp, #32]
 80079a6:	f7ff fcd7 	bl	8007358 <_Balloc>
 80079aa:	4605      	mov	r5, r0
 80079ac:	b930      	cbnz	r0, 80079bc <__d2b+0x20>
 80079ae:	4602      	mov	r2, r0
 80079b0:	f240 310f 	movw	r1, #783	; 0x30f
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <__d2b+0xa4>)
 80079b6:	4823      	ldr	r0, [pc, #140]	; (8007a44 <__d2b+0xa8>)
 80079b8:	f000 fa80 	bl	8007ebc <__assert_func>
 80079bc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80079c0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80079c4:	bb24      	cbnz	r4, 8007a10 <__d2b+0x74>
 80079c6:	2f00      	cmp	r7, #0
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	d026      	beq.n	8007a1a <__d2b+0x7e>
 80079cc:	4668      	mov	r0, sp
 80079ce:	9700      	str	r7, [sp, #0]
 80079d0:	f7ff fd8a 	bl	80074e8 <__lo0bits>
 80079d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079d8:	b1e8      	cbz	r0, 8007a16 <__d2b+0x7a>
 80079da:	f1c0 0320 	rsb	r3, r0, #32
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	430b      	orrs	r3, r1
 80079e4:	40c2      	lsrs	r2, r0
 80079e6:	616b      	str	r3, [r5, #20]
 80079e8:	9201      	str	r2, [sp, #4]
 80079ea:	9b01      	ldr	r3, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf14      	ite	ne
 80079f0:	2102      	movne	r1, #2
 80079f2:	2101      	moveq	r1, #1
 80079f4:	61ab      	str	r3, [r5, #24]
 80079f6:	6129      	str	r1, [r5, #16]
 80079f8:	b1bc      	cbz	r4, 8007a2a <__d2b+0x8e>
 80079fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80079fe:	4404      	add	r4, r0
 8007a00:	6034      	str	r4, [r6, #0]
 8007a02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	6018      	str	r0, [r3, #0]
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	b003      	add	sp, #12
 8007a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a14:	e7d7      	b.n	80079c6 <__d2b+0x2a>
 8007a16:	6169      	str	r1, [r5, #20]
 8007a18:	e7e7      	b.n	80079ea <__d2b+0x4e>
 8007a1a:	a801      	add	r0, sp, #4
 8007a1c:	f7ff fd64 	bl	80074e8 <__lo0bits>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	2101      	movs	r1, #1
 8007a24:	616b      	str	r3, [r5, #20]
 8007a26:	3020      	adds	r0, #32
 8007a28:	e7e5      	b.n	80079f6 <__d2b+0x5a>
 8007a2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a2e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007a32:	6030      	str	r0, [r6, #0]
 8007a34:	6918      	ldr	r0, [r3, #16]
 8007a36:	f7ff fd37 	bl	80074a8 <__hi0bits>
 8007a3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a3e:	e7e2      	b.n	8007a06 <__d2b+0x6a>
 8007a40:	08008646 	.word	0x08008646
 8007a44:	08008657 	.word	0x08008657

08007a48 <__ssputs_r>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	461f      	mov	r7, r3
 8007a4e:	688e      	ldr	r6, [r1, #8]
 8007a50:	4682      	mov	sl, r0
 8007a52:	42be      	cmp	r6, r7
 8007a54:	460c      	mov	r4, r1
 8007a56:	4690      	mov	r8, r2
 8007a58:	680b      	ldr	r3, [r1, #0]
 8007a5a:	d82c      	bhi.n	8007ab6 <__ssputs_r+0x6e>
 8007a5c:	898a      	ldrh	r2, [r1, #12]
 8007a5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a62:	d026      	beq.n	8007ab2 <__ssputs_r+0x6a>
 8007a64:	6965      	ldr	r5, [r4, #20]
 8007a66:	6909      	ldr	r1, [r1, #16]
 8007a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a6c:	eba3 0901 	sub.w	r9, r3, r1
 8007a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a74:	1c7b      	adds	r3, r7, #1
 8007a76:	444b      	add	r3, r9
 8007a78:	106d      	asrs	r5, r5, #1
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	bf38      	it	cc
 8007a7e:	461d      	movcc	r5, r3
 8007a80:	0553      	lsls	r3, r2, #21
 8007a82:	d527      	bpl.n	8007ad4 <__ssputs_r+0x8c>
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7ff fbdb 	bl	8007240 <_malloc_r>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	b360      	cbz	r0, 8007ae8 <__ssputs_r+0xa0>
 8007a8e:	464a      	mov	r2, r9
 8007a90:	6921      	ldr	r1, [r4, #16]
 8007a92:	f000 fa05 	bl	8007ea0 <memcpy>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	6126      	str	r6, [r4, #16]
 8007aa4:	444e      	add	r6, r9
 8007aa6:	6026      	str	r6, [r4, #0]
 8007aa8:	463e      	mov	r6, r7
 8007aaa:	6165      	str	r5, [r4, #20]
 8007aac:	eba5 0509 	sub.w	r5, r5, r9
 8007ab0:	60a5      	str	r5, [r4, #8]
 8007ab2:	42be      	cmp	r6, r7
 8007ab4:	d900      	bls.n	8007ab8 <__ssputs_r+0x70>
 8007ab6:	463e      	mov	r6, r7
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4641      	mov	r1, r8
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	f000 f9c5 	bl	8007e4c <memmove>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	1b9b      	subs	r3, r3, r6
 8007ac8:	60a3      	str	r3, [r4, #8]
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	4433      	add	r3, r6
 8007ace:	6023      	str	r3, [r4, #0]
 8007ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad4:	462a      	mov	r2, r5
 8007ad6:	f000 fa35 	bl	8007f44 <_realloc_r>
 8007ada:	4606      	mov	r6, r0
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d1e0      	bne.n	8007aa2 <__ssputs_r+0x5a>
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	6921      	ldr	r1, [r4, #16]
 8007ae4:	f7ff fb3c 	bl	8007160 <_free_r>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	f8ca 3000 	str.w	r3, [sl]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	e7e9      	b.n	8007ad0 <__ssputs_r+0x88>

08007afc <_svfiprintf_r>:
 8007afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b00:	4698      	mov	r8, r3
 8007b02:	898b      	ldrh	r3, [r1, #12]
 8007b04:	4607      	mov	r7, r0
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4614      	mov	r4, r2
 8007b0c:	b09d      	sub	sp, #116	; 0x74
 8007b0e:	d50e      	bpl.n	8007b2e <_svfiprintf_r+0x32>
 8007b10:	690b      	ldr	r3, [r1, #16]
 8007b12:	b963      	cbnz	r3, 8007b2e <_svfiprintf_r+0x32>
 8007b14:	2140      	movs	r1, #64	; 0x40
 8007b16:	f7ff fb93 	bl	8007240 <_malloc_r>
 8007b1a:	6028      	str	r0, [r5, #0]
 8007b1c:	6128      	str	r0, [r5, #16]
 8007b1e:	b920      	cbnz	r0, 8007b2a <_svfiprintf_r+0x2e>
 8007b20:	230c      	movs	r3, #12
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e0d0      	b.n	8007ccc <_svfiprintf_r+0x1d0>
 8007b2a:	2340      	movs	r3, #64	; 0x40
 8007b2c:	616b      	str	r3, [r5, #20]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9309      	str	r3, [sp, #36]	; 0x24
 8007b32:	2320      	movs	r3, #32
 8007b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b38:	2330      	movs	r3, #48	; 0x30
 8007b3a:	f04f 0901 	mov.w	r9, #1
 8007b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b42:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ce4 <_svfiprintf_r+0x1e8>
 8007b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	469a      	mov	sl, r3
 8007b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b52:	b10a      	cbz	r2, 8007b58 <_svfiprintf_r+0x5c>
 8007b54:	2a25      	cmp	r2, #37	; 0x25
 8007b56:	d1f9      	bne.n	8007b4c <_svfiprintf_r+0x50>
 8007b58:	ebba 0b04 	subs.w	fp, sl, r4
 8007b5c:	d00b      	beq.n	8007b76 <_svfiprintf_r+0x7a>
 8007b5e:	465b      	mov	r3, fp
 8007b60:	4622      	mov	r2, r4
 8007b62:	4629      	mov	r1, r5
 8007b64:	4638      	mov	r0, r7
 8007b66:	f7ff ff6f 	bl	8007a48 <__ssputs_r>
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f000 80a9 	beq.w	8007cc2 <_svfiprintf_r+0x1c6>
 8007b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b72:	445a      	add	r2, fp
 8007b74:	9209      	str	r2, [sp, #36]	; 0x24
 8007b76:	f89a 3000 	ldrb.w	r3, [sl]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80a1 	beq.w	8007cc2 <_svfiprintf_r+0x1c6>
 8007b80:	2300      	movs	r3, #0
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b8a:	f10a 0a01 	add.w	sl, sl, #1
 8007b8e:	9304      	str	r3, [sp, #16]
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b96:	931a      	str	r3, [sp, #104]	; 0x68
 8007b98:	4654      	mov	r4, sl
 8007b9a:	2205      	movs	r2, #5
 8007b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba0:	4850      	ldr	r0, [pc, #320]	; (8007ce4 <_svfiprintf_r+0x1e8>)
 8007ba2:	f7fe fc60 	bl	8006466 <memchr>
 8007ba6:	9a04      	ldr	r2, [sp, #16]
 8007ba8:	b9d8      	cbnz	r0, 8007be2 <_svfiprintf_r+0xe6>
 8007baa:	06d0      	lsls	r0, r2, #27
 8007bac:	bf44      	itt	mi
 8007bae:	2320      	movmi	r3, #32
 8007bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb4:	0711      	lsls	r1, r2, #28
 8007bb6:	bf44      	itt	mi
 8007bb8:	232b      	movmi	r3, #43	; 0x2b
 8007bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc4:	d015      	beq.n	8007bf2 <_svfiprintf_r+0xf6>
 8007bc6:	4654      	mov	r4, sl
 8007bc8:	2000      	movs	r0, #0
 8007bca:	f04f 0c0a 	mov.w	ip, #10
 8007bce:	9a07      	ldr	r2, [sp, #28]
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd6:	3b30      	subs	r3, #48	; 0x30
 8007bd8:	2b09      	cmp	r3, #9
 8007bda:	d94d      	bls.n	8007c78 <_svfiprintf_r+0x17c>
 8007bdc:	b1b0      	cbz	r0, 8007c0c <_svfiprintf_r+0x110>
 8007bde:	9207      	str	r2, [sp, #28]
 8007be0:	e014      	b.n	8007c0c <_svfiprintf_r+0x110>
 8007be2:	eba0 0308 	sub.w	r3, r0, r8
 8007be6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bea:	4313      	orrs	r3, r2
 8007bec:	46a2      	mov	sl, r4
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	e7d2      	b.n	8007b98 <_svfiprintf_r+0x9c>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	1d19      	adds	r1, r3, #4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	9103      	str	r1, [sp, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bfbb      	ittet	lt
 8007bfe:	425b      	neglt	r3, r3
 8007c00:	f042 0202 	orrlt.w	r2, r2, #2
 8007c04:	9307      	strge	r3, [sp, #28]
 8007c06:	9307      	strlt	r3, [sp, #28]
 8007c08:	bfb8      	it	lt
 8007c0a:	9204      	strlt	r2, [sp, #16]
 8007c0c:	7823      	ldrb	r3, [r4, #0]
 8007c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c10:	d10c      	bne.n	8007c2c <_svfiprintf_r+0x130>
 8007c12:	7863      	ldrb	r3, [r4, #1]
 8007c14:	2b2a      	cmp	r3, #42	; 0x2a
 8007c16:	d134      	bne.n	8007c82 <_svfiprintf_r+0x186>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	3402      	adds	r4, #2
 8007c1c:	1d1a      	adds	r2, r3, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	9203      	str	r2, [sp, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfb8      	it	lt
 8007c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007ce8 <_svfiprintf_r+0x1ec>
 8007c30:	2203      	movs	r2, #3
 8007c32:	4650      	mov	r0, sl
 8007c34:	7821      	ldrb	r1, [r4, #0]
 8007c36:	f7fe fc16 	bl	8006466 <memchr>
 8007c3a:	b138      	cbz	r0, 8007c4c <_svfiprintf_r+0x150>
 8007c3c:	2240      	movs	r2, #64	; 0x40
 8007c3e:	9b04      	ldr	r3, [sp, #16]
 8007c40:	eba0 000a 	sub.w	r0, r0, sl
 8007c44:	4082      	lsls	r2, r0
 8007c46:	4313      	orrs	r3, r2
 8007c48:	3401      	adds	r4, #1
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c50:	2206      	movs	r2, #6
 8007c52:	4826      	ldr	r0, [pc, #152]	; (8007cec <_svfiprintf_r+0x1f0>)
 8007c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c58:	f7fe fc05 	bl	8006466 <memchr>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d038      	beq.n	8007cd2 <_svfiprintf_r+0x1d6>
 8007c60:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <_svfiprintf_r+0x1f4>)
 8007c62:	bb1b      	cbnz	r3, 8007cac <_svfiprintf_r+0x1b0>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	3307      	adds	r3, #7
 8007c68:	f023 0307 	bic.w	r3, r3, #7
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	9303      	str	r3, [sp, #12]
 8007c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c72:	4433      	add	r3, r6
 8007c74:	9309      	str	r3, [sp, #36]	; 0x24
 8007c76:	e768      	b.n	8007b4a <_svfiprintf_r+0x4e>
 8007c78:	460c      	mov	r4, r1
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c80:	e7a6      	b.n	8007bd0 <_svfiprintf_r+0xd4>
 8007c82:	2300      	movs	r3, #0
 8007c84:	f04f 0c0a 	mov.w	ip, #10
 8007c88:	4619      	mov	r1, r3
 8007c8a:	3401      	adds	r4, #1
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c94:	3a30      	subs	r2, #48	; 0x30
 8007c96:	2a09      	cmp	r2, #9
 8007c98:	d903      	bls.n	8007ca2 <_svfiprintf_r+0x1a6>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0c6      	beq.n	8007c2c <_svfiprintf_r+0x130>
 8007c9e:	9105      	str	r1, [sp, #20]
 8007ca0:	e7c4      	b.n	8007c2c <_svfiprintf_r+0x130>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007caa:	e7f0      	b.n	8007c8e <_svfiprintf_r+0x192>
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <_svfiprintf_r+0x1f8>)
 8007cb6:	a904      	add	r1, sp, #16
 8007cb8:	f7fd fe6e 	bl	8005998 <_printf_float>
 8007cbc:	1c42      	adds	r2, r0, #1
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	d1d6      	bne.n	8007c70 <_svfiprintf_r+0x174>
 8007cc2:	89ab      	ldrh	r3, [r5, #12]
 8007cc4:	065b      	lsls	r3, r3, #25
 8007cc6:	f53f af2d 	bmi.w	8007b24 <_svfiprintf_r+0x28>
 8007cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ccc:	b01d      	add	sp, #116	; 0x74
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	ab03      	add	r3, sp, #12
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	462a      	mov	r2, r5
 8007cd8:	4638      	mov	r0, r7
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <_svfiprintf_r+0x1f8>)
 8007cdc:	a904      	add	r1, sp, #16
 8007cde:	f7fe f8fb 	bl	8005ed8 <_printf_i>
 8007ce2:	e7eb      	b.n	8007cbc <_svfiprintf_r+0x1c0>
 8007ce4:	080087ac 	.word	0x080087ac
 8007ce8:	080087b2 	.word	0x080087b2
 8007cec:	080087b6 	.word	0x080087b6
 8007cf0:	08005999 	.word	0x08005999
 8007cf4:	08007a49 	.word	0x08007a49

08007cf8 <__sflush_r>:
 8007cf8:	898a      	ldrh	r2, [r1, #12]
 8007cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	0710      	lsls	r0, r2, #28
 8007d00:	460c      	mov	r4, r1
 8007d02:	d457      	bmi.n	8007db4 <__sflush_r+0xbc>
 8007d04:	684b      	ldr	r3, [r1, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dc04      	bgt.n	8007d14 <__sflush_r+0x1c>
 8007d0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	dc01      	bgt.n	8007d14 <__sflush_r+0x1c>
 8007d10:	2000      	movs	r0, #0
 8007d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d0fa      	beq.n	8007d10 <__sflush_r+0x18>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d20:	682f      	ldr	r7, [r5, #0]
 8007d22:	6a21      	ldr	r1, [r4, #32]
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	d032      	beq.n	8007d8e <__sflush_r+0x96>
 8007d28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	075a      	lsls	r2, r3, #29
 8007d2e:	d505      	bpl.n	8007d3c <__sflush_r+0x44>
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	1ac0      	subs	r0, r0, r3
 8007d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d36:	b10b      	cbz	r3, 8007d3c <__sflush_r+0x44>
 8007d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d3a:	1ac0      	subs	r0, r0, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d42:	4628      	mov	r0, r5
 8007d44:	6a21      	ldr	r1, [r4, #32]
 8007d46:	47b0      	blx	r6
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	d106      	bne.n	8007d5c <__sflush_r+0x64>
 8007d4e:	6829      	ldr	r1, [r5, #0]
 8007d50:	291d      	cmp	r1, #29
 8007d52:	d82b      	bhi.n	8007dac <__sflush_r+0xb4>
 8007d54:	4a28      	ldr	r2, [pc, #160]	; (8007df8 <__sflush_r+0x100>)
 8007d56:	410a      	asrs	r2, r1
 8007d58:	07d6      	lsls	r6, r2, #31
 8007d5a:	d427      	bmi.n	8007dac <__sflush_r+0xb4>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	6062      	str	r2, [r4, #4]
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	04d9      	lsls	r1, r3, #19
 8007d64:	6022      	str	r2, [r4, #0]
 8007d66:	d504      	bpl.n	8007d72 <__sflush_r+0x7a>
 8007d68:	1c42      	adds	r2, r0, #1
 8007d6a:	d101      	bne.n	8007d70 <__sflush_r+0x78>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b903      	cbnz	r3, 8007d72 <__sflush_r+0x7a>
 8007d70:	6560      	str	r0, [r4, #84]	; 0x54
 8007d72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d74:	602f      	str	r7, [r5, #0]
 8007d76:	2900      	cmp	r1, #0
 8007d78:	d0ca      	beq.n	8007d10 <__sflush_r+0x18>
 8007d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d7e:	4299      	cmp	r1, r3
 8007d80:	d002      	beq.n	8007d88 <__sflush_r+0x90>
 8007d82:	4628      	mov	r0, r5
 8007d84:	f7ff f9ec 	bl	8007160 <_free_r>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	6360      	str	r0, [r4, #52]	; 0x34
 8007d8c:	e7c1      	b.n	8007d12 <__sflush_r+0x1a>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b0      	blx	r6
 8007d94:	1c41      	adds	r1, r0, #1
 8007d96:	d1c8      	bne.n	8007d2a <__sflush_r+0x32>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0c5      	beq.n	8007d2a <__sflush_r+0x32>
 8007d9e:	2b1d      	cmp	r3, #29
 8007da0:	d001      	beq.n	8007da6 <__sflush_r+0xae>
 8007da2:	2b16      	cmp	r3, #22
 8007da4:	d101      	bne.n	8007daa <__sflush_r+0xb2>
 8007da6:	602f      	str	r7, [r5, #0]
 8007da8:	e7b2      	b.n	8007d10 <__sflush_r+0x18>
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	e7ae      	b.n	8007d12 <__sflush_r+0x1a>
 8007db4:	690f      	ldr	r7, [r1, #16]
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	d0aa      	beq.n	8007d10 <__sflush_r+0x18>
 8007dba:	0793      	lsls	r3, r2, #30
 8007dbc:	bf18      	it	ne
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	680e      	ldr	r6, [r1, #0]
 8007dc2:	bf08      	it	eq
 8007dc4:	694b      	ldreq	r3, [r1, #20]
 8007dc6:	1bf6      	subs	r6, r6, r7
 8007dc8:	600f      	str	r7, [r1, #0]
 8007dca:	608b      	str	r3, [r1, #8]
 8007dcc:	2e00      	cmp	r6, #0
 8007dce:	dd9f      	ble.n	8007d10 <__sflush_r+0x18>
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	6a21      	ldr	r1, [r4, #32]
 8007dd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ddc:	47e0      	blx	ip
 8007dde:	2800      	cmp	r0, #0
 8007de0:	dc06      	bgt.n	8007df0 <__sflush_r+0xf8>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	e790      	b.n	8007d12 <__sflush_r+0x1a>
 8007df0:	4407      	add	r7, r0
 8007df2:	1a36      	subs	r6, r6, r0
 8007df4:	e7ea      	b.n	8007dcc <__sflush_r+0xd4>
 8007df6:	bf00      	nop
 8007df8:	dfbffffe 	.word	0xdfbffffe

08007dfc <_fflush_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	690b      	ldr	r3, [r1, #16]
 8007e00:	4605      	mov	r5, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	b913      	cbnz	r3, 8007e0c <_fflush_r+0x10>
 8007e06:	2500      	movs	r5, #0
 8007e08:	4628      	mov	r0, r5
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	b118      	cbz	r0, 8007e16 <_fflush_r+0x1a>
 8007e0e:	6a03      	ldr	r3, [r0, #32]
 8007e10:	b90b      	cbnz	r3, 8007e16 <_fflush_r+0x1a>
 8007e12:	f7fe fa0f 	bl	8006234 <__sinit>
 8007e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0f3      	beq.n	8007e06 <_fflush_r+0xa>
 8007e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e20:	07d0      	lsls	r0, r2, #31
 8007e22:	d404      	bmi.n	8007e2e <_fflush_r+0x32>
 8007e24:	0599      	lsls	r1, r3, #22
 8007e26:	d402      	bmi.n	8007e2e <_fflush_r+0x32>
 8007e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2a:	f7fe fb1a 	bl	8006462 <__retarget_lock_acquire_recursive>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	4621      	mov	r1, r4
 8007e32:	f7ff ff61 	bl	8007cf8 <__sflush_r>
 8007e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e38:	4605      	mov	r5, r0
 8007e3a:	07da      	lsls	r2, r3, #31
 8007e3c:	d4e4      	bmi.n	8007e08 <_fflush_r+0xc>
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	059b      	lsls	r3, r3, #22
 8007e42:	d4e1      	bmi.n	8007e08 <_fflush_r+0xc>
 8007e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e46:	f7fe fb0d 	bl	8006464 <__retarget_lock_release_recursive>
 8007e4a:	e7dd      	b.n	8007e08 <_fflush_r+0xc>

08007e4c <memmove>:
 8007e4c:	4288      	cmp	r0, r1
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	eb01 0402 	add.w	r4, r1, r2
 8007e54:	d902      	bls.n	8007e5c <memmove+0x10>
 8007e56:	4284      	cmp	r4, r0
 8007e58:	4623      	mov	r3, r4
 8007e5a:	d807      	bhi.n	8007e6c <memmove+0x20>
 8007e5c:	1e43      	subs	r3, r0, #1
 8007e5e:	42a1      	cmp	r1, r4
 8007e60:	d008      	beq.n	8007e74 <memmove+0x28>
 8007e62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e6a:	e7f8      	b.n	8007e5e <memmove+0x12>
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	4402      	add	r2, r0
 8007e70:	428a      	cmp	r2, r1
 8007e72:	d100      	bne.n	8007e76 <memmove+0x2a>
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e7e:	e7f7      	b.n	8007e70 <memmove+0x24>

08007e80 <_sbrk_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	2300      	movs	r3, #0
 8007e84:	4d05      	ldr	r5, [pc, #20]	; (8007e9c <_sbrk_r+0x1c>)
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7f9 fbb0 	bl	80015f0 <_sbrk>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_sbrk_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_sbrk_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20000470 	.word	0x20000470

08007ea0 <memcpy>:
 8007ea0:	440a      	add	r2, r1
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ea8:	d100      	bne.n	8007eac <memcpy+0xc>
 8007eaa:	4770      	bx	lr
 8007eac:	b510      	push	{r4, lr}
 8007eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb2:	4291      	cmp	r1, r2
 8007eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eb8:	d1f9      	bne.n	8007eae <memcpy+0xe>
 8007eba:	bd10      	pop	{r4, pc}

08007ebc <__assert_func>:
 8007ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <__assert_func+0x2c>)
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68d8      	ldr	r0, [r3, #12]
 8007eca:	b14c      	cbz	r4, 8007ee0 <__assert_func+0x24>
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <__assert_func+0x30>)
 8007ece:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ed2:	9100      	str	r1, [sp, #0]
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	4906      	ldr	r1, [pc, #24]	; (8007ef0 <__assert_func+0x34>)
 8007ed8:	f000 f870 	bl	8007fbc <fiprintf>
 8007edc:	f000 f880 	bl	8007fe0 <abort>
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <__assert_func+0x38>)
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	e7f3      	b.n	8007ece <__assert_func+0x12>
 8007ee6:	bf00      	nop
 8007ee8:	20000064 	.word	0x20000064
 8007eec:	080087c7 	.word	0x080087c7
 8007ef0:	080087d4 	.word	0x080087d4
 8007ef4:	08008802 	.word	0x08008802

08007ef8 <_calloc_r>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	fba1 5402 	umull	r5, r4, r1, r2
 8007efe:	b934      	cbnz	r4, 8007f0e <_calloc_r+0x16>
 8007f00:	4629      	mov	r1, r5
 8007f02:	f7ff f99d 	bl	8007240 <_malloc_r>
 8007f06:	4606      	mov	r6, r0
 8007f08:	b928      	cbnz	r0, 8007f16 <_calloc_r+0x1e>
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	220c      	movs	r2, #12
 8007f10:	2600      	movs	r6, #0
 8007f12:	6002      	str	r2, [r0, #0]
 8007f14:	e7f9      	b.n	8007f0a <_calloc_r+0x12>
 8007f16:	462a      	mov	r2, r5
 8007f18:	4621      	mov	r1, r4
 8007f1a:	f7fe fa24 	bl	8006366 <memset>
 8007f1e:	e7f4      	b.n	8007f0a <_calloc_r+0x12>

08007f20 <__ascii_mbtowc>:
 8007f20:	b082      	sub	sp, #8
 8007f22:	b901      	cbnz	r1, 8007f26 <__ascii_mbtowc+0x6>
 8007f24:	a901      	add	r1, sp, #4
 8007f26:	b142      	cbz	r2, 8007f3a <__ascii_mbtowc+0x1a>
 8007f28:	b14b      	cbz	r3, 8007f3e <__ascii_mbtowc+0x1e>
 8007f2a:	7813      	ldrb	r3, [r2, #0]
 8007f2c:	600b      	str	r3, [r1, #0]
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	1e10      	subs	r0, r2, #0
 8007f32:	bf18      	it	ne
 8007f34:	2001      	movne	r0, #1
 8007f36:	b002      	add	sp, #8
 8007f38:	4770      	bx	lr
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	e7fb      	b.n	8007f36 <__ascii_mbtowc+0x16>
 8007f3e:	f06f 0001 	mvn.w	r0, #1
 8007f42:	e7f8      	b.n	8007f36 <__ascii_mbtowc+0x16>

08007f44 <_realloc_r>:
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f48:	4680      	mov	r8, r0
 8007f4a:	4614      	mov	r4, r2
 8007f4c:	460e      	mov	r6, r1
 8007f4e:	b921      	cbnz	r1, 8007f5a <_realloc_r+0x16>
 8007f50:	4611      	mov	r1, r2
 8007f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f56:	f7ff b973 	b.w	8007240 <_malloc_r>
 8007f5a:	b92a      	cbnz	r2, 8007f68 <_realloc_r+0x24>
 8007f5c:	f7ff f900 	bl	8007160 <_free_r>
 8007f60:	4625      	mov	r5, r4
 8007f62:	4628      	mov	r0, r5
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	f000 f841 	bl	8007fee <_malloc_usable_size_r>
 8007f6c:	4284      	cmp	r4, r0
 8007f6e:	4607      	mov	r7, r0
 8007f70:	d802      	bhi.n	8007f78 <_realloc_r+0x34>
 8007f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f76:	d812      	bhi.n	8007f9e <_realloc_r+0x5a>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	f7ff f960 	bl	8007240 <_malloc_r>
 8007f80:	4605      	mov	r5, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d0ed      	beq.n	8007f62 <_realloc_r+0x1e>
 8007f86:	42bc      	cmp	r4, r7
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	bf28      	it	cs
 8007f8e:	463a      	movcs	r2, r7
 8007f90:	f7ff ff86 	bl	8007ea0 <memcpy>
 8007f94:	4631      	mov	r1, r6
 8007f96:	4640      	mov	r0, r8
 8007f98:	f7ff f8e2 	bl	8007160 <_free_r>
 8007f9c:	e7e1      	b.n	8007f62 <_realloc_r+0x1e>
 8007f9e:	4635      	mov	r5, r6
 8007fa0:	e7df      	b.n	8007f62 <_realloc_r+0x1e>

08007fa2 <__ascii_wctomb>:
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	b141      	cbz	r1, 8007fba <__ascii_wctomb+0x18>
 8007fa8:	2aff      	cmp	r2, #255	; 0xff
 8007faa:	d904      	bls.n	8007fb6 <__ascii_wctomb+0x14>
 8007fac:	228a      	movs	r2, #138	; 0x8a
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	4770      	bx	lr
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	700a      	strb	r2, [r1, #0]
 8007fba:	4770      	bx	lr

08007fbc <fiprintf>:
 8007fbc:	b40e      	push	{r1, r2, r3}
 8007fbe:	b503      	push	{r0, r1, lr}
 8007fc0:	4601      	mov	r1, r0
 8007fc2:	ab03      	add	r3, sp, #12
 8007fc4:	4805      	ldr	r0, [pc, #20]	; (8007fdc <fiprintf+0x20>)
 8007fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	f000 f83d 	bl	800804c <_vfiprintf_r>
 8007fd2:	b002      	add	sp, #8
 8007fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fd8:	b003      	add	sp, #12
 8007fda:	4770      	bx	lr
 8007fdc:	20000064 	.word	0x20000064

08007fe0 <abort>:
 8007fe0:	2006      	movs	r0, #6
 8007fe2:	b508      	push	{r3, lr}
 8007fe4:	f000 fa0a 	bl	80083fc <raise>
 8007fe8:	2001      	movs	r0, #1
 8007fea:	f7f9 fa8e 	bl	800150a <_exit>

08007fee <_malloc_usable_size_r>:
 8007fee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff2:	1f18      	subs	r0, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbc      	itt	lt
 8007ff8:	580b      	ldrlt	r3, [r1, r0]
 8007ffa:	18c0      	addlt	r0, r0, r3
 8007ffc:	4770      	bx	lr

08007ffe <__sfputc_r>:
 8007ffe:	6893      	ldr	r3, [r2, #8]
 8008000:	b410      	push	{r4}
 8008002:	3b01      	subs	r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	6093      	str	r3, [r2, #8]
 8008008:	da07      	bge.n	800801a <__sfputc_r+0x1c>
 800800a:	6994      	ldr	r4, [r2, #24]
 800800c:	42a3      	cmp	r3, r4
 800800e:	db01      	blt.n	8008014 <__sfputc_r+0x16>
 8008010:	290a      	cmp	r1, #10
 8008012:	d102      	bne.n	800801a <__sfputc_r+0x1c>
 8008014:	bc10      	pop	{r4}
 8008016:	f000 b933 	b.w	8008280 <__swbuf_r>
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	1c58      	adds	r0, r3, #1
 800801e:	6010      	str	r0, [r2, #0]
 8008020:	7019      	strb	r1, [r3, #0]
 8008022:	4608      	mov	r0, r1
 8008024:	bc10      	pop	{r4}
 8008026:	4770      	bx	lr

08008028 <__sfputs_r>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	4606      	mov	r6, r0
 800802c:	460f      	mov	r7, r1
 800802e:	4614      	mov	r4, r2
 8008030:	18d5      	adds	r5, r2, r3
 8008032:	42ac      	cmp	r4, r5
 8008034:	d101      	bne.n	800803a <__sfputs_r+0x12>
 8008036:	2000      	movs	r0, #0
 8008038:	e007      	b.n	800804a <__sfputs_r+0x22>
 800803a:	463a      	mov	r2, r7
 800803c:	4630      	mov	r0, r6
 800803e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008042:	f7ff ffdc 	bl	8007ffe <__sfputc_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d1f3      	bne.n	8008032 <__sfputs_r+0xa>
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800804c <_vfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	460d      	mov	r5, r1
 8008052:	4614      	mov	r4, r2
 8008054:	4698      	mov	r8, r3
 8008056:	4606      	mov	r6, r0
 8008058:	b09d      	sub	sp, #116	; 0x74
 800805a:	b118      	cbz	r0, 8008064 <_vfiprintf_r+0x18>
 800805c:	6a03      	ldr	r3, [r0, #32]
 800805e:	b90b      	cbnz	r3, 8008064 <_vfiprintf_r+0x18>
 8008060:	f7fe f8e8 	bl	8006234 <__sinit>
 8008064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d405      	bmi.n	8008076 <_vfiprintf_r+0x2a>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d402      	bmi.n	8008076 <_vfiprintf_r+0x2a>
 8008070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008072:	f7fe f9f6 	bl	8006462 <__retarget_lock_acquire_recursive>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	071b      	lsls	r3, r3, #28
 800807a:	d501      	bpl.n	8008080 <_vfiprintf_r+0x34>
 800807c:	692b      	ldr	r3, [r5, #16]
 800807e:	b99b      	cbnz	r3, 80080a8 <_vfiprintf_r+0x5c>
 8008080:	4629      	mov	r1, r5
 8008082:	4630      	mov	r0, r6
 8008084:	f000 f93a 	bl	80082fc <__swsetup_r>
 8008088:	b170      	cbz	r0, 80080a8 <_vfiprintf_r+0x5c>
 800808a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800808c:	07dc      	lsls	r4, r3, #31
 800808e:	d504      	bpl.n	800809a <_vfiprintf_r+0x4e>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	b01d      	add	sp, #116	; 0x74
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	0598      	lsls	r0, r3, #22
 800809e:	d4f7      	bmi.n	8008090 <_vfiprintf_r+0x44>
 80080a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a2:	f7fe f9df 	bl	8006464 <__retarget_lock_release_recursive>
 80080a6:	e7f3      	b.n	8008090 <_vfiprintf_r+0x44>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	2320      	movs	r3, #32
 80080ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b2:	2330      	movs	r3, #48	; 0x30
 80080b4:	f04f 0901 	mov.w	r9, #1
 80080b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800826c <_vfiprintf_r+0x220>
 80080c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080c4:	4623      	mov	r3, r4
 80080c6:	469a      	mov	sl, r3
 80080c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080cc:	b10a      	cbz	r2, 80080d2 <_vfiprintf_r+0x86>
 80080ce:	2a25      	cmp	r2, #37	; 0x25
 80080d0:	d1f9      	bne.n	80080c6 <_vfiprintf_r+0x7a>
 80080d2:	ebba 0b04 	subs.w	fp, sl, r4
 80080d6:	d00b      	beq.n	80080f0 <_vfiprintf_r+0xa4>
 80080d8:	465b      	mov	r3, fp
 80080da:	4622      	mov	r2, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	4630      	mov	r0, r6
 80080e0:	f7ff ffa2 	bl	8008028 <__sfputs_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	f000 80a9 	beq.w	800823c <_vfiprintf_r+0x1f0>
 80080ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ec:	445a      	add	r2, fp
 80080ee:	9209      	str	r2, [sp, #36]	; 0x24
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a1 	beq.w	800823c <_vfiprintf_r+0x1f0>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008104:	f10a 0a01 	add.w	sl, sl, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008110:	931a      	str	r3, [sp, #104]	; 0x68
 8008112:	4654      	mov	r4, sl
 8008114:	2205      	movs	r2, #5
 8008116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811a:	4854      	ldr	r0, [pc, #336]	; (800826c <_vfiprintf_r+0x220>)
 800811c:	f7fe f9a3 	bl	8006466 <memchr>
 8008120:	9a04      	ldr	r2, [sp, #16]
 8008122:	b9d8      	cbnz	r0, 800815c <_vfiprintf_r+0x110>
 8008124:	06d1      	lsls	r1, r2, #27
 8008126:	bf44      	itt	mi
 8008128:	2320      	movmi	r3, #32
 800812a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800812e:	0713      	lsls	r3, r2, #28
 8008130:	bf44      	itt	mi
 8008132:	232b      	movmi	r3, #43	; 0x2b
 8008134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b2a      	cmp	r3, #42	; 0x2a
 800813e:	d015      	beq.n	800816c <_vfiprintf_r+0x120>
 8008140:	4654      	mov	r4, sl
 8008142:	2000      	movs	r0, #0
 8008144:	f04f 0c0a 	mov.w	ip, #10
 8008148:	9a07      	ldr	r2, [sp, #28]
 800814a:	4621      	mov	r1, r4
 800814c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008150:	3b30      	subs	r3, #48	; 0x30
 8008152:	2b09      	cmp	r3, #9
 8008154:	d94d      	bls.n	80081f2 <_vfiprintf_r+0x1a6>
 8008156:	b1b0      	cbz	r0, 8008186 <_vfiprintf_r+0x13a>
 8008158:	9207      	str	r2, [sp, #28]
 800815a:	e014      	b.n	8008186 <_vfiprintf_r+0x13a>
 800815c:	eba0 0308 	sub.w	r3, r0, r8
 8008160:	fa09 f303 	lsl.w	r3, r9, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	46a2      	mov	sl, r4
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	e7d2      	b.n	8008112 <_vfiprintf_r+0xc6>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	1d19      	adds	r1, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfbb      	ittet	lt
 8008178:	425b      	neglt	r3, r3
 800817a:	f042 0202 	orrlt.w	r2, r2, #2
 800817e:	9307      	strge	r3, [sp, #28]
 8008180:	9307      	strlt	r3, [sp, #28]
 8008182:	bfb8      	it	lt
 8008184:	9204      	strlt	r2, [sp, #16]
 8008186:	7823      	ldrb	r3, [r4, #0]
 8008188:	2b2e      	cmp	r3, #46	; 0x2e
 800818a:	d10c      	bne.n	80081a6 <_vfiprintf_r+0x15a>
 800818c:	7863      	ldrb	r3, [r4, #1]
 800818e:	2b2a      	cmp	r3, #42	; 0x2a
 8008190:	d134      	bne.n	80081fc <_vfiprintf_r+0x1b0>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	3402      	adds	r4, #2
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9203      	str	r2, [sp, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfb8      	it	lt
 80081a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008270 <_vfiprintf_r+0x224>
 80081aa:	2203      	movs	r2, #3
 80081ac:	4650      	mov	r0, sl
 80081ae:	7821      	ldrb	r1, [r4, #0]
 80081b0:	f7fe f959 	bl	8006466 <memchr>
 80081b4:	b138      	cbz	r0, 80081c6 <_vfiprintf_r+0x17a>
 80081b6:	2240      	movs	r2, #64	; 0x40
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	eba0 000a 	sub.w	r0, r0, sl
 80081be:	4082      	lsls	r2, r0
 80081c0:	4313      	orrs	r3, r2
 80081c2:	3401      	adds	r4, #1
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ca:	2206      	movs	r2, #6
 80081cc:	4829      	ldr	r0, [pc, #164]	; (8008274 <_vfiprintf_r+0x228>)
 80081ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081d2:	f7fe f948 	bl	8006466 <memchr>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d03f      	beq.n	800825a <_vfiprintf_r+0x20e>
 80081da:	4b27      	ldr	r3, [pc, #156]	; (8008278 <_vfiprintf_r+0x22c>)
 80081dc:	bb1b      	cbnz	r3, 8008226 <_vfiprintf_r+0x1da>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	3307      	adds	r3, #7
 80081e2:	f023 0307 	bic.w	r3, r3, #7
 80081e6:	3308      	adds	r3, #8
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ec:	443b      	add	r3, r7
 80081ee:	9309      	str	r3, [sp, #36]	; 0x24
 80081f0:	e768      	b.n	80080c4 <_vfiprintf_r+0x78>
 80081f2:	460c      	mov	r4, r1
 80081f4:	2001      	movs	r0, #1
 80081f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081fa:	e7a6      	b.n	800814a <_vfiprintf_r+0xfe>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f04f 0c0a 	mov.w	ip, #10
 8008202:	4619      	mov	r1, r3
 8008204:	3401      	adds	r4, #1
 8008206:	9305      	str	r3, [sp, #20]
 8008208:	4620      	mov	r0, r4
 800820a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820e:	3a30      	subs	r2, #48	; 0x30
 8008210:	2a09      	cmp	r2, #9
 8008212:	d903      	bls.n	800821c <_vfiprintf_r+0x1d0>
 8008214:	2b00      	cmp	r3, #0
 8008216:	d0c6      	beq.n	80081a6 <_vfiprintf_r+0x15a>
 8008218:	9105      	str	r1, [sp, #20]
 800821a:	e7c4      	b.n	80081a6 <_vfiprintf_r+0x15a>
 800821c:	4604      	mov	r4, r0
 800821e:	2301      	movs	r3, #1
 8008220:	fb0c 2101 	mla	r1, ip, r1, r2
 8008224:	e7f0      	b.n	8008208 <_vfiprintf_r+0x1bc>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4630      	mov	r0, r6
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <_vfiprintf_r+0x230>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	f7fd fbb1 	bl	8005998 <_printf_float>
 8008236:	4607      	mov	r7, r0
 8008238:	1c78      	adds	r0, r7, #1
 800823a:	d1d6      	bne.n	80081ea <_vfiprintf_r+0x19e>
 800823c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d405      	bmi.n	800824e <_vfiprintf_r+0x202>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d402      	bmi.n	800824e <_vfiprintf_r+0x202>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f7fe f90b 	bl	8006464 <__retarget_lock_release_recursive>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	065b      	lsls	r3, r3, #25
 8008252:	f53f af1d 	bmi.w	8008090 <_vfiprintf_r+0x44>
 8008256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008258:	e71c      	b.n	8008094 <_vfiprintf_r+0x48>
 800825a:	ab03      	add	r3, sp, #12
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	462a      	mov	r2, r5
 8008260:	4630      	mov	r0, r6
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <_vfiprintf_r+0x230>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	f7fd fe37 	bl	8005ed8 <_printf_i>
 800826a:	e7e4      	b.n	8008236 <_vfiprintf_r+0x1ea>
 800826c:	080087ac 	.word	0x080087ac
 8008270:	080087b2 	.word	0x080087b2
 8008274:	080087b6 	.word	0x080087b6
 8008278:	08005999 	.word	0x08005999
 800827c:	08008029 	.word	0x08008029

08008280 <__swbuf_r>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	460e      	mov	r6, r1
 8008284:	4614      	mov	r4, r2
 8008286:	4605      	mov	r5, r0
 8008288:	b118      	cbz	r0, 8008292 <__swbuf_r+0x12>
 800828a:	6a03      	ldr	r3, [r0, #32]
 800828c:	b90b      	cbnz	r3, 8008292 <__swbuf_r+0x12>
 800828e:	f7fd ffd1 	bl	8006234 <__sinit>
 8008292:	69a3      	ldr	r3, [r4, #24]
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	071a      	lsls	r2, r3, #28
 800829a:	d525      	bpl.n	80082e8 <__swbuf_r+0x68>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	b31b      	cbz	r3, 80082e8 <__swbuf_r+0x68>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	6922      	ldr	r2, [r4, #16]
 80082a4:	b2f6      	uxtb	r6, r6
 80082a6:	1a98      	subs	r0, r3, r2
 80082a8:	6963      	ldr	r3, [r4, #20]
 80082aa:	4637      	mov	r7, r6
 80082ac:	4283      	cmp	r3, r0
 80082ae:	dc04      	bgt.n	80082ba <__swbuf_r+0x3a>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7ff fda2 	bl	8007dfc <_fflush_r>
 80082b8:	b9e0      	cbnz	r0, 80082f4 <__swbuf_r+0x74>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	3b01      	subs	r3, #1
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	701e      	strb	r6, [r3, #0]
 80082c8:	6962      	ldr	r2, [r4, #20]
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d004      	beq.n	80082da <__swbuf_r+0x5a>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	07db      	lsls	r3, r3, #31
 80082d4:	d506      	bpl.n	80082e4 <__swbuf_r+0x64>
 80082d6:	2e0a      	cmp	r6, #10
 80082d8:	d104      	bne.n	80082e4 <__swbuf_r+0x64>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f7ff fd8d 	bl	8007dfc <_fflush_r>
 80082e2:	b938      	cbnz	r0, 80082f4 <__swbuf_r+0x74>
 80082e4:	4638      	mov	r0, r7
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e8:	4621      	mov	r1, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 f806 	bl	80082fc <__swsetup_r>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d0d5      	beq.n	80082a0 <__swbuf_r+0x20>
 80082f4:	f04f 37ff 	mov.w	r7, #4294967295
 80082f8:	e7f4      	b.n	80082e4 <__swbuf_r+0x64>
	...

080082fc <__swsetup_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	4b2a      	ldr	r3, [pc, #168]	; (80083a8 <__swsetup_r+0xac>)
 8008300:	4605      	mov	r5, r0
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	460c      	mov	r4, r1
 8008306:	b118      	cbz	r0, 8008310 <__swsetup_r+0x14>
 8008308:	6a03      	ldr	r3, [r0, #32]
 800830a:	b90b      	cbnz	r3, 8008310 <__swsetup_r+0x14>
 800830c:	f7fd ff92 	bl	8006234 <__sinit>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008316:	0718      	lsls	r0, r3, #28
 8008318:	d422      	bmi.n	8008360 <__swsetup_r+0x64>
 800831a:	06d9      	lsls	r1, r3, #27
 800831c:	d407      	bmi.n	800832e <__swsetup_r+0x32>
 800831e:	2309      	movs	r3, #9
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008326:	f04f 30ff 	mov.w	r0, #4294967295
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	e034      	b.n	8008398 <__swsetup_r+0x9c>
 800832e:	0758      	lsls	r0, r3, #29
 8008330:	d512      	bpl.n	8008358 <__swsetup_r+0x5c>
 8008332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008334:	b141      	cbz	r1, 8008348 <__swsetup_r+0x4c>
 8008336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833a:	4299      	cmp	r1, r3
 800833c:	d002      	beq.n	8008344 <__swsetup_r+0x48>
 800833e:	4628      	mov	r0, r5
 8008340:	f7fe ff0e 	bl	8007160 <_free_r>
 8008344:	2300      	movs	r3, #0
 8008346:	6363      	str	r3, [r4, #52]	; 0x34
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	2300      	movs	r3, #0
 8008352:	6063      	str	r3, [r4, #4]
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	f043 0308 	orr.w	r3, r3, #8
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b94b      	cbnz	r3, 8008378 <__swsetup_r+0x7c>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800836a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836e:	d003      	beq.n	8008378 <__swsetup_r+0x7c>
 8008370:	4621      	mov	r1, r4
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f883 	bl	800847e <__smakebuf_r>
 8008378:	89a0      	ldrh	r0, [r4, #12]
 800837a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800837e:	f010 0301 	ands.w	r3, r0, #1
 8008382:	d00a      	beq.n	800839a <__swsetup_r+0x9e>
 8008384:	2300      	movs	r3, #0
 8008386:	60a3      	str	r3, [r4, #8]
 8008388:	6963      	ldr	r3, [r4, #20]
 800838a:	425b      	negs	r3, r3
 800838c:	61a3      	str	r3, [r4, #24]
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	b943      	cbnz	r3, 80083a4 <__swsetup_r+0xa8>
 8008392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008396:	d1c4      	bne.n	8008322 <__swsetup_r+0x26>
 8008398:	bd38      	pop	{r3, r4, r5, pc}
 800839a:	0781      	lsls	r1, r0, #30
 800839c:	bf58      	it	pl
 800839e:	6963      	ldrpl	r3, [r4, #20]
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	e7f4      	b.n	800838e <__swsetup_r+0x92>
 80083a4:	2000      	movs	r0, #0
 80083a6:	e7f7      	b.n	8008398 <__swsetup_r+0x9c>
 80083a8:	20000064 	.word	0x20000064

080083ac <_raise_r>:
 80083ac:	291f      	cmp	r1, #31
 80083ae:	b538      	push	{r3, r4, r5, lr}
 80083b0:	4604      	mov	r4, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	d904      	bls.n	80083c0 <_raise_r+0x14>
 80083b6:	2316      	movs	r3, #22
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80083c2:	b112      	cbz	r2, 80083ca <_raise_r+0x1e>
 80083c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083c8:	b94b      	cbnz	r3, 80083de <_raise_r+0x32>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f830 	bl	8008430 <_getpid_r>
 80083d0:	462a      	mov	r2, r5
 80083d2:	4601      	mov	r1, r0
 80083d4:	4620      	mov	r0, r4
 80083d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083da:	f000 b817 	b.w	800840c <_kill_r>
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d00a      	beq.n	80083f8 <_raise_r+0x4c>
 80083e2:	1c59      	adds	r1, r3, #1
 80083e4:	d103      	bne.n	80083ee <_raise_r+0x42>
 80083e6:	2316      	movs	r3, #22
 80083e8:	6003      	str	r3, [r0, #0]
 80083ea:	2001      	movs	r0, #1
 80083ec:	e7e7      	b.n	80083be <_raise_r+0x12>
 80083ee:	2400      	movs	r4, #0
 80083f0:	4628      	mov	r0, r5
 80083f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083f6:	4798      	blx	r3
 80083f8:	2000      	movs	r0, #0
 80083fa:	e7e0      	b.n	80083be <_raise_r+0x12>

080083fc <raise>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	; (8008408 <raise+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f7ff bfd3 	b.w	80083ac <_raise_r>
 8008406:	bf00      	nop
 8008408:	20000064 	.word	0x20000064

0800840c <_kill_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	; (800842c <_kill_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 f866 	bl	80014ea <_kill>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_kill_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_kill_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000470 	.word	0x20000470

08008430 <_getpid_r>:
 8008430:	f7f9 b854 	b.w	80014dc <_getpid>

08008434 <__swhatbuf_r>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	460c      	mov	r4, r1
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	4615      	mov	r5, r2
 800843e:	2900      	cmp	r1, #0
 8008440:	461e      	mov	r6, r3
 8008442:	b096      	sub	sp, #88	; 0x58
 8008444:	da0c      	bge.n	8008460 <__swhatbuf_r+0x2c>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	2100      	movs	r1, #0
 800844a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800844e:	bf0c      	ite	eq
 8008450:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008454:	2340      	movne	r3, #64	; 0x40
 8008456:	2000      	movs	r0, #0
 8008458:	6031      	str	r1, [r6, #0]
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	b016      	add	sp, #88	; 0x58
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	466a      	mov	r2, sp
 8008462:	f000 f849 	bl	80084f8 <_fstat_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	dbed      	blt.n	8008446 <__swhatbuf_r+0x12>
 800846a:	9901      	ldr	r1, [sp, #4]
 800846c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008470:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008474:	4259      	negs	r1, r3
 8008476:	4159      	adcs	r1, r3
 8008478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800847c:	e7eb      	b.n	8008456 <__swhatbuf_r+0x22>

0800847e <__smakebuf_r>:
 800847e:	898b      	ldrh	r3, [r1, #12]
 8008480:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008482:	079d      	lsls	r5, r3, #30
 8008484:	4606      	mov	r6, r0
 8008486:	460c      	mov	r4, r1
 8008488:	d507      	bpl.n	800849a <__smakebuf_r+0x1c>
 800848a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800848e:	6023      	str	r3, [r4, #0]
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	2301      	movs	r3, #1
 8008494:	6163      	str	r3, [r4, #20]
 8008496:	b002      	add	sp, #8
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	466a      	mov	r2, sp
 800849c:	ab01      	add	r3, sp, #4
 800849e:	f7ff ffc9 	bl	8008434 <__swhatbuf_r>
 80084a2:	9900      	ldr	r1, [sp, #0]
 80084a4:	4605      	mov	r5, r0
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7fe feca 	bl	8007240 <_malloc_r>
 80084ac:	b948      	cbnz	r0, 80084c2 <__smakebuf_r+0x44>
 80084ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b2:	059a      	lsls	r2, r3, #22
 80084b4:	d4ef      	bmi.n	8008496 <__smakebuf_r+0x18>
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	e7e3      	b.n	800848a <__smakebuf_r+0xc>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	6020      	str	r0, [r4, #0]
 80084c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	6120      	str	r0, [r4, #16]
 80084d0:	6163      	str	r3, [r4, #20]
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	b15b      	cbz	r3, 80084ee <__smakebuf_r+0x70>
 80084d6:	4630      	mov	r0, r6
 80084d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084dc:	f000 f81e 	bl	800851c <_isatty_r>
 80084e0:	b128      	cbz	r0, 80084ee <__smakebuf_r+0x70>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f023 0303 	bic.w	r3, r3, #3
 80084e8:	f043 0301 	orr.w	r3, r3, #1
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	431d      	orrs	r5, r3
 80084f2:	81a5      	strh	r5, [r4, #12]
 80084f4:	e7cf      	b.n	8008496 <__smakebuf_r+0x18>
	...

080084f8 <_fstat_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	2300      	movs	r3, #0
 80084fc:	4d06      	ldr	r5, [pc, #24]	; (8008518 <_fstat_r+0x20>)
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	4611      	mov	r1, r2
 8008504:	602b      	str	r3, [r5, #0]
 8008506:	f7f9 f84e 	bl	80015a6 <_fstat>
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	d102      	bne.n	8008514 <_fstat_r+0x1c>
 800850e:	682b      	ldr	r3, [r5, #0]
 8008510:	b103      	cbz	r3, 8008514 <_fstat_r+0x1c>
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	bf00      	nop
 8008518:	20000470 	.word	0x20000470

0800851c <_isatty_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	2300      	movs	r3, #0
 8008520:	4d05      	ldr	r5, [pc, #20]	; (8008538 <_isatty_r+0x1c>)
 8008522:	4604      	mov	r4, r0
 8008524:	4608      	mov	r0, r1
 8008526:	602b      	str	r3, [r5, #0]
 8008528:	f7f9 f84c 	bl	80015c4 <_isatty>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_isatty_r+0x1a>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_isatty_r+0x1a>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000470 	.word	0x20000470

0800853c <_init>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	bf00      	nop
 8008540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008542:	bc08      	pop	{r3}
 8008544:	469e      	mov	lr, r3
 8008546:	4770      	bx	lr

08008548 <_fini>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	bf00      	nop
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr
