
Lab2_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009908  08009908  00019908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009cec  08009cec  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cec  08009cec  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200001d4  08009ec8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  08009ec8  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d453  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022dd  00000000  00000000  0002d693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a2  00000000  00000000  000305d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f1b  00000000  00000000  00030f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fd2  00000000  00000000  00049e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c966  00000000  00000000  0005ae67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004498  00000000  00000000  000e77d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ebc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080098ec 	.word	0x080098ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080098ec 	.word	0x080098ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <Read16>:
uint16_t ina219_calibrationValue;
int16_t ina219_currentDivider_mA;
int16_t ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af04      	add	r7, sp, #16
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2302      	movs	r3, #2
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f001 ff8a 	bl	8002e2c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	4313      	orrs	r3, r2
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	b29b      	uxth	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af04      	add	r7, sp, #16
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5c:	9302      	str	r3, [sp, #8]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	f001 fe64 	bl	8002c38 <HAL_I2C_Mem_Write>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8000f80:	2102      	movs	r1, #2
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb2 	bl	8000eec <Read16>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * (4/100)); //400mv
 8000f8c:	2300      	movs	r3, #0

}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffa3 	bl	8000eec <Read16>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	81fb      	strh	r3, [r7, #14]

	return (result );
 8000faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffe8 	bl	8000f96 <INA219_ReadCurrent_raw>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8000fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <INA219_ReadCurrent+0x2c>)
 8000fd0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000fd8:	b21b      	sxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001f2 	.word	0x200001f2

08000fe8 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff7a 	bl	8000eec <Read16>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fab4 	bl	800056c <__aeabi_i2d>
 8001004:	a308      	add	r3, pc, #32	; (adr r3, 8001028 <INA219_ReadShuntVolage+0x40>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fb19 	bl	8000640 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fdeb 	bl	8000bf0 <__aeabi_d2uiz>
 800101a:	4603      	mov	r3, r0
 800101c:	b29b      	uxth	r3, r3
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	47ae147b 	.word	0x47ae147b
 800102c:	3f847ae1 	.word	0x3f847ae1

08001030 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001038:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800103c:	2100      	movs	r1, #0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff76 	bl	8000f30 <Write16>
	HAL_Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fd2b 	bl	8001aa0 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	461a      	mov	r2, r3
 8001062:	2105      	movs	r1, #5
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff63 	bl	8000f30 <Write16>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	461a      	mov	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff53 	bl	8000f30 <Write16>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800109c:	f643 139f 	movw	r3, #14751	; 0x399f
 80010a0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <INA219_setCalibration_32V_2A+0x40>)
 80010a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <INA219_setCalibration_32V_2A+0x44>)
 80010ac:	220a      	movs	r2, #10
 80010ae:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <INA219_setCalibration_32V_2A+0x48>)
 80010b2:	2202      	movs	r2, #2
 80010b4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <INA219_setCalibration_32V_2A+0x40>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffc8 	bl	8001052 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffd3 	bl	8001072 <INA219_setConfig>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001f0 	.word	0x200001f0
 80010d8:	200001f2 	.word	0x200001f2
 80010dc:	200001f4 	.word	0x200001f4

080010e0 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <INA219_Init+0x5c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <INA219_Init+0x60>)
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	b29b      	uxth	r3, r3
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b299      	uxth	r1, r3
 800110e:	2302      	movs	r3, #2
 8001110:	2203      	movs	r2, #3
 8001112:	68b8      	ldr	r0, [r7, #8]
 8001114:	f002 f8f2 	bl	80032fc <HAL_I2C_IsDeviceReady>
 8001118:	4603      	mov	r3, r0
 800111a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff ff84 	bl	8001030 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff ffb3 	bl	8001094 <INA219_setCalibration_32V_2A>

		return 1;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8001132:	2300      	movs	r3, #0
	}
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200001f2 	.word	0x200001f2
 8001140:	200001f4 	.word	0x200001f4

08001144 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 	if(hadc->Instance == hadc1.Instance)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_ADC_ConvCpltCallback+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d105      	bne.n	8001164 <HAL_ADC_ConvCpltCallback+0x20>
 	{
 		raw_temperature_val = HAL_ADC_GetValue(&hadc1);
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <HAL_ADC_ConvCpltCallback+0x28>)
 800115a:	f000 fe53 	bl	8001e04 <HAL_ADC_GetValue>
 800115e:	4603      	mov	r3, r0
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001162:	6013      	str	r3, [r2, #0]
 	}
 	//if the continous ADC read disable we will start again here
 	//HAL_ADC_Start_IT(&hadc1);
 }
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001f8 	.word	0x200001f8
 8001170:	200002c4 	.word	0x200002c4
 8001174:	00000000 	.word	0x00000000

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fc2d 	bl	80019dc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f89f 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f98f 	bl	80014a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800118a:	f000 f8f7 	bl	800137c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800118e:	f000 f961 	bl	8001454 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001192:	f000 f931 	bl	80013f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001196:	483e      	ldr	r0, [pc, #248]	; (8001290 <main+0x118>)
 8001198:	f000 fd7e 	bl	8001c98 <HAL_ADC_Start_IT>

  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 800119c:	bf00      	nop
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	493c      	ldr	r1, [pc, #240]	; (8001294 <main+0x11c>)
 80011a2:	483d      	ldr	r0, [pc, #244]	; (8001298 <main+0x120>)
 80011a4:	f7ff ff9c 	bl	80010e0 <INA219_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f7      	beq.n	800119e <main+0x26>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LM35
	  //calculation to get temperature
	  voltage_temperature_convert = (float)raw_temperature_val*MAX_CONV_RANGE/MAX_ADC_RESOLUTION_VAL;
 80011ae:	4b3b      	ldr	r3, [pc, #236]	; (800129c <main+0x124>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe42 	bl	8000e3c <__aeabi_ui2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9e8 	bl	8000590 <__aeabi_f2d>
 80011c0:	a32f      	add	r3, pc, #188	; (adr r3, 8001280 <main+0x108>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fa3b 	bl	8000640 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	a32d      	add	r3, pc, #180	; (adr r3, 8001288 <main+0x110>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fb5c 	bl	8000894 <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd24 	bl	8000c30 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <main+0x128>)
 80011ec:	6013      	str	r3, [r2, #0]
	  temperature = voltage_temperature_convert*100;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <main+0x128>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	492c      	ldr	r1, [pc, #176]	; (80012a4 <main+0x12c>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe ffb3 	bl	8000160 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <main+0x130>)
 8001200:	601a      	str	r2, [r3, #0]

	  //INA219
	   vbus = INA219_ReadBusVoltage(&ina219);
 8001202:	4825      	ldr	r0, [pc, #148]	; (8001298 <main+0x120>)
 8001204:	f7ff feb8 	bl	8000f78 <INA219_ReadBusVoltage>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <main+0x134>)
 800120e:	801a      	strh	r2, [r3, #0]
	   vshunt = INA219_ReadShuntVolage(&ina219);
 8001210:	4821      	ldr	r0, [pc, #132]	; (8001298 <main+0x120>)
 8001212:	f7ff fee9 	bl	8000fe8 <INA219_ReadShuntVolage>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <main+0x138>)
 800121c:	801a      	strh	r2, [r3, #0]
	   current = INA219_ReadCurrent(&ina219);
 800121e:	481e      	ldr	r0, [pc, #120]	; (8001298 <main+0x120>)
 8001220:	f7ff feca 	bl	8000fb8 <INA219_ReadCurrent>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <main+0x13c>)
 800122a:	801a      	strh	r2, [r3, #0]

	   memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 800122c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001230:	2100      	movs	r1, #0
 8001232:	4821      	ldr	r0, [pc, #132]	; (80012b8 <main+0x140>)
 8001234:	f006 fa6f 	bl	8007716 <memset>
	   sprintf((char*)Tx_Buffer,"Temp.:%.2f C\nVbus: %u V\nVs: %u mV\nCurrent: %u AV",temperature,vbus,vshunt,current);
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <main+0x130>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f9a7 	bl	8000590 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4919      	ldr	r1, [pc, #100]	; (80012ac <main+0x134>)
 8001248:	8809      	ldrh	r1, [r1, #0]
 800124a:	4608      	mov	r0, r1
 800124c:	4918      	ldr	r1, [pc, #96]	; (80012b0 <main+0x138>)
 800124e:	8809      	ldrh	r1, [r1, #0]
 8001250:	460c      	mov	r4, r1
 8001252:	4918      	ldr	r1, [pc, #96]	; (80012b4 <main+0x13c>)
 8001254:	8809      	ldrh	r1, [r1, #0]
 8001256:	9102      	str	r1, [sp, #8]
 8001258:	9401      	str	r4, [sp, #4]
 800125a:	9000      	str	r0, [sp, #0]
 800125c:	4917      	ldr	r1, [pc, #92]	; (80012bc <main+0x144>)
 800125e:	4816      	ldr	r0, [pc, #88]	; (80012b8 <main+0x140>)
 8001260:	f006 f9f6 	bl	8007650 <siprintf>

	   HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8001264:	230a      	movs	r3, #10
 8001266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126a:	4913      	ldr	r1, [pc, #76]	; (80012b8 <main+0x140>)
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <main+0x148>)
 800126e:	f004 fefb 	bl	8006068 <HAL_UART_Transmit>
	   HAL_Delay(500);
 8001272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001276:	f000 fc13 	bl	8001aa0 <HAL_Delay>
	  voltage_temperature_convert = (float)raw_temperature_val*MAX_CONV_RANGE/MAX_ADC_RESOLUTION_VAL;
 800127a:	e798      	b.n	80011ae <main+0x36>
 800127c:	f3af 8000 	nop.w
 8001280:	cccccccd 	.word	0xcccccccd
 8001284:	400ccccc 	.word	0x400ccccc
 8001288:	00000000 	.word	0x00000000
 800128c:	40affe00 	.word	0x40affe00
 8001290:	200001f8 	.word	0x200001f8
 8001294:	20000228 	.word	0x20000228
 8001298:	20000ad0 	.word	0x20000ad0
 800129c:	200002c4 	.word	0x200002c4
 80012a0:	200002c8 	.word	0x200002c8
 80012a4:	42c80000 	.word	0x42c80000
 80012a8:	200002cc 	.word	0x200002cc
 80012ac:	20000ad8 	.word	0x20000ad8
 80012b0:	20000ada 	.word	0x20000ada
 80012b4:	20000adc 	.word	0x20000adc
 80012b8:	200002d0 	.word	0x200002d0
 80012bc:	08009908 	.word	0x08009908
 80012c0:	2000027c 	.word	0x2000027c

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ce:	2228      	movs	r2, #40	; 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 fa1f 	bl	8007716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	2301      	movs	r3, #1
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001306:	2302      	movs	r3, #2
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131a:	4618      	mov	r0, r3
 800131c:	f004 f98e 	bl	800563c <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001326:	f000 f8ed 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2102      	movs	r1, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fbfa 	bl	8005b40 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001352:	f000 f8d7 	bl	8001504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001356:	2302      	movs	r3, #2
 8001358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800135a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800135e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4618      	mov	r0, r3
 8001364:	f004 fd7a 	bl	8005e5c <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800136e:	f000 f8c9 	bl	8001504 <Error_Handler>
  }
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	; 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_ADC1_Init+0x74>)
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <MX_ADC1_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_ADC1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_ADC1_Init+0x74>)
 800139a:	2201      	movs	r2, #1
 800139c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013ba:	f000 fb95 	bl	8001ae8 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013c4:	f000 f89e 	bl	8001504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013c8:	2304      	movs	r3, #4
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013d0:	2307      	movs	r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_ADC1_Init+0x74>)
 80013da:	f000 fde7 	bl	8001fac <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013e4:	f000 f88e 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	40012400 	.word	0x40012400

080013f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_I2C1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_I2C1_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_I2C1_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_I2C1_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C1_Init+0x50>)
 8001436:	f001 faa7 	bl	8002988 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 f860 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000228 	.word	0x20000228
 800144c:	40005400 	.word	0x40005400
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_USART1_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART1_UART_Init+0x4c>)
 800148c:	f004 fd9c 	bl	8005fc8 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 f835 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000027c 	.word	0x2000027c
 80014a4:	40013800 	.word	0x40013800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_GPIO_Init+0x58>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a13      	ldr	r2, [pc, #76]	; (8001500 <MX_GPIO_Init+0x58>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_GPIO_Init+0x58>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_GPIO_Init+0x58>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <MX_GPIO_Init+0x58>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6193      	str	r3, [r2, #24]
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_GPIO_Init+0x58>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_GPIO_Init+0x58>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <MX_GPIO_Init+0x58>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MX_GPIO_Init+0x58>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 800150c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001510:	2100      	movs	r1, #0
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <Error_Handler+0x28>)
 8001514:	f006 f8ff 	bl	8007716 <memset>
	  sprintf((char*)Tx_Buffer,"System init error\n");
 8001518:	4905      	ldr	r1, [pc, #20]	; (8001530 <Error_Handler+0x2c>)
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <Error_Handler+0x28>)
 800151c:	f006 f898 	bl	8007650 <siprintf>
	  HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001524:	f000 fabc 	bl	8001aa0 <HAL_Delay>
	  memset(Tx_Buffer,0,sizeof(Tx_Buffer)); //clear buffer before write
 8001528:	e7f0      	b.n	800150c <Error_Handler+0x8>
 800152a:	bf00      	nop
 800152c:	200002d0 	.word	0x200002d0
 8001530:	0800993c 	.word	0x0800993c

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_MspInit+0x5c>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	4a14      	ldr	r2, [pc, #80]	; (8001590 <HAL_MspInit+0x5c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6193      	str	r3, [r2, #24]
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_MspInit+0x5c>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x5c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x5c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x5c>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_MspInit+0x60>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_MspInit+0x60>)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000
 8001594:	40010000 	.word	0x40010000

08001598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_ADC_MspInit+0x7c>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d129      	bne.n	800160c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a16      	ldr	r2, [pc, #88]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_ADC_MspInit+0x80>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e8:	2310      	movs	r3, #16
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ec:	2303      	movs	r3, #3
 80015ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <HAL_ADC_MspInit+0x84>)
 80015f8:	f001 f842 	bl	8002680 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2012      	movs	r0, #18
 8001602:	f000 ff46 	bl	8002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001606:	2012      	movs	r0, #18
 8001608:	f000 ff5f 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40012400 	.word	0x40012400
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800

08001620 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_I2C_MspInit+0x90>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d133      	bne.n	80016a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4619      	mov	r1, r3
 800166a:	4813      	ldr	r0, [pc, #76]	; (80016b8 <HAL_I2C_MspInit+0x98>)
 800166c:	f001 f808 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 8001676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167a:	61d3      	str	r3, [r2, #28]
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_I2C_MspInit+0x94>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	201f      	movs	r0, #31
 800168e:	f000 ff00 	bl	8002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001692:	201f      	movs	r0, #31
 8001694:	f000 ff19 	bl	80024ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2020      	movs	r0, #32
 800169e:	f000 fef8 	bl	8002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a2:	2020      	movs	r0, #32
 80016a4:	f000 ff11 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010c00 	.word	0x40010c00

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d139      	bne.n	8001750 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <HAL_UART_MspInit+0xa0>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_UART_MspInit+0xa0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <HAL_UART_MspInit+0xa4>)
 8001722:	f000 ffad 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4619      	mov	r1, r3
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <HAL_UART_MspInit+0xa4>)
 800173c:	f000 ffa0 	bl	8002680 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2025      	movs	r0, #37	; 0x25
 8001746:	f000 fea4 	bl	8002492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800174a:	2025      	movs	r0, #37	; 0x25
 800174c:	f000 febd 	bl	80024ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013800 	.word	0x40013800
 800175c:	40021000 	.word	0x40021000
 8001760:	40010800 	.word	0x40010800

08001764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <NMI_Handler+0x4>

0800176a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler+0x4>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <UsageFault_Handler+0x4>

08001782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 f95d 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <ADC1_2_IRQHandler+0x10>)
 80017ba:	f000 fb2f 	bl	8001e1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001f8 	.word	0x200001f8

080017c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <I2C1_EV_IRQHandler+0x10>)
 80017ce:	f001 fec3 	bl	8003558 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000228 	.word	0x20000228

080017dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <I2C1_ER_IRQHandler+0x10>)
 80017e2:	f002 f80c 	bl	80037fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000228 	.word	0x20000228

080017f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <USART1_IRQHandler+0x10>)
 80017f6:	f004 fcbb 	bl	8006170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000027c 	.word	0x2000027c

08001804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <_kill>:

int _kill(int pid, int sig)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800181c:	f005 ffce 	bl	80077bc <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	2216      	movs	r2, #22
 8001824:	601a      	str	r2, [r3, #0]
  return -1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_exit>:

void _exit (int status)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800183a:	f04f 31ff 	mov.w	r1, #4294967295
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffe7 	bl	8001812 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001844:	e7fe      	b.n	8001844 <_exit+0x12>

08001846 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e00a      	b.n	800186e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001858:	f3af 8000 	nop.w
 800185c:	4601      	mov	r1, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	b2ca      	uxtb	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	dbf0      	blt.n	8001858 <_read+0x12>
  }

  return len;
 8001876:	687b      	ldr	r3, [r7, #4]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e009      	b.n	80018a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	60ba      	str	r2, [r7, #8]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3301      	adds	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbf1      	blt.n	8001892 <_write+0x12>
  }
  return len;
 80018ae:	687b      	ldr	r3, [r7, #4]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_close>:

int _close(int file)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
  return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <_isatty>:

int _isatty(int file)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f005 ff38 	bl	80077bc <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20005000 	.word	0x20005000
 8001978:	00000400 	.word	0x00000400
 800197c:	20000ae0 	.word	0x20000ae0
 8001980:	20000c38 	.word	0x20000c38

08001984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001990:	f7ff fff8 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001996:	490c      	ldr	r1, [pc, #48]	; (80019c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ac:	4c09      	ldr	r4, [pc, #36]	; (80019d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ba:	f005 ff05 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019be:	f7ff fbdb 	bl	8001178 <main>
  bx lr
 80019c2:	4770      	bx	lr
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019cc:	08009cf4 	.word	0x08009cf4
  ldr r2, =_sbss
 80019d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d4:	20000c34 	.word	0x20000c34

080019d8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <CAN1_RX1_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x28>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x28>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f000 fd45 	bl	800247c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	200f      	movs	r0, #15
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fd9c 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000

08001a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fd5d 	bl	80024e6 <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f000 fd25 	bl	8002492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_IncTick+0x1c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_IncTick+0x20>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_IncTick+0x20>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000008 	.word	0x20000008
 8001a88:	20000ae4 	.word	0x20000ae4

08001a8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <HAL_GetTick+0x10>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000ae4 	.word	0x20000ae4

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffe0 	bl	8001a8c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0be      	b.n	8001c88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fd36 	bl	8001598 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb8f 	bl	8002250 <ADC_ConversionStop_Disable>
 8001b32:	4603      	mov	r3, r0
 8001b34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 8099 	bne.w	8001c76 <HAL_ADC_Init+0x18e>
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8095 	bne.w	8001c76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b54:	f023 0302 	bic.w	r3, r3, #2
 8001b58:	f043 0202 	orr.w	r2, r3, #2
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7b1b      	ldrb	r3, [r3, #12]
 8001b6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b80:	d003      	beq.n	8001b8a <HAL_ADC_Init+0xa2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_ADC_Init+0xa8>
 8001b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8e:	e000      	b.n	8001b92 <HAL_ADC_Init+0xaa>
 8001b90:	2300      	movs	r3, #0
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7d1b      	ldrb	r3, [r3, #20]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d119      	bne.n	8001bd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b1b      	ldrb	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	035a      	lsls	r2, r3, #13
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e00b      	b.n	8001bd4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_ADC_Init+0x1a8>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c04:	d003      	beq.n	8001c0e <HAL_ADC_Init+0x126>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d104      	bne.n	8001c18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_ADC_Init+0x1ac>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10b      	bne.n	8001c54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c52:	e018      	b.n	8001c86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f023 0312 	bic.w	r3, r3, #18
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c74:	e007      	b.n	8001c86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	ffe1f7fd 	.word	0xffe1f7fd
 8001c94:	ff1f0efe 	.word	0xff1f0efe

08001c98 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Start_IT+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0a0      	b.n	8001df4 <HAL_ADC_Start_IT+0x15c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa6e 	bl	800219c <ADC_Enable>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 808f 	bne.w	8001dea <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a45      	ldr	r2, [pc, #276]	; (8001dfc <HAL_ADC_Start_IT+0x164>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d105      	bne.n	8001cf6 <HAL_ADC_Start_IT+0x5e>
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <HAL_ADC_Start_IT+0x168>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d115      	bne.n	8001d22 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d026      	beq.n	8001d5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d20:	e01d      	b.n	8001d5e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_ADC_Start_IT+0x168>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_ADC_Start_IT+0xaa>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_ADC_Start_IT+0x164>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_Start_IT+0xc6>
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_ADC_Start_IT+0x168>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	f023 0206 	bic.w	r2, r3, #6
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0202 	mvn.w	r2, #2
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001daa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dae:	d113      	bne.n	8001dd8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_ADC_Start_IT+0x164>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_ADC_Start_IT+0x168>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d108      	bne.n	8001dd8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	e00c      	b.n	8001df2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e003      	b.n	8001df2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40012800 	.word	0x40012800
 8001e00:	40012400 	.word	0x40012400

08001e04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03e      	beq.n	8001ebc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d039      	beq.n	8001ebc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e6e:	d11d      	bne.n	8001eac <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d119      	bne.n	8001eac <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0220 	bic.w	r2, r2, #32
 8001e86:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff f949 	bl	8001144 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0212 	mvn.w	r2, #18
 8001eba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d04d      	beq.n	8001f62 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d048      	beq.n	8001f62 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ef2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ef6:	d012      	beq.n	8001f1e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d125      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f14:	d11d      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d119      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f2c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f9bd 	bl	80022d2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 020c 	mvn.w	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d012      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00d      	beq.n	8001f92 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f809 	bl	8001f9a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0201 	mvn.w	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x20>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0dc      	b.n	8002186 <HAL_ADC_ConfigChannel+0x1da>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d81c      	bhi.n	8002016 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	3b05      	subs	r3, #5
 8001fee:	221f      	movs	r2, #31
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4019      	ands	r1, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	3b05      	subs	r3, #5
 8002008:	fa00 f203 	lsl.w	r2, r0, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
 8002014:	e03c      	b.n	8002090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d81c      	bhi.n	8002058 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b23      	subs	r3, #35	; 0x23
 8002030:	221f      	movs	r2, #31
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	4019      	ands	r1, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	3b23      	subs	r3, #35	; 0x23
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
 8002056:	e01b      	b.n	8002090 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b41      	subs	r3, #65	; 0x41
 800206a:	221f      	movs	r2, #31
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	4019      	ands	r1, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b41      	subs	r3, #65	; 0x41
 8002084:	fa00 f203 	lsl.w	r2, r0, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b09      	cmp	r3, #9
 8002096:	d91c      	bls.n	80020d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	3b1e      	subs	r3, #30
 80020aa:	2207      	movs	r2, #7
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6898      	ldr	r0, [r3, #8]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	3b1e      	subs	r3, #30
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	e019      	b.n	8002106 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6919      	ldr	r1, [r3, #16]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	2207      	movs	r2, #7
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4019      	ands	r1, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6898      	ldr	r0, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b10      	cmp	r3, #16
 800210c:	d003      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002112:	2b11      	cmp	r3, #17
 8002114:	d132      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_ADC_ConfigChannel+0x1e4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d125      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d126      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800213c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d11a      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_ADC_ConfigChannel+0x1e8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_ADC_ConfigChannel+0x1ec>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9a      	lsrs	r2, r3, #18
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215c:	e002      	b.n	8002164 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_ConfigChannel+0x1b2>
 800216a:	e007      	b.n	800217c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012400 	.word	0x40012400
 8002194:	20000000 	.word	0x20000000
 8002198:	431bde83 	.word	0x431bde83

0800219c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d040      	beq.n	800223c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ca:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <ADC_Enable+0xac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <ADC_Enable+0xb0>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	0c9b      	lsrs	r3, r3, #18
 80021d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021d8:	e002      	b.n	80021e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3b01      	subs	r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f9      	bne.n	80021da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021e6:	f7ff fc51 	bl	8001a8c <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021ec:	e01f      	b.n	800222e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ee:	f7ff fc4d 	bl	8001a8c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d918      	bls.n	800222e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d011      	beq.n	800222e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d1d8      	bne.n	80021ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000000 	.word	0x20000000
 800224c:	431bde83 	.word	0x431bde83

08002250 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d12e      	bne.n	80022c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0201 	bic.w	r2, r2, #1
 8002278:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800227a:	f7ff fc07 	bl	8001a8c <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002280:	e01b      	b.n	80022ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002282:	f7ff fc03 	bl	8001a8c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d914      	bls.n	80022ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10d      	bne.n	80022ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e007      	b.n	80022ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d0dc      	beq.n	8002282 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4906      	ldr	r1, [pc, #24]	; (800237c <__NVIC_EnableIRQ+0x34>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002448:	d301      	bcc.n	800244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <SysTick_Config+0x40>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002456:	210f      	movs	r1, #15
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f7ff ff90 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SysTick_Config+0x40>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SysTick_Config+0x40>)
 8002468:	2207      	movs	r2, #7
 800246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	e000e010 	.word	0xe000e010

0800247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ff2d 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a4:	f7ff ff42 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	6978      	ldr	r0, [r7, #20]
 80024b0:	f7ff ff90 	bl	80023d4 <NVIC_EncodePriority>
 80024b4:	4602      	mov	r2, r0
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff5f 	bl	8002380 <__NVIC_SetPriority>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff35 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffa2 	bl	8002438 <SysTick_Config>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d008      	beq.n	8002528 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e020      	b.n	800256a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 020e 	bic.w	r2, r2, #14
 8002536:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d005      	beq.n	8002598 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2204      	movs	r2, #4
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e051      	b.n	800263c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020e 	bic.w	r2, r2, #14
 80025a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_DMA_Abort_IT+0xd4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d029      	beq.n	8002616 <HAL_DMA_Abort_IT+0xa2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	; (800264c <HAL_DMA_Abort_IT+0xd8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_Abort_IT+0x9e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_DMA_Abort_IT+0xdc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_Abort_IT+0x98>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_DMA_Abort_IT+0xe0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d012      	beq.n	8002606 <HAL_DMA_Abort_IT+0x92>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_DMA_Abort_IT+0xe4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00a      	beq.n	8002600 <HAL_DMA_Abort_IT+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_DMA_Abort_IT+0xe8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d102      	bne.n	80025fa <HAL_DMA_Abort_IT+0x86>
 80025f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025f8:	e00e      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 80025fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fe:	e00b      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 8002600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002604:	e008      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 8002606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260a:	e005      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 800260c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002610:	e002      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 8002612:	2310      	movs	r3, #16
 8002614:	e000      	b.n	8002618 <HAL_DMA_Abort_IT+0xa4>
 8002616:	2301      	movs	r3, #1
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_DMA_Abort_IT+0xec>)
 800261a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
    } 
  }
  return status;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40020008 	.word	0x40020008
 800264c:	4002001c 	.word	0x4002001c
 8002650:	40020030 	.word	0x40020030
 8002654:	40020044 	.word	0x40020044
 8002658:	40020058 	.word	0x40020058
 800265c:	4002006c 	.word	0x4002006c
 8002660:	40020000 	.word	0x40020000

08002664 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002672:	b2db      	uxtb	r3, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b08b      	sub	sp, #44	; 0x2c
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	e169      	b.n	8002968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002694:	2201      	movs	r2, #1
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8158 	bne.w	8002962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a9a      	ldr	r2, [pc, #616]	; (8002920 <HAL_GPIO_Init+0x2a0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d05e      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026bc:	4a98      	ldr	r2, [pc, #608]	; (8002920 <HAL_GPIO_Init+0x2a0>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d875      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026c2:	4a98      	ldr	r2, [pc, #608]	; (8002924 <HAL_GPIO_Init+0x2a4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d058      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026c8:	4a96      	ldr	r2, [pc, #600]	; (8002924 <HAL_GPIO_Init+0x2a4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d86f      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026ce:	4a96      	ldr	r2, [pc, #600]	; (8002928 <HAL_GPIO_Init+0x2a8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d052      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026d4:	4a94      	ldr	r2, [pc, #592]	; (8002928 <HAL_GPIO_Init+0x2a8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d869      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026da:	4a94      	ldr	r2, [pc, #592]	; (800292c <HAL_GPIO_Init+0x2ac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d04c      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026e0:	4a92      	ldr	r2, [pc, #584]	; (800292c <HAL_GPIO_Init+0x2ac>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d863      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026e6:	4a92      	ldr	r2, [pc, #584]	; (8002930 <HAL_GPIO_Init+0x2b0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d046      	beq.n	800277a <HAL_GPIO_Init+0xfa>
 80026ec:	4a90      	ldr	r2, [pc, #576]	; (8002930 <HAL_GPIO_Init+0x2b0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d85d      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d82a      	bhi.n	800274c <HAL_GPIO_Init+0xcc>
 80026f6:	2b12      	cmp	r3, #18
 80026f8:	d859      	bhi.n	80027ae <HAL_GPIO_Init+0x12e>
 80026fa:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <HAL_GPIO_Init+0x80>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	0800277b 	.word	0x0800277b
 8002704:	08002755 	.word	0x08002755
 8002708:	08002767 	.word	0x08002767
 800270c:	080027a9 	.word	0x080027a9
 8002710:	080027af 	.word	0x080027af
 8002714:	080027af 	.word	0x080027af
 8002718:	080027af 	.word	0x080027af
 800271c:	080027af 	.word	0x080027af
 8002720:	080027af 	.word	0x080027af
 8002724:	080027af 	.word	0x080027af
 8002728:	080027af 	.word	0x080027af
 800272c:	080027af 	.word	0x080027af
 8002730:	080027af 	.word	0x080027af
 8002734:	080027af 	.word	0x080027af
 8002738:	080027af 	.word	0x080027af
 800273c:	080027af 	.word	0x080027af
 8002740:	080027af 	.word	0x080027af
 8002744:	0800275d 	.word	0x0800275d
 8002748:	08002771 	.word	0x08002771
 800274c:	4a79      	ldr	r2, [pc, #484]	; (8002934 <HAL_GPIO_Init+0x2b4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002752:	e02c      	b.n	80027ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	623b      	str	r3, [r7, #32]
          break;
 800275a:	e029      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	3304      	adds	r3, #4
 8002762:	623b      	str	r3, [r7, #32]
          break;
 8002764:	e024      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	3308      	adds	r3, #8
 800276c:	623b      	str	r3, [r7, #32]
          break;
 800276e:	e01f      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	330c      	adds	r3, #12
 8002776:	623b      	str	r3, [r7, #32]
          break;
 8002778:	e01a      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002782:	2304      	movs	r3, #4
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e013      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d105      	bne.n	800279c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002790:	2308      	movs	r3, #8
 8002792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	611a      	str	r2, [r3, #16]
          break;
 800279a:	e009      	b.n	80027b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	615a      	str	r2, [r3, #20]
          break;
 80027a6:	e003      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
          break;
 80027ac:	e000      	b.n	80027b0 <HAL_GPIO_Init+0x130>
          break;
 80027ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2bff      	cmp	r3, #255	; 0xff
 80027b4:	d801      	bhi.n	80027ba <HAL_GPIO_Init+0x13a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e001      	b.n	80027be <HAL_GPIO_Init+0x13e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d802      	bhi.n	80027cc <HAL_GPIO_Init+0x14c>
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x152>
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	3b08      	subs	r3, #8
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	210f      	movs	r1, #15
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	431a      	orrs	r2, r3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80b1 	beq.w	8002962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002800:	4b4d      	ldr	r3, [pc, #308]	; (8002938 <HAL_GPIO_Init+0x2b8>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	4a4c      	ldr	r2, [pc, #304]	; (8002938 <HAL_GPIO_Init+0x2b8>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6193      	str	r3, [r2, #24]
 800280c:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_GPIO_Init+0x2b8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002818:	4a48      	ldr	r2, [pc, #288]	; (800293c <HAL_GPIO_Init+0x2bc>)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a40      	ldr	r2, [pc, #256]	; (8002940 <HAL_GPIO_Init+0x2c0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_GPIO_Init+0x1ec>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_GPIO_Init+0x2c4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00d      	beq.n	8002868 <HAL_GPIO_Init+0x1e8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <HAL_GPIO_Init+0x2c8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <HAL_GPIO_Init+0x1e4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <HAL_GPIO_Init+0x2cc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_GPIO_Init+0x1e0>
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002860:	2304      	movs	r3, #4
 8002862:	e004      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002864:	2302      	movs	r3, #2
 8002866:	e002      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_GPIO_Init+0x1ee>
 800286c:	2300      	movs	r3, #0
 800286e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002870:	f002 0203 	and.w	r2, r2, #3
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	4093      	lsls	r3, r2
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800287e:	492f      	ldr	r1, [pc, #188]	; (800293c <HAL_GPIO_Init+0x2bc>)
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	492c      	ldr	r1, [pc, #176]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4928      	ldr	r1, [pc, #160]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4922      	ldr	r1, [pc, #136]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	491e      	ldr	r1, [pc, #120]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4918      	ldr	r1, [pc, #96]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4914      	ldr	r1, [pc, #80]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 8002900:	4013      	ands	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d021      	beq.n	8002954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	490e      	ldr	r1, [pc, #56]	; (8002950 <HAL_GPIO_Init+0x2d0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e021      	b.n	8002962 <HAL_GPIO_Init+0x2e2>
 800291e:	bf00      	nop
 8002920:	10320000 	.word	0x10320000
 8002924:	10310000 	.word	0x10310000
 8002928:	10220000 	.word	0x10220000
 800292c:	10210000 	.word	0x10210000
 8002930:	10120000 	.word	0x10120000
 8002934:	10110000 	.word	0x10110000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	40010800 	.word	0x40010800
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40011000 	.word	0x40011000
 800294c:	40011400 	.word	0x40011400
 8002950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_GPIO_Init+0x304>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	43db      	mvns	r3, r3
 800295c:	4909      	ldr	r1, [pc, #36]	; (8002984 <HAL_GPIO_Init+0x304>)
 800295e:	4013      	ands	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	f47f ae8e 	bne.w	8002694 <HAL_GPIO_Init+0x14>
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	372c      	adds	r7, #44	; 0x2c
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e12b      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fe36 	bl	8001620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ec:	f003 f9f0 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a81      	ldr	r2, [pc, #516]	; (8002bfc <HAL_I2C_Init+0x274>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d807      	bhi.n	8002a0c <HAL_I2C_Init+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a80      	ldr	r2, [pc, #512]	; (8002c00 <HAL_I2C_Init+0x278>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e006      	b.n	8002a1a <HAL_I2C_Init+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	; (8002c04 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0e7      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a78      	ldr	r2, [pc, #480]	; (8002c08 <HAL_I2C_Init+0x280>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	; (8002bfc <HAL_I2C_Init+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <HAL_I2C_Init+0xd4>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e009      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <HAL_I2C_Init+0x284>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	; (8002bfc <HAL_I2C_Init+0x274>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d819      	bhi.n	8002ac4 <HAL_I2C_Init+0x13c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e59      	subs	r1, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_I2C_Init+0x138>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e59      	subs	r1, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	e051      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e04f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Init+0x168>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e012      	b.n	8002b16 <HAL_I2C_Init+0x18e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Init+0x196>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_I2C_Init+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6911      	ldr	r1, [r2, #16]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	000186a0 	.word	0x000186a0
 8002c00:	001e847f 	.word	0x001e847f
 8002c04:	003d08ff 	.word	0x003d08ff
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d103      	bne.n	8002c2e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	813b      	strh	r3, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c52:	f7fe ff1b 	bl	8001a8c <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	f040 80d9 	bne.w	8002e18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2319      	movs	r3, #25
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	496d      	ldr	r1, [pc, #436]	; (8002e24 <HAL_I2C_Mem_Write+0x1ec>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f002 fa61 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0cc      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x56>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0c5      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d007      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2221      	movs	r2, #33	; 0x21
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <HAL_I2C_Mem_Write+0x1f0>)
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf6:	88f8      	ldrh	r0, [r7, #6]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	8979      	ldrh	r1, [r7, #10]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f001 fff0 	bl	8004cec <I2C_RequestMemoryWrite>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d052      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e081      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f002 fb26 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d11b      	bne.n	8002db8 <HAL_I2C_Mem_Write+0x180>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d017      	beq.n	8002db8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1aa      	bne.n	8002d16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f002 fb19 	bl	80053fc <I2C_WaitOnBTFFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00d      	beq.n	8002dec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d107      	bne.n	8002de8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e016      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00100002 	.word	0x00100002
 8002e28:	ffff0000 	.word	0xffff0000

08002e2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e4a:	f7fe fe1f 	bl	8001a8c <HAL_GetTick>
 8002e4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	f040 8244 	bne.w	80032e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2319      	movs	r3, #25
 8002e64:	2201      	movs	r2, #1
 8002e66:	4982      	ldr	r1, [pc, #520]	; (8003070 <HAL_I2C_Mem_Read+0x244>)
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f002 f965 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	e237      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x5a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e230      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2222      	movs	r2, #34	; 0x22
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a62      	ldr	r2, [pc, #392]	; (8003074 <HAL_I2C_Mem_Read+0x248>)
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eee:	88f8      	ldrh	r0, [r7, #6]
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	8979      	ldrh	r1, [r7, #10]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4603      	mov	r3, r0
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f001 ff8a 	bl	8004e18 <I2C_RequestMemoryRead>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1ec      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d113      	bne.n	8002f3e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e1c0      	b.n	80032c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d11e      	bne.n	8002f84 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f56:	b672      	cpsid	i
}
 8002f58:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f80:	b662      	cpsie	i
}
 8002f82:	e035      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d11e      	bne.n	8002fca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fc6:	b662      	cpsie	i
}
 8002fc8:	e012      	b.n	8002ff0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fd8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ff0:	e166      	b.n	80032c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	f200 811f 	bhi.w	800323a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b01      	cmp	r3, #1
 8003002:	d123      	bne.n	800304c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f002 fa71 	bl	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e167      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a
 800304a:	e139      	b.n	80032c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b02      	cmp	r3, #2
 8003052:	d152      	bne.n	80030fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	2200      	movs	r2, #0
 800305c:	4906      	ldr	r1, [pc, #24]	; (8003078 <HAL_I2C_Mem_Read+0x24c>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f002 f86a 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e13c      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
 800306e:	bf00      	nop
 8003070:	00100002 	.word	0x00100002
 8003074:	ffff0000 	.word	0xffff0000
 8003078:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800307c:	b672      	cpsid	i
}
 800307e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030c2:	b662      	cpsie	i
}
 80030c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f8:	e0e2      	b.n	80032c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2200      	movs	r2, #0
 8003102:	497b      	ldr	r1, [pc, #492]	; (80032f0 <HAL_I2C_Mem_Read+0x4c4>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f002 f817 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0e9      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003122:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003124:	b672      	cpsid	i
}
 8003126:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_I2C_Mem_Read+0x4c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_I2C_Mem_Read+0x4cc>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0a1a      	lsrs	r2, r3, #8
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00da      	lsls	r2, r3, #3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	3b01      	subs	r3, #1
 8003178:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d118      	bne.n	80031b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80031a2:	b662      	cpsie	i
}
 80031a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e09a      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d1d9      	bne.n	8003174 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003202:	b662      	cpsie	i
}
 8003204:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003238:	e042      	b.n	80032c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f002 f956 	bl	80054f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e04c      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d118      	bne.n	80032c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f ae94 	bne.w	8002ff2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3728      	adds	r7, #40	; 0x28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	00010004 	.word	0x00010004
 80032f4:	20000000 	.word	0x20000000
 80032f8:	14f8b589 	.word	0x14f8b589

080032fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	460b      	mov	r3, r1
 800330a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7fe fbbe 	bl	8001a8c <HAL_GetTick>
 8003310:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	f040 8111 	bne.w	8003546 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2319      	movs	r3, #25
 800332a:	2201      	movs	r2, #1
 800332c:	4988      	ldr	r1, [pc, #544]	; (8003550 <HAL_I2C_IsDeviceReady+0x254>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f001 ff02 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
 800333c:	e104      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2C_IsDeviceReady+0x50>
 8003348:	2302      	movs	r3, #2
 800334a:	e0fd      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d007      	beq.n	8003372 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003380:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2224      	movs	r2, #36	; 0x24
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a70      	ldr	r2, [pc, #448]	; (8003554 <HAL_I2C_IsDeviceReady+0x258>)
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f001 fec0 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033cc:	d103      	bne.n	80033d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0b6      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fb4f 	bl	8001a8c <HAL_GetTick>
 80033ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800341e:	e025      	b.n	800346c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003420:	f7fe fb34 	bl	8001a8c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d302      	bcc.n	8003436 <HAL_I2C_IsDeviceReady+0x13a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22a0      	movs	r2, #160	; 0xa0
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2ba0      	cmp	r3, #160	; 0xa0
 8003476:	d005      	beq.n	8003484 <HAL_I2C_IsDeviceReady+0x188>
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <HAL_I2C_IsDeviceReady+0x188>
 800347e:	7dbb      	ldrb	r3, [r7, #22]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0cd      	beq.n	8003420 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d129      	bne.n	80034ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2319      	movs	r3, #25
 80034c6:	2201      	movs	r2, #1
 80034c8:	4921      	ldr	r1, [pc, #132]	; (8003550 <HAL_I2C_IsDeviceReady+0x254>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f001 fe34 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e036      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e02c      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003506:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2319      	movs	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	490f      	ldr	r1, [pc, #60]	; (8003550 <HAL_I2C_IsDeviceReady+0x254>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f001 fe10 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e012      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3301      	adds	r3, #1
 8003526:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	f4ff af32 	bcc.w	8003396 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
  }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	00100002 	.word	0x00100002
 8003554:	ffff0000 	.word	0xffff0000

08003558 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003578:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b10      	cmp	r3, #16
 8003586:	d003      	beq.n	8003590 <HAL_I2C_EV_IRQHandler+0x38>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	f040 80b1 	bne.w	80036f2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035b0:	d003      	beq.n	80035ba <HAL_I2C_EV_IRQHandler+0x62>
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035b8:	d101      	bne.n	80035be <HAL_I2C_EV_IRQHandler+0x66>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_I2C_EV_IRQHandler+0x68>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f000 8114 	beq.w	80037ee <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x90>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f002 f813 	bl	8005606 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fd60 	bl	80040a6 <I2C_Master_SB>
 80035e6:	e083      	b.n	80036f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_I2C_EV_IRQHandler+0xac>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fdd7 	bl	80041b0 <I2C_Master_ADD10>
 8003602:	e075      	b.n	80036f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_I2C_EV_IRQHandler+0xc8>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fdf2 	bl	8004202 <I2C_Master_ADDR>
 800361e:	e067      	b.n	80036f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d036      	beq.n	8003698 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003638:	f000 80db 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x10a>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x10a>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9d4 	bl	8003a08 <I2C_MasterTransmit_TXE>
 8003660:	e046      	b.n	80036f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80c2 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80bc 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800367a:	7bbb      	ldrb	r3, [r7, #14]
 800367c:	2b21      	cmp	r3, #33	; 0x21
 800367e:	d103      	bne.n	8003688 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa5d 	bl	8003b40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003686:	e0b4      	b.n	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b40      	cmp	r3, #64	; 0x40
 800368c:	f040 80b1 	bne.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 facb 	bl	8003c2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003696:	e0ac      	b.n	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a6:	f000 80a4 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_EV_IRQHandler+0x178>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_I2C_EV_IRQHandler+0x178>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fb47 	bl	8003d5c <I2C_MasterReceive_RXNE>
 80036ce:	e00f      	b.n	80036f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 808b 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8085 	beq.w	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fbf2 	bl	8003ed2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	e080      	b.n	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80036f0:	e07f      	b.n	80037f2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e007      	b.n	8003714 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d011      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x1ea>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00c      	beq.n	8003742 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 ffb8 	bl	80046b0 <I2C_Slave_ADDR>
 8003740:	e05a      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x206>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fff2 	bl	8004740 <I2C_Slave_STOPF>
 800375c:	e04c      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800375e:	7bbb      	ldrb	r3, [r7, #14]
 8003760:	2b21      	cmp	r3, #33	; 0x21
 8003762:	d002      	beq.n	800376a <HAL_I2C_EV_IRQHandler+0x212>
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	2b29      	cmp	r3, #41	; 0x29
 8003768:	d120      	bne.n	80037ac <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x238>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x238>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d103      	bne.n	8003790 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fed5 	bl	8004538 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800378e:	e032      	b.n	80037f6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02d      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0x29e>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d028      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 ff04 	bl	80045b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037aa:	e024      	b.n	80037f6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 ff11 	bl	80045f2 <I2C_SlaveReceive_RXNE>
 80037d0:	e012      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 ff41 	bl	800466e <I2C_SlaveReceive_BTF>
 80037ec:	e004      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08a      	sub	sp, #40	; 0x28
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003820:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_I2C_ER_IRQHandler+0x5a>
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d010      	beq.n	8003858 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003846:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <HAL_I2C_ER_IRQHandler+0x80>
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800387c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d03e      	beq.n	8003906 <HAL_I2C_ER_IRQHandler+0x108>
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d039      	beq.n	8003906 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003892:	7efb      	ldrb	r3, [r7, #27]
 8003894:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038ac:	7ebb      	ldrb	r3, [r7, #26]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d112      	bne.n	80038d8 <HAL_I2C_ER_IRQHandler+0xda>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10f      	bne.n	80038d8 <HAL_I2C_ER_IRQHandler+0xda>
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	2b21      	cmp	r3, #33	; 0x21
 80038bc:	d008      	beq.n	80038d0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b29      	cmp	r3, #41	; 0x29
 80038c2:	d005      	beq.n	80038d0 <HAL_I2C_ER_IRQHandler+0xd2>
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b28      	cmp	r3, #40	; 0x28
 80038c8:	d106      	bne.n	80038d8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b21      	cmp	r3, #33	; 0x21
 80038ce:	d103      	bne.n	80038d8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 f865 	bl	80049a0 <I2C_Slave_AF>
 80038d6:	e016      	b.n	8003906 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038ea:	7efb      	ldrb	r3, [r7, #27]
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d002      	beq.n	80038f6 <HAL_I2C_ER_IRQHandler+0xf8>
 80038f0:	7efb      	ldrb	r3, [r7, #27]
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d107      	bne.n	8003906 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003904:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00d      	beq.n	800392c <HAL_I2C_ER_IRQHandler+0x12e>
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800392a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 f8a2 	bl	8004a88 <I2C_ITError>
  }
}
 8003944:	bf00      	nop
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	70fb      	strb	r3, [r7, #3]
 80039a0:	4613      	mov	r3, r2
 80039a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d150      	bne.n	8003ad0 <I2C_MasterTransmit_TXE+0xc8>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b21      	cmp	r3, #33	; 0x21
 8003a32:	d14d      	bne.n	8003ad0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d01d      	beq.n	8003a76 <I2C_MasterTransmit_TXE+0x6e>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d01a      	beq.n	8003a76 <I2C_MasterTransmit_TXE+0x6e>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a46:	d016      	beq.n	8003a76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2211      	movs	r2, #17
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff6c 	bl	800394c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a74:	e060      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d107      	bne.n	8003ac0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff81 	bl	80039c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003abe:	e03b      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ff3f 	bl	800394c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ace:	e033      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	2b21      	cmp	r3, #33	; 0x21
 8003ad4:	d005      	beq.n	8003ae2 <I2C_MasterTransmit_TXE+0xda>
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d12d      	bne.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b22      	cmp	r3, #34	; 0x22
 8003ae0:	d12a      	bne.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d108      	bne.n	8003afe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003afc:	e01c      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d103      	bne.n	8003b12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f88e 	bl	8003c2c <I2C_MemoryTransmit_TXE_BTF>
}
 8003b10:	e012      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b36:	e7ff      	b.n	8003b38 <I2C_MasterTransmit_TXE+0x130>
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b21      	cmp	r3, #33	; 0x21
 8003b58:	d164      	bne.n	8003c24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d012      	beq.n	8003b8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b88:	e04c      	b.n	8003c24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d01d      	beq.n	8003bcc <I2C_MasterTransmit_BTF+0x8c>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d01a      	beq.n	8003bcc <I2C_MasterTransmit_BTF+0x8c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b9c:	d016      	beq.n	8003bcc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2211      	movs	r2, #17
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fec1 	bl	800394c <HAL_I2C_MasterTxCpltCallback>
}
 8003bca:	e02b      	b.n	8003c24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bda:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d107      	bne.n	8003c16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fed6 	bl	80039c0 <HAL_I2C_MemTxCpltCallback>
}
 8003c14:	e006      	b.n	8003c24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe94 	bl	800394c <HAL_I2C_MasterTxCpltCallback>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11d      	bne.n	8003c80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10b      	bne.n	8003c64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c62:	e077      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	121b      	asrs	r3, r3, #8
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c7e:	e069      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10b      	bne.n	8003ca0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c9e:	e059      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d152      	bne.n	8003d4e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b22      	cmp	r3, #34	; 0x22
 8003cac:	d10d      	bne.n	8003cca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cbc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cc8:	e044      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b21      	cmp	r3, #33	; 0x21
 8003cd8:	d112      	bne.n	8003d00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cfe:	e029      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d124      	bne.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b21      	cmp	r3, #33	; 0x21
 8003d0e:	d121      	bne.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fe3a 	bl	80039c0 <HAL_I2C_MemTxCpltCallback>
}
 8003d4c:	e002      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe ff5e 	bl	8002c10 <I2C_Flush_DR>
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	f040 80ac 	bne.w	8003eca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d921      	bls.n	8003dc4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	f040 808c 	bne.w	8003eca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003dc2:	e082      	b.n	8003eca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d075      	beq.n	8003eb8 <I2C_MasterReceive_RXNE+0x15c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <I2C_MasterReceive_RXNE+0x7c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d16f      	bne.n	8003eb8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f001 fb57 	bl	800548c <I2C_WaitOnSTOPRequestThroughIT>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d142      	bne.n	8003e6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10a      	bne.n	8003e54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fdc0 	bl	80039d2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e52:	e03a      	b.n	8003eca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2212      	movs	r2, #18
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fd7b 	bl	800395e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e68:	e02f      	b.n	8003eca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fd97 	bl	80039e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eb6:	e008      	b.n	8003eca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec6:	605a      	str	r2, [r3, #4]
}
 8003ec8:	e7ff      	b.n	8003eca <I2C_MasterReceive_RXNE+0x16e>
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d11b      	bne.n	8003f22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f20:	e0bd      	b.n	800409e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d129      	bne.n	8003f80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00a      	beq.n	8003f58 <I2C_MasterReceive_BTF+0x86>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d007      	beq.n	8003f58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f7e:	e08e      	b.n	800409e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d176      	bne.n	8004078 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <I2C_MasterReceive_BTF+0xc4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d108      	bne.n	8003fa8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e019      	b.n	8003fdc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d002      	beq.n	8003fb4 <I2C_MasterReceive_BTF+0xe2>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d108      	bne.n	8003fc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e00a      	b.n	8003fdc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d007      	beq.n	8003fdc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004036:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d10a      	bne.n	8004062 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fcb9 	bl	80039d2 <HAL_I2C_MemRxCpltCallback>
}
 8004060:	e01d      	b.n	800409e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2212      	movs	r2, #18
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fc74 	bl	800395e <HAL_I2C_MasterRxCpltCallback>
}
 8004076:	e012      	b.n	800409e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d117      	bne.n	80040ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040d4:	e067      	b.n	80041a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]
}
 80040e8:	e05d      	b.n	80041a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d133      	bne.n	800415c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d109      	bne.n	8004114 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	e008      	b.n	8004126 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2da      	uxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <I2C_Master_SB+0x92>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d032      	beq.n	80041a6 <I2C_Master_SB+0x100>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02d      	beq.n	80041a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004158:	605a      	str	r2, [r3, #4]
}
 800415a:	e024      	b.n	80041a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10e      	bne.n	8004182 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	b29b      	uxth	r3, r3
 800416a:	11db      	asrs	r3, r3, #7
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0306 	and.w	r3, r3, #6
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f063 030f 	orn	r3, r3, #15
 8004178:	b2da      	uxtb	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
}
 8004180:	e011      	b.n	80041a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10d      	bne.n	80041a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	b29b      	uxth	r3, r3
 8004190:	11db      	asrs	r3, r3, #7
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0306 	and.w	r3, r3, #6
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f063 030e 	orn	r3, r3, #14
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d004      	beq.n	80041d6 <I2C_Master_ADD10+0x26>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00c      	beq.n	80041f8 <I2C_Master_ADD10+0x48>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f6:	605a      	str	r2, [r3, #4]
  }
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004202:	b480      	push	{r7}
 8004204:	b091      	sub	sp, #68	; 0x44
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004210:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b22      	cmp	r3, #34	; 0x22
 800422a:	f040 8174 	bne.w	8004516 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <I2C_Master_ADDR+0x54>
 8004236:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10b      	bne.n	8004256 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	e16b      	b.n	800452e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d11d      	bne.n	800429a <I2C_Master_ADDR+0x98>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004266:	d118      	bne.n	800429a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	651a      	str	r2, [r3, #80]	; 0x50
 8004298:	e149      	b.n	800452e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d113      	bne.n	80042cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a4:	2300      	movs	r3, #0
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e120      	b.n	800450e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	f040 808a 	bne.w	80043ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042de:	d137      	bne.n	8004350 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fe:	d113      	bne.n	8004328 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	e0f2      	b.n	800450e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e0de      	b.n	800450e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	2b08      	cmp	r3, #8
 8004354:	d02e      	beq.n	80043b4 <I2C_Master_ADDR+0x1b2>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b20      	cmp	r3, #32
 800435a:	d02b      	beq.n	80043b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	2b12      	cmp	r3, #18
 8004360:	d102      	bne.n	8004368 <I2C_Master_ADDR+0x166>
 8004362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004364:	2b01      	cmp	r3, #1
 8004366:	d125      	bne.n	80043b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2b04      	cmp	r3, #4
 800436c:	d00e      	beq.n	800438c <I2C_Master_ADDR+0x18a>
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	2b02      	cmp	r3, #2
 8004372:	d00b      	beq.n	800438c <I2C_Master_ADDR+0x18a>
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	2b10      	cmp	r3, #16
 8004378:	d008      	beq.n	800438c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e007      	b.n	800439c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800439a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	e0ac      	b.n	800450e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e090      	b.n	800450e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d158      	bne.n	80044a8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d021      	beq.n	8004440 <I2C_Master_ADDR+0x23e>
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d01e      	beq.n	8004440 <I2C_Master_ADDR+0x23e>
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	2b10      	cmp	r3, #16
 8004406:	d01b      	beq.n	8004440 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004416:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e012      	b.n	8004466 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800444e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004474:	d14b      	bne.n	800450e <I2C_Master_ADDR+0x30c>
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800447c:	d00b      	beq.n	8004496 <I2C_Master_ADDR+0x294>
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b01      	cmp	r3, #1
 8004482:	d008      	beq.n	8004496 <I2C_Master_ADDR+0x294>
 8004484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004486:	2b08      	cmp	r3, #8
 8004488:	d005      	beq.n	8004496 <I2C_Master_ADDR+0x294>
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	2b10      	cmp	r3, #16
 800448e:	d002      	beq.n	8004496 <I2C_Master_ADDR+0x294>
 8004490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004492:	2b20      	cmp	r3, #32
 8004494:	d13b      	bne.n	800450e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e032      	b.n	800450e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	d117      	bne.n	80044f8 <I2C_Master_ADDR+0x2f6>
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ce:	d00b      	beq.n	80044e8 <I2C_Master_ADDR+0x2e6>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d008      	beq.n	80044e8 <I2C_Master_ADDR+0x2e6>
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d005      	beq.n	80044e8 <I2C_Master_ADDR+0x2e6>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d002      	beq.n	80044e8 <I2C_Master_ADDR+0x2e6>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d107      	bne.n	80044f8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004514:	e00b      	b.n	800452e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
}
 800452c:	e7ff      	b.n	800452e <I2C_Master_ADDR+0x32c>
 800452e:	bf00      	nop
 8004530:	3744      	adds	r7, #68	; 0x44
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02b      	beq.n	80045aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d114      	bne.n	80045aa <I2C_SlaveTransmit_TXE+0x72>
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b29      	cmp	r3, #41	; 0x29
 8004584:	d111      	bne.n	80045aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2221      	movs	r2, #33	; 0x21
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2228      	movs	r2, #40	; 0x28
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff f9e3 	bl	8003970 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02c      	beq.n	8004666 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d114      	bne.n	8004666 <I2C_SlaveReceive_RXNE+0x74>
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b2a      	cmp	r3, #42	; 0x2a
 8004640:	d111      	bne.n	8004666 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004650:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2222      	movs	r2, #34	; 0x22
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2228      	movs	r2, #40	; 0x28
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff f98e 	bl	8003982 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d125      	bne.n	800471a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	81bb      	strh	r3, [r7, #12]
 80046fc:	e002      	b.n	8004704 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800470c:	89ba      	ldrh	r2, [r7, #12]
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f93e 	bl	8003994 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004718:	e00e      	b.n	8004738 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004760:	2300      	movs	r3, #0
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d172      	bne.n	8004884 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	2b22      	cmp	r3, #34	; 0x22
 80047a2:	d002      	beq.n	80047aa <I2C_Slave_STOPF+0x6a>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b2a      	cmp	r3, #42	; 0x2a
 80047a8:	d135      	bne.n	8004816 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0204 	orr.w	r2, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd ff3e 	bl	8002664 <HAL_DMA_GetState>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d049      	beq.n	8004882 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <I2C_Slave_STOPF+0x258>)
 80047f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd feba 	bl	8002574 <HAL_DMA_Abort_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d03d      	beq.n	8004882 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004814:	e035      	b.n	8004882 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004848:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd ff08 	bl	8002664 <HAL_DMA_GetState>
 8004854:	4603      	mov	r3, r0
 8004856:	2b01      	cmp	r3, #1
 8004858:	d014      	beq.n	8004884 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <I2C_Slave_STOPF+0x258>)
 8004860:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fe84 	bl	8002574 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800487c:	4610      	mov	r0, r2
 800487e:	4798      	blx	r3
 8004880:	e000      	b.n	8004884 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004882:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03e      	beq.n	800490c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d112      	bne.n	80048c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d112      	bne.n	80048f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8b7 	bl	8004a88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800491a:	e039      	b.n	8004990 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b2a      	cmp	r3, #42	; 0x2a
 8004920:	d109      	bne.n	8004936 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2228      	movs	r2, #40	; 0x28
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f826 	bl	8003982 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b28      	cmp	r3, #40	; 0x28
 8004940:	d111      	bne.n	8004966 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a15      	ldr	r2, [pc, #84]	; (800499c <I2C_Slave_STOPF+0x25c>)
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff f825 	bl	80039ae <HAL_I2C_ListenCpltCallback>
}
 8004964:	e014      	b.n	8004990 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	d002      	beq.n	8004974 <I2C_Slave_STOPF+0x234>
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b22      	cmp	r3, #34	; 0x22
 8004972:	d10d      	bne.n	8004990 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fe fff9 	bl	8003982 <HAL_I2C_SlaveRxCpltCallback>
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	08004fe9 	.word	0x08004fe9
 800499c:	ffff0000 	.word	0xffff0000

080049a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d002      	beq.n	80049c2 <I2C_Slave_AF+0x22>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d129      	bne.n	8004a16 <I2C_Slave_AF+0x76>
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b28      	cmp	r3, #40	; 0x28
 80049c6:	d126      	bne.n	8004a16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <I2C_Slave_AF+0xe4>)
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fe ffcd 	bl	80039ae <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a14:	e031      	b.n	8004a7a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	2b21      	cmp	r3, #33	; 0x21
 8004a1a:	d129      	bne.n	8004a70 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <I2C_Slave_AF+0xe4>)
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a60:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fe f8d4 	bl	8002c10 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fe ff81 	bl	8003970 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a6e:	e004      	b.n	8004a7a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a78:	615a      	str	r2, [r3, #20]
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	ffff0000 	.word	0xffff0000

08004a88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004aa0:	7bbb      	ldrb	r3, [r7, #14]
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	d002      	beq.n	8004aac <I2C_ITError+0x24>
 8004aa6:	7bbb      	ldrb	r3, [r7, #14]
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d10a      	bne.n	8004ac2 <I2C_ITError+0x3a>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b22      	cmp	r3, #34	; 0x22
 8004ab0:	d107      	bne.n	8004ac2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ac8:	2b28      	cmp	r3, #40	; 0x28
 8004aca:	d107      	bne.n	8004adc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2228      	movs	r2, #40	; 0x28
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ada:	e015      	b.n	8004b08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aea:	d00a      	beq.n	8004b02 <I2C_ITError+0x7a>
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b60      	cmp	r3, #96	; 0x60
 8004af0:	d007      	beq.n	8004b02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b16:	d162      	bne.n	8004bde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d020      	beq.n	8004b78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	4a6a      	ldr	r2, [pc, #424]	; (8004ce4 <I2C_ITError+0x25c>)
 8004b3c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fd fd16 	bl	8002574 <HAL_DMA_Abort_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8089 	beq.w	8004c62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b72:	4610      	mov	r0, r2
 8004b74:	4798      	blx	r3
 8004b76:	e074      	b.n	8004c62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	4a59      	ldr	r2, [pc, #356]	; (8004ce4 <I2C_ITError+0x25c>)
 8004b7e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fcf5 	bl	8002574 <HAL_DMA_Abort_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d068      	beq.n	8004c62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d10b      	bne.n	8004bb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4798      	blx	r3
 8004bdc:	e041      	b.n	8004c62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b60      	cmp	r3, #96	; 0x60
 8004be8:	d125      	bne.n	8004c36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d10b      	bne.n	8004c1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fe fee1 	bl	80039f6 <HAL_I2C_AbortCpltCallback>
 8004c34:	e015      	b.n	8004c62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d10b      	bne.n	8004c5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fe fec1 	bl	80039e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d113      	bne.n	8004cdc <I2C_ITError+0x254>
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b28      	cmp	r3, #40	; 0x28
 8004cb8:	d110      	bne.n	8004cdc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <I2C_ITError+0x260>)
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fe fe69 	bl	80039ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	08004fe9 	.word	0x08004fe9
 8004ce8:	ffff0000 	.word	0xffff0000

08004cec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fa08 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3c:	d103      	bne.n	8004d46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e05f      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <I2C_RequestMemoryWrite+0x128>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fa63 	bl	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04c      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 faee 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e02b      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db8:	893b      	ldrh	r3, [r7, #8]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
 8004dc2:	e021      	b.n	8004e08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 fac8 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d107      	bne.n	8004dfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e005      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfe:	893b      	ldrh	r3, [r7, #8]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	00010002 	.word	0x00010002

08004e18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f96a 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d103      	bne.n	8004e82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e0aa      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	4952      	ldr	r1, [pc, #328]	; (8004fe4 <I2C_RequestMemoryRead+0x1cc>)
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f9c5 	bl	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e097      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	6a39      	ldr	r1, [r7, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa50 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d107      	bne.n	8004eea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e076      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]
 8004efe:	e021      	b.n	8004f44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	6a39      	ldr	r1, [r7, #32]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa2a 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d107      	bne.n	8004f36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e050      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3a:	893b      	ldrh	r3, [r7, #8]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	6a39      	ldr	r1, [r7, #32]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fa0f 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e035      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f8d3 	bl	8005138 <I2C_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d103      	bne.n	8004fb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e013      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <I2C_RequestMemoryRead+0x1cc>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f92e 	bl	800522c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010002 	.word	0x00010002

08004fe8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005002:	4b4b      	ldr	r3, [pc, #300]	; (8005130 <I2C_DMAAbort+0x148>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	4a4a      	ldr	r2, [pc, #296]	; (8005134 <I2C_DMAAbort+0x14c>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0a1a      	lsrs	r2, r3, #8
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00da      	lsls	r2, r3, #3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800502e:	e00a      	b.n	8005046 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005044:	d0ea      	beq.n	800501c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	2200      	movs	r2, #0
 8005054:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	2200      	movs	r2, #0
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005074:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	2200      	movs	r2, #0
 800508a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	2200      	movs	r2, #0
 800509a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b60      	cmp	r3, #96	; 0x60
 80050b6:	d10e      	bne.n	80050d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f7fe fc91 	bl	80039f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050d4:	e027      	b.n	8005126 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050dc:	2b28      	cmp	r3, #40	; 0x28
 80050de:	d117      	bne.n	8005110 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2228      	movs	r2, #40	; 0x28
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800510e:	e007      	b.n	8005120 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7fe fc5f 	bl	80039e4 <HAL_I2C_ErrorCallback>
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000000 	.word	0x20000000
 8005134:	14f8b589 	.word	0x14f8b589

08005138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005148:	e048      	b.n	80051dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d044      	beq.n	80051dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fc fc9b 	bl	8001a8c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d139      	bne.n	80051dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	0c1b      	lsrs	r3, r3, #16
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d10d      	bne.n	800518e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	43da      	mvns	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	e00c      	b.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	43da      	mvns	r2, r3
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	4013      	ands	r3, r2
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d116      	bne.n	80051dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e023      	b.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d10d      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	43da      	mvns	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	e00c      	b.n	800521c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	43da      	mvns	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	4013      	ands	r3, r2
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf0c      	ite	eq
 8005214:	2301      	moveq	r3, #1
 8005216:	2300      	movne	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	429a      	cmp	r2, r3
 8005220:	d093      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800523a:	e071      	b.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d123      	bne.n	8005294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	f043 0204 	orr.w	r2, r3, #4
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e067      	b.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529a:	d041      	beq.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529c:	f7fc fbf6 	bl	8001a8c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d302      	bcc.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d136      	bne.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d10c      	bne.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	43da      	mvns	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4013      	ands	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e00b      	b.n	80052ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	43da      	mvns	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4013      	ands	r3, r2
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d016      	beq.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e021      	b.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d10c      	bne.n	8005344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	43da      	mvns	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4013      	ands	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	e00b      	b.n	800535c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	43da      	mvns	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	f47f af6d 	bne.w	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005378:	e034      	b.n	80053e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f915 	bl	80055aa <I2C_IsAcknowledgeFailed>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e034      	b.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d028      	beq.n	80053e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fc fb7b 	bl	8001a8c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11d      	bne.n	80053e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d016      	beq.n	80053e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e007      	b.n	80053f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d1c3      	bne.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005408:	e034      	b.n	8005474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8cd 	bl	80055aa <I2C_IsAcknowledgeFailed>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e034      	b.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d028      	beq.n	8005474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc fb33 	bl	8001a8c <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11d      	bne.n	8005474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d016      	beq.n	8005474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e007      	b.n	8005484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d1c3      	bne.n	800540a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0a1a      	lsrs	r2, r3, #8
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e008      	b.n	80054dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d8:	d0e9      	beq.n	80054ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20000000 	.word	0x20000000
 80054ec:	14f8b589 	.word	0x14f8b589

080054f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054fc:	e049      	b.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b10      	cmp	r3, #16
 800550a:	d119      	bne.n	8005540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0210 	mvn.w	r2, #16
 8005514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e030      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fc faa4 	bl	8001a8c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11d      	bne.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d016      	beq.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e007      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d1ae      	bne.n	80054fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c0:	d11b      	bne.n	80055fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f043 0204 	orr.w	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005616:	d103      	bne.n	8005620 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800561e:	e007      	b.n	8005630 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005628:	d102      	bne.n	8005630 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2208      	movs	r2, #8
 800562e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
	...

0800563c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e272      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8087 	beq.w	800576a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800565c:	4b92      	ldr	r3, [pc, #584]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 030c 	and.w	r3, r3, #12
 8005664:	2b04      	cmp	r3, #4
 8005666:	d00c      	beq.n	8005682 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005668:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b08      	cmp	r3, #8
 8005672:	d112      	bne.n	800569a <HAL_RCC_OscConfig+0x5e>
 8005674:	4b8c      	ldr	r3, [pc, #560]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d10b      	bne.n	800569a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005682:	4b89      	ldr	r3, [pc, #548]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d06c      	beq.n	8005768 <HAL_RCC_OscConfig+0x12c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d168      	bne.n	8005768 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e24c      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a2:	d106      	bne.n	80056b2 <HAL_RCC_OscConfig+0x76>
 80056a4:	4b80      	ldr	r3, [pc, #512]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a7f      	ldr	r2, [pc, #508]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	e02e      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b7b      	ldr	r3, [pc, #492]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a7a      	ldr	r2, [pc, #488]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b78      	ldr	r3, [pc, #480]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a77      	ldr	r2, [pc, #476]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01d      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0xbc>
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a71      	ldr	r2, [pc, #452]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6f      	ldr	r3, [pc, #444]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6e      	ldr	r2, [pc, #440]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e00b      	b.n	8005710 <HAL_RCC_OscConfig+0xd4>
 80056f8:	4b6b      	ldr	r3, [pc, #428]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a67      	ldr	r2, [pc, #412]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800570a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005718:	f7fc f9b8 	bl	8001a8c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fc f9b4 	bl	8001a8c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e200      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0xe4>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005740:	f7fc f9a4 	bl	8001a8c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005748:	f7fc f9a0 	bl	8001a8c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1ec      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x10c>
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d063      	beq.n	800583e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005776:	4b4c      	ldr	r3, [pc, #304]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005782:	4b49      	ldr	r3, [pc, #292]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x18c>
 800578e:	4b46      	ldr	r3, [pc, #280]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579a:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x176>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1c0      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b2:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4939      	ldr	r1, [pc, #228]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	e03a      	b.n	800583e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_OscConfig+0x270>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d6:	f7fc f959 	bl	8001a8c <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057de:	f7fc f955 	bl	8001a8c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e1a1      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f0:	4b2d      	ldr	r3, [pc, #180]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4927      	ldr	r1, [pc, #156]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	e015      	b.n	800583e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x270>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc f938 	bl	8001a8c <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005820:	f7fc f934 	bl	8001a8c <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e180      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03a      	beq.n	80058c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005852:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <HAL_RCC_OscConfig+0x274>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005858:	f7fc f918 	bl	8001a8c <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005860:	f7fc f914 	bl	8001a8c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e160      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005872:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <HAL_RCC_OscConfig+0x26c>)
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800587e:	2001      	movs	r0, #1
 8005880:	f000 face 	bl	8005e20 <RCC_Delay>
 8005884:	e01c      	b.n	80058c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <HAL_RCC_OscConfig+0x274>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588c:	f7fc f8fe 	bl	8001a8c <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005892:	e00f      	b.n	80058b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005894:	f7fc f8fa 	bl	8001a8c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d908      	bls.n	80058b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e146      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	42420000 	.word	0x42420000
 80058b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b4:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e9      	bne.n	8005894 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80a6 	beq.w	8005a1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ce:	2300      	movs	r3, #0
 80058d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	4b88      	ldr	r3, [pc, #544]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e8:	61d3      	str	r3, [r2, #28]
 80058ea:	4b85      	ldr	r3, [pc, #532]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4b82      	ldr	r3, [pc, #520]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d118      	bne.n	8005938 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005906:	4b7f      	ldr	r3, [pc, #508]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a7e      	ldr	r2, [pc, #504]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005912:	f7fc f8bb 	bl	8001a8c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fc f8b7 	bl	8001a8c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b64      	cmp	r3, #100	; 0x64
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e103      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592c:	4b75      	ldr	r3, [pc, #468]	; (8005b04 <HAL_RCC_OscConfig+0x4c8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x312>
 8005940:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005946:	f043 0301 	orr.w	r3, r3, #1
 800594a:	6213      	str	r3, [r2, #32]
 800594c:	e02d      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0x334>
 8005956:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	4a69      	ldr	r2, [pc, #420]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6213      	str	r3, [r2, #32]
 8005962:	4b67      	ldr	r3, [pc, #412]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	4a66      	ldr	r2, [pc, #408]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	6213      	str	r3, [r2, #32]
 800596e:	e01c      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b05      	cmp	r3, #5
 8005976:	d10c      	bne.n	8005992 <HAL_RCC_OscConfig+0x356>
 8005978:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	4a60      	ldr	r2, [pc, #384]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	6213      	str	r3, [r2, #32]
 8005984:	4b5e      	ldr	r3, [pc, #376]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4a5d      	ldr	r2, [pc, #372]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6213      	str	r3, [r2, #32]
 8005990:	e00b      	b.n	80059aa <HAL_RCC_OscConfig+0x36e>
 8005992:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	f023 0301 	bic.w	r3, r3, #1
 800599c:	6213      	str	r3, [r2, #32]
 800599e:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	4a57      	ldr	r2, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	f023 0304 	bic.w	r3, r3, #4
 80059a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d015      	beq.n	80059de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b2:	f7fc f86b 	bl	8001a8c <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	e00a      	b.n	80059d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f7fc f867 	bl	8001a8c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e0b1      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d0:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ee      	beq.n	80059ba <HAL_RCC_OscConfig+0x37e>
 80059dc:	e014      	b.n	8005a08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059de:	f7fc f855 	bl	8001a8c <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fc f851 	bl	8001a8c <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e09b      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ee      	bne.n	80059e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	4a3b      	ldr	r2, [pc, #236]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8087 	beq.w	8005b32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d061      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d146      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a38:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3e:	f7fc f825 	bl	8001a8c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fc f821 	bl	8001a8c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e06d      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a58:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1f0      	bne.n	8005a46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d108      	bne.n	8005a80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4921      	ldr	r1, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a80:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a19      	ldr	r1, [r3, #32]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	430b      	orrs	r3, r1
 8005a92:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7fb fff5 	bl	8001a8c <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fb fff1 	bl	8001a8c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e03d      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x46a>
 8005ac4:	e035      	b.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCC_OscConfig+0x4cc>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005acc:	f7fb ffde 	bl	8001a8c <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad4:	f7fb ffda 	bl	8001a8c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e026      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <HAL_RCC_OscConfig+0x4c4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x498>
 8005af2:	e01e      	b.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e019      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40007000 	.word	0x40007000
 8005b08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_OscConfig+0x500>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d001      	beq.n	8005b32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000

08005b40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0d0      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b54:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d910      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b62:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 0207 	bic.w	r2, r3, #7
 8005b6a:	4965      	ldr	r1, [pc, #404]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b63      	ldr	r3, [pc, #396]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b8      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b59      	ldr	r3, [pc, #356]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ba6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a52      	ldr	r2, [pc, #328]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	494d      	ldr	r1, [pc, #308]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d040      	beq.n	8005c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d115      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e073      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e06b      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f023 0203 	bic.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4936      	ldr	r1, [pc, #216]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c30:	f7fb ff2c 	bl	8001a8c <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c36:	e00a      	b.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c38:	f7fb ff28 	bl	8001a8c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e053      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 020c 	and.w	r2, r3, #12
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d1eb      	bne.n	8005c38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d210      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
 8005c76:	4922      	ldr	r1, [pc, #136]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <HAL_RCC_ClockConfig+0x1c0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4916      	ldr	r1, [pc, #88]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cba:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cce:	f000 f821 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490a      	ldr	r1, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_ClockConfig+0x1cc>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_RCC_ClockConfig+0x1d0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fb fe8a 	bl	8001a08 <HAL_InitTick>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40022000 	.word	0x40022000
 8005d04:	40021000 	.word	0x40021000
 8005d08:	08009950 	.word	0x08009950
 8005d0c:	20000000 	.word	0x20000000
 8005d10:	20000004 	.word	0x20000004

08005d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d2e:	4b1e      	ldr	r3, [pc, #120]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f003 030c 	and.w	r3, r3, #12
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0x30>
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d003      	beq.n	8005d4a <HAL_RCC_GetSysClockFreq+0x36>
 8005d42:	e027      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCC_GetSysClockFreq+0x98>)
 8005d46:	613b      	str	r3, [r7, #16]
      break;
 8005d48:	e027      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0c9b      	lsrs	r3, r3, #18
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	4a17      	ldr	r2, [pc, #92]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
 8005d56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d010      	beq.n	8005d84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d62:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	0c5b      	lsrs	r3, r3, #17
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <HAL_RCC_GetSysClockFreq+0x98>)
 8005d76:	fb03 f202 	mul.w	r2, r3, r2
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e004      	b.n	8005d8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	613b      	str	r3, [r7, #16]
      break;
 8005d92:	e002      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <HAL_RCC_GetSysClockFreq+0x98>)
 8005d96:	613b      	str	r3, [r7, #16]
      break;
 8005d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d9a:	693b      	ldr	r3, [r7, #16]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000
 8005dac:	007a1200 	.word	0x007a1200
 8005db0:	08009968 	.word	0x08009968
 8005db4:	08009978 	.word	0x08009978
 8005db8:	003d0900 	.word	0x003d0900

08005dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc0:	4b02      	ldr	r3, [pc, #8]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	20000000 	.word	0x20000000

08005dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dd4:	f7ff fff2 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	0a1b      	lsrs	r3, r3, #8
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4903      	ldr	r1, [pc, #12]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	08009960 	.word	0x08009960

08005df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dfc:	f7ff ffde 	bl	8005dbc <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	0adb      	lsrs	r3, r3, #11
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	08009960 	.word	0x08009960

08005e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <RCC_Delay+0x34>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <RCC_Delay+0x38>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	0a5b      	lsrs	r3, r3, #9
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e3c:	bf00      	nop
  }
  while (Delay --);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	60fa      	str	r2, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f9      	bne.n	8005e3c <RCC_Delay+0x1c>
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr
 8005e54:	20000000 	.word	0x20000000
 8005e58:	10624dd3 	.word	0x10624dd3

08005e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d07d      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7c:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10d      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e88:	4b4c      	ldr	r3, [pc, #304]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	4a4b      	ldr	r2, [pc, #300]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	61d3      	str	r3, [r2, #28]
 8005e94:	4b49      	ldr	r3, [pc, #292]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea4:	4b46      	ldr	r3, [pc, #280]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d118      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb0:	4b43      	ldr	r3, [pc, #268]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a42      	ldr	r2, [pc, #264]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ebc:	f7fb fde6 	bl	8001a8c <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec4:	f7fb fde2 	bl	8001a8c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e06d      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed6:	4b3a      	ldr	r3, [pc, #232]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ee2:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02e      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d027      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f00:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f16:	4a29      	ldr	r2, [pc, #164]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d014      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f26:	f7fb fdb1 	bl	8001a8c <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fb fdad 	bl	8001a8c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e036      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0ee      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4917      	ldr	r1, [pc, #92]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	490b      	ldr	r1, [pc, #44]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f9e:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4904      	ldr	r1, [pc, #16]	; (8005fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	40007000 	.word	0x40007000
 8005fc4:	42420440 	.word	0x42420440

08005fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e042      	b.n	8006060 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fb64 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2224      	movs	r2, #36	; 0x24
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fd71 	bl	8006af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	695a      	ldr	r2, [r3, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	d16d      	bne.n	8006164 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Transmit+0x2c>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e066      	b.n	8006166 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2221      	movs	r2, #33	; 0x21
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060a6:	f7fb fcf1 	bl	8001a8c <HAL_GetTick>
 80060aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	88fa      	ldrh	r2, [r7, #6]
 80060b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	88fa      	ldrh	r2, [r7, #6]
 80060b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c0:	d108      	bne.n	80060d4 <HAL_UART_Transmit+0x6c>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e003      	b.n	80060dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060dc:	e02a      	b.n	8006134 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 faf9 	bl	80066e0 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e036      	b.n	8006166 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800610c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	3302      	adds	r3, #2
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e007      	b.n	8006126 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1cf      	bne.n	80060de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	2140      	movs	r1, #64	; 0x40
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fac9 	bl	80066e0 <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e006      	b.n	8006166 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e000      	b.n	8006166 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006164:	2302      	movs	r3, #2
  }
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b0ba      	sub	sp, #232	; 0xe8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006196:	2300      	movs	r3, #0
 8006198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_UART_IRQHandler+0x66>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fbd1 	bl	8006976 <UART_Receive_IT>
      return;
 80061d4:	e25b      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80de 	beq.w	800639c <HAL_UART_IRQHandler+0x22c>
 80061e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80d1 	beq.w	800639c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0xae>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f043 0201 	orr.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800621e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <HAL_UART_IRQHandler+0xd2>
 800622a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	f043 0202 	orr.w	r2, r3, #2
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_UART_IRQHandler+0xf6>
 800624e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	f043 0204 	orr.w	r2, r3, #4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d011      	beq.n	8006296 <HAL_UART_IRQHandler+0x126>
 8006272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800627e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f043 0208 	orr.w	r2, r3, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 81f2 	beq.w	8006684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_UART_IRQHandler+0x14e>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb5c 	bl	8006976 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <HAL_UART_IRQHandler+0x17a>
 80062e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d04f      	beq.n	800638a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa66 	bl	80067bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d041      	beq.n	8006382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3314      	adds	r3, #20
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800631c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800632a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800632e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1d9      	bne.n	80062fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d013      	beq.n	800637a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	4a7e      	ldr	r2, [pc, #504]	; (8006550 <HAL_UART_IRQHandler+0x3e0>)
 8006358:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	4618      	mov	r0, r3
 8006360:	f7fc f908 	bl	8002574 <HAL_DMA_Abort_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e00e      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f99c 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00a      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f998 	bl	80066b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e006      	b.n	8006398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f994 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006396:	e175      	b.n	8006684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006398:	bf00      	nop
    return;
 800639a:	e173      	b.n	8006684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 814f 	bne.w	8006644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8148 	beq.w	8006644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8141 	beq.w	8006644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063c2:	2300      	movs	r3, #0
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80b6 	beq.w	8006554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8145 	beq.w	8006688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006406:	429a      	cmp	r2, r3
 8006408:	f080 813e 	bcs.w	8006688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b20      	cmp	r3, #32
 800641c:	f000 8088 	beq.w	8006530 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800643a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800643e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800644c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006458:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1d9      	bne.n	8006420 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800647c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647e:	f023 0301 	bic.w	r3, r3, #1
 8006482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006490:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006494:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e1      	bne.n	800646c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e3      	bne.n	80064a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006512:	65ba      	str	r2, [r7, #88]	; 0x58
 8006514:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e3      	bne.n	80064ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb ffe7 	bl	80024fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653e:	b29b      	uxth	r3, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8bf 	bl	80066ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800654c:	e09c      	b.n	8006688 <HAL_UART_IRQHandler+0x518>
 800654e:	bf00      	nop
 8006550:	08006881 	.word	0x08006881
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800655c:	b29b      	uxth	r3, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 808e 	beq.w	800668c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8089 	beq.w	800668c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	330c      	adds	r3, #12
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800659e:	647a      	str	r2, [r7, #68]	; 0x44
 80065a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e3      	bne.n	800657a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3314      	adds	r3, #20
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	623b      	str	r3, [r7, #32]
   return(result);
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3314      	adds	r3, #20
 80065d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065d6:	633a      	str	r2, [r7, #48]	; 0x30
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60fb      	str	r3, [r7, #12]
   return(result);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	330c      	adds	r3, #12
 8006618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800661c:	61fa      	str	r2, [r7, #28]
 800661e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	617b      	str	r3, [r7, #20]
   return(result);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e3      	bne.n	80065f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f844 	bl	80066ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006642:	e023      	b.n	800668c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_UART_IRQHandler+0x4f4>
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f923 	bl	80068a8 <UART_Transmit_IT>
    return;
 8006662:	e014      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <HAL_UART_IRQHandler+0x51e>
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f962 	bl	8006946 <UART_EndTransmit_IT>
    return;
 8006682:	e004      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
    return;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
      return;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <HAL_UART_IRQHandler+0x51e>
      return;
 800668c:	bf00      	nop
  }
}
 800668e:	37e8      	adds	r7, #232	; 0xe8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b090      	sub	sp, #64	; 0x40
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4613      	mov	r3, r2
 80066ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066f0:	e050      	b.n	8006794 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d04c      	beq.n	8006794 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <UART_WaitOnFlagUntilTimeout+0x30>
 8006700:	f7fb f9c4 	bl	8001a8c <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800670c:	429a      	cmp	r2, r3
 800670e:	d241      	bcs.n	8006794 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	330c      	adds	r3, #12
 800672e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006730:	637a      	str	r2, [r7, #52]	; 0x34
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3314      	adds	r3, #20
 800674a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	613b      	str	r3, [r7, #16]
   return(result);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	63bb      	str	r3, [r7, #56]	; 0x38
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3314      	adds	r3, #20
 8006762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006764:	623a      	str	r2, [r7, #32]
 8006766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	61bb      	str	r3, [r7, #24]
   return(result);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e5      	bne.n	8006744 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e00f      	b.n	80067b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	4013      	ands	r3, r2
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	bf0c      	ite	eq
 80067a4:	2301      	moveq	r3, #1
 80067a6:	2300      	movne	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	461a      	mov	r2, r3
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d09f      	beq.n	80066f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3740      	adds	r7, #64	; 0x40
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067bc:	b480      	push	{r7}
 80067be:	b095      	sub	sp, #84	; 0x54
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067e4:	643a      	str	r2, [r7, #64]	; 0x40
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e5      	bne.n	80067c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	61fb      	str	r3, [r7, #28]
   return(result);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3314      	adds	r3, #20
 8006816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800681a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800681e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006820:	e841 2300 	strex	r3, r2, [r1]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e5      	bne.n	80067f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	d119      	bne.n	8006868 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	60bb      	str	r3, [r7, #8]
   return(result);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	647b      	str	r3, [r7, #68]	; 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006854:	61ba      	str	r2, [r7, #24]
 8006856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	613b      	str	r3, [r7, #16]
   return(result);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e5      	bne.n	8006834 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006876:	bf00      	nop
 8006878:	3754      	adds	r7, #84	; 0x54
 800687a:	46bd      	mov	sp, r7
 800687c:	bc80      	pop	{r7}
 800687e:	4770      	bx	lr

08006880 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff0c 	bl	80066b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a0:	bf00      	nop
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b21      	cmp	r3, #33	; 0x21
 80068ba:	d13e      	bne.n	800693a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c4:	d114      	bne.n	80068f0 <UART_Transmit_IT+0x48>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d110      	bne.n	80068f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	621a      	str	r2, [r3, #32]
 80068ee:	e008      	b.n	8006902 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6211      	str	r1, [r2, #32]
 80068fa:	781a      	ldrb	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29b      	uxth	r3, r3
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4619      	mov	r1, r3
 8006910:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10f      	bne.n	8006936 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006924:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006934:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e000      	b.n	800693c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800693a:	2302      	movs	r3, #2
  }
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fe94 	bl	8006694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b08c      	sub	sp, #48	; 0x30
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b22      	cmp	r3, #34	; 0x22
 8006988:	f040 80ae 	bne.w	8006ae8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d117      	bne.n	80069c6 <UART_Receive_IT+0x50>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d113      	bne.n	80069c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
 80069c4:	e026      	b.n	8006a14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d8:	d007      	beq.n	80069ea <UART_Receive_IT+0x74>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <UART_Receive_IT+0x82>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e008      	b.n	8006a0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4619      	mov	r1, r3
 8006a22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d15d      	bne.n	8006ae4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0220 	bic.w	r2, r2, #32
 8006a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0201 	bic.w	r2, r2, #1
 8006a56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d135      	bne.n	8006ada <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	613b      	str	r3, [r7, #16]
   return(result);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f023 0310 	bic.w	r3, r3, #16
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a94:	623a      	str	r2, [r7, #32]
 8006a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	6a3a      	ldr	r2, [r7, #32]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e5      	bne.n	8006a74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d10a      	bne.n	8006acc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fdf9 	bl	80066ca <HAL_UARTEx_RxEventCallback>
 8006ad8:	e002      	b.n	8006ae0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fde3 	bl	80066a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e002      	b.n	8006aea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e000      	b.n	8006aea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ae8:	2302      	movs	r3, #2
  }
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3730      	adds	r7, #48	; 0x30
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006b2e:	f023 030c 	bic.w	r3, r3, #12
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <UART_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7ff f94c 	bl	8005df8 <HAL_RCC_GetPCLK2Freq>
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	e002      	b.n	8006b6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006b64:	f7ff f934 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 8006b68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	009a      	lsls	r2, r3, #2
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <UART_SetConfig+0x118>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	0119      	lsls	r1, r3, #4
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ba0:	4b1a      	ldr	r3, [pc, #104]	; (8006c0c <UART_SetConfig+0x118>)
 8006ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2064      	movs	r0, #100	; 0x64
 8006baa:	fb00 f303 	mul.w	r3, r0, r3
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	; 0x32
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <UART_SetConfig+0x118>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc0:	4419      	add	r1, r3
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009a      	lsls	r2, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <UART_SetConfig+0x118>)
 8006bda:	fba3 0302 	umull	r0, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2064      	movs	r0, #100	; 0x64
 8006be2:	fb00 f303 	mul.w	r3, r0, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <UART_SetConfig+0x118>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40013800 	.word	0x40013800
 8006c0c:	51eb851f 	.word	0x51eb851f

08006c10 <__cvt>:
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c16:	461f      	mov	r7, r3
 8006c18:	bfbb      	ittet	lt
 8006c1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006c1e:	461f      	movlt	r7, r3
 8006c20:	2300      	movge	r3, #0
 8006c22:	232d      	movlt	r3, #45	; 0x2d
 8006c24:	b088      	sub	sp, #32
 8006c26:	4614      	mov	r4, r2
 8006c28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c2c:	7013      	strb	r3, [r2, #0]
 8006c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006c34:	f023 0820 	bic.w	r8, r3, #32
 8006c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c3c:	d005      	beq.n	8006c4a <__cvt+0x3a>
 8006c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c42:	d100      	bne.n	8006c46 <__cvt+0x36>
 8006c44:	3501      	adds	r5, #1
 8006c46:	2302      	movs	r3, #2
 8006c48:	e000      	b.n	8006c4c <__cvt+0x3c>
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	aa07      	add	r2, sp, #28
 8006c4e:	9204      	str	r2, [sp, #16]
 8006c50:	aa06      	add	r2, sp, #24
 8006c52:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006c56:	e9cd 3500 	strd	r3, r5, [sp]
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	f000 fe73 	bl	8007948 <_dtoa_r>
 8006c62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c66:	4606      	mov	r6, r0
 8006c68:	d102      	bne.n	8006c70 <__cvt+0x60>
 8006c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c6c:	07db      	lsls	r3, r3, #31
 8006c6e:	d522      	bpl.n	8006cb6 <__cvt+0xa6>
 8006c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c74:	eb06 0905 	add.w	r9, r6, r5
 8006c78:	d110      	bne.n	8006c9c <__cvt+0x8c>
 8006c7a:	7833      	ldrb	r3, [r6, #0]
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d10a      	bne.n	8006c96 <__cvt+0x86>
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	4620      	mov	r0, r4
 8006c86:	4639      	mov	r1, r7
 8006c88:	f7f9 ff42 	bl	8000b10 <__aeabi_dcmpeq>
 8006c8c:	b918      	cbnz	r0, 8006c96 <__cvt+0x86>
 8006c8e:	f1c5 0501 	rsb	r5, r5, #1
 8006c92:	f8ca 5000 	str.w	r5, [sl]
 8006c96:	f8da 3000 	ldr.w	r3, [sl]
 8006c9a:	4499      	add	r9, r3
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f7f9 ff34 	bl	8000b10 <__aeabi_dcmpeq>
 8006ca8:	b108      	cbz	r0, 8006cae <__cvt+0x9e>
 8006caa:	f8cd 901c 	str.w	r9, [sp, #28]
 8006cae:	2230      	movs	r2, #48	; 0x30
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	454b      	cmp	r3, r9
 8006cb4:	d307      	bcc.n	8006cc6 <__cvt+0xb6>
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cbc:	1b9b      	subs	r3, r3, r6
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	b008      	add	sp, #32
 8006cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	9107      	str	r1, [sp, #28]
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e7f0      	b.n	8006cb0 <__cvt+0xa0>

08006cce <__exponent>:
 8006cce:	4603      	mov	r3, r0
 8006cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	f803 2b02 	strb.w	r2, [r3], #2
 8006cd8:	bfb6      	itet	lt
 8006cda:	222d      	movlt	r2, #45	; 0x2d
 8006cdc:	222b      	movge	r2, #43	; 0x2b
 8006cde:	4249      	neglt	r1, r1
 8006ce0:	2909      	cmp	r1, #9
 8006ce2:	7042      	strb	r2, [r0, #1]
 8006ce4:	dd2a      	ble.n	8006d3c <__exponent+0x6e>
 8006ce6:	f10d 0207 	add.w	r2, sp, #7
 8006cea:	4617      	mov	r7, r2
 8006cec:	260a      	movs	r6, #10
 8006cee:	fb91 f5f6 	sdiv	r5, r1, r6
 8006cf2:	4694      	mov	ip, r2
 8006cf4:	fb06 1415 	mls	r4, r6, r5, r1
 8006cf8:	3430      	adds	r4, #48	; 0x30
 8006cfa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006cfe:	460c      	mov	r4, r1
 8006d00:	2c63      	cmp	r4, #99	; 0x63
 8006d02:	4629      	mov	r1, r5
 8006d04:	f102 32ff 	add.w	r2, r2, #4294967295
 8006d08:	dcf1      	bgt.n	8006cee <__exponent+0x20>
 8006d0a:	3130      	adds	r1, #48	; 0x30
 8006d0c:	f1ac 0402 	sub.w	r4, ip, #2
 8006d10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006d14:	4622      	mov	r2, r4
 8006d16:	1c41      	adds	r1, r0, #1
 8006d18:	42ba      	cmp	r2, r7
 8006d1a:	d30a      	bcc.n	8006d32 <__exponent+0x64>
 8006d1c:	f10d 0209 	add.w	r2, sp, #9
 8006d20:	eba2 020c 	sub.w	r2, r2, ip
 8006d24:	42bc      	cmp	r4, r7
 8006d26:	bf88      	it	hi
 8006d28:	2200      	movhi	r2, #0
 8006d2a:	4413      	add	r3, r2
 8006d2c:	1a18      	subs	r0, r3, r0
 8006d2e:	b003      	add	sp, #12
 8006d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006d36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006d3a:	e7ed      	b.n	8006d18 <__exponent+0x4a>
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	3130      	adds	r1, #48	; 0x30
 8006d40:	7083      	strb	r3, [r0, #2]
 8006d42:	70c1      	strb	r1, [r0, #3]
 8006d44:	1d03      	adds	r3, r0, #4
 8006d46:	e7f1      	b.n	8006d2c <__exponent+0x5e>

08006d48 <_printf_float>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b091      	sub	sp, #68	; 0x44
 8006d4e:	460c      	mov	r4, r1
 8006d50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006d54:	4616      	mov	r6, r2
 8006d56:	461f      	mov	r7, r3
 8006d58:	4605      	mov	r5, r0
 8006d5a:	f000 fce5 	bl	8007728 <_localeconv_r>
 8006d5e:	6803      	ldr	r3, [r0, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	f7f9 f9f4 	bl	8000150 <strlen>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8006d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d70:	900a      	str	r0, [sp, #40]	; 0x28
 8006d72:	3307      	adds	r3, #7
 8006d74:	f023 0307 	bic.w	r3, r3, #7
 8006d78:	f103 0208 	add.w	r2, r3, #8
 8006d7c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006d80:	f8d4 b000 	ldr.w	fp, [r4]
 8006d84:	f8c8 2000 	str.w	r2, [r8]
 8006d88:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	4643      	mov	r3, r8
 8006d90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d94:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	4650      	mov	r0, sl
 8006da0:	4b9c      	ldr	r3, [pc, #624]	; (8007014 <_printf_float+0x2cc>)
 8006da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da4:	f7f9 fee6 	bl	8000b74 <__aeabi_dcmpun>
 8006da8:	bb70      	cbnz	r0, 8006e08 <_printf_float+0xc0>
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dae:	4650      	mov	r0, sl
 8006db0:	4b98      	ldr	r3, [pc, #608]	; (8007014 <_printf_float+0x2cc>)
 8006db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006db4:	f7f9 fec0 	bl	8000b38 <__aeabi_dcmple>
 8006db8:	bb30      	cbnz	r0, 8006e08 <_printf_float+0xc0>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	f7f9 feaf 	bl	8000b24 <__aeabi_dcmplt>
 8006dc6:	b110      	cbz	r0, 8006dce <_printf_float+0x86>
 8006dc8:	232d      	movs	r3, #45	; 0x2d
 8006dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dce:	4a92      	ldr	r2, [pc, #584]	; (8007018 <_printf_float+0x2d0>)
 8006dd0:	4b92      	ldr	r3, [pc, #584]	; (800701c <_printf_float+0x2d4>)
 8006dd2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006dd6:	bf94      	ite	ls
 8006dd8:	4690      	movls	r8, r2
 8006dda:	4698      	movhi	r8, r3
 8006ddc:	2303      	movs	r3, #3
 8006dde:	f04f 0a00 	mov.w	sl, #0
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	f02b 0304 	bic.w	r3, fp, #4
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	4633      	mov	r3, r6
 8006dec:	4621      	mov	r1, r4
 8006dee:	4628      	mov	r0, r5
 8006df0:	9700      	str	r7, [sp, #0]
 8006df2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006df4:	f000 f9d6 	bl	80071a4 <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f040 8090 	bne.w	8006f1e <_printf_float+0x1d6>
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006e02:	b011      	add	sp, #68	; 0x44
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	4641      	mov	r1, r8
 8006e10:	f7f9 feb0 	bl	8000b74 <__aeabi_dcmpun>
 8006e14:	b148      	cbz	r0, 8006e2a <_printf_float+0xe2>
 8006e16:	f1b8 0f00 	cmp.w	r8, #0
 8006e1a:	bfb8      	it	lt
 8006e1c:	232d      	movlt	r3, #45	; 0x2d
 8006e1e:	4a80      	ldr	r2, [pc, #512]	; (8007020 <_printf_float+0x2d8>)
 8006e20:	bfb8      	it	lt
 8006e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e26:	4b7f      	ldr	r3, [pc, #508]	; (8007024 <_printf_float+0x2dc>)
 8006e28:	e7d3      	b.n	8006dd2 <_printf_float+0x8a>
 8006e2a:	6863      	ldr	r3, [r4, #4]
 8006e2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	d142      	bne.n	8006eba <_printf_float+0x172>
 8006e34:	2306      	movs	r3, #6
 8006e36:	6063      	str	r3, [r4, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	9206      	str	r2, [sp, #24]
 8006e3c:	aa0e      	add	r2, sp, #56	; 0x38
 8006e3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006e42:	aa0d      	add	r2, sp, #52	; 0x34
 8006e44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006e48:	9203      	str	r2, [sp, #12]
 8006e4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006e4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	4652      	mov	r2, sl
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	4643      	mov	r3, r8
 8006e5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006e60:	f7ff fed6 	bl	8006c10 <__cvt>
 8006e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e66:	4680      	mov	r8, r0
 8006e68:	2947      	cmp	r1, #71	; 0x47
 8006e6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e6c:	d108      	bne.n	8006e80 <_printf_float+0x138>
 8006e6e:	1cc8      	adds	r0, r1, #3
 8006e70:	db02      	blt.n	8006e78 <_printf_float+0x130>
 8006e72:	6863      	ldr	r3, [r4, #4]
 8006e74:	4299      	cmp	r1, r3
 8006e76:	dd40      	ble.n	8006efa <_printf_float+0x1b2>
 8006e78:	f1a9 0902 	sub.w	r9, r9, #2
 8006e7c:	fa5f f989 	uxtb.w	r9, r9
 8006e80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e84:	d81f      	bhi.n	8006ec6 <_printf_float+0x17e>
 8006e86:	464a      	mov	r2, r9
 8006e88:	3901      	subs	r1, #1
 8006e8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e8e:	910d      	str	r1, [sp, #52]	; 0x34
 8006e90:	f7ff ff1d 	bl	8006cce <__exponent>
 8006e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e96:	4682      	mov	sl, r0
 8006e98:	1813      	adds	r3, r2, r0
 8006e9a:	2a01      	cmp	r2, #1
 8006e9c:	6123      	str	r3, [r4, #16]
 8006e9e:	dc02      	bgt.n	8006ea6 <_printf_float+0x15e>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	07d2      	lsls	r2, r2, #31
 8006ea4:	d501      	bpl.n	8006eaa <_printf_float+0x162>
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d09b      	beq.n	8006dea <_printf_float+0xa2>
 8006eb2:	232d      	movs	r3, #45	; 0x2d
 8006eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb8:	e797      	b.n	8006dea <_printf_float+0xa2>
 8006eba:	2947      	cmp	r1, #71	; 0x47
 8006ebc:	d1bc      	bne.n	8006e38 <_printf_float+0xf0>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1ba      	bne.n	8006e38 <_printf_float+0xf0>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e7b7      	b.n	8006e36 <_printf_float+0xee>
 8006ec6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006eca:	d118      	bne.n	8006efe <_printf_float+0x1b6>
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	dd0b      	ble.n	8006eea <_printf_float+0x1a2>
 8006ed2:	6121      	str	r1, [r4, #16]
 8006ed4:	b913      	cbnz	r3, 8006edc <_printf_float+0x194>
 8006ed6:	6822      	ldr	r2, [r4, #0]
 8006ed8:	07d0      	lsls	r0, r2, #31
 8006eda:	d502      	bpl.n	8006ee2 <_printf_float+0x19a>
 8006edc:	3301      	adds	r3, #1
 8006ede:	440b      	add	r3, r1
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	f04f 0a00 	mov.w	sl, #0
 8006ee6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ee8:	e7df      	b.n	8006eaa <_printf_float+0x162>
 8006eea:	b913      	cbnz	r3, 8006ef2 <_printf_float+0x1aa>
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	07d2      	lsls	r2, r2, #31
 8006ef0:	d501      	bpl.n	8006ef6 <_printf_float+0x1ae>
 8006ef2:	3302      	adds	r3, #2
 8006ef4:	e7f4      	b.n	8006ee0 <_printf_float+0x198>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e7f2      	b.n	8006ee0 <_printf_float+0x198>
 8006efa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f00:	4299      	cmp	r1, r3
 8006f02:	db05      	blt.n	8006f10 <_printf_float+0x1c8>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	6121      	str	r1, [r4, #16]
 8006f08:	07d8      	lsls	r0, r3, #31
 8006f0a:	d5ea      	bpl.n	8006ee2 <_printf_float+0x19a>
 8006f0c:	1c4b      	adds	r3, r1, #1
 8006f0e:	e7e7      	b.n	8006ee0 <_printf_float+0x198>
 8006f10:	2900      	cmp	r1, #0
 8006f12:	bfcc      	ite	gt
 8006f14:	2201      	movgt	r2, #1
 8006f16:	f1c1 0202 	rsble	r2, r1, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	e7e0      	b.n	8006ee0 <_printf_float+0x198>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	055a      	lsls	r2, r3, #21
 8006f22:	d407      	bmi.n	8006f34 <_printf_float+0x1ec>
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	4642      	mov	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d12b      	bne.n	8006f8a <_printf_float+0x242>
 8006f32:	e764      	b.n	8006dfe <_printf_float+0xb6>
 8006f34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006f38:	f240 80dd 	bls.w	80070f6 <_printf_float+0x3ae>
 8006f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f40:	2200      	movs	r2, #0
 8006f42:	2300      	movs	r3, #0
 8006f44:	f7f9 fde4 	bl	8000b10 <__aeabi_dcmpeq>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d033      	beq.n	8006fb4 <_printf_float+0x26c>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	4a35      	ldr	r2, [pc, #212]	; (8007028 <_printf_float+0x2e0>)
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f af51 	beq.w	8006dfe <_printf_float+0xb6>
 8006f5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f60:	429a      	cmp	r2, r3
 8006f62:	db02      	blt.n	8006f6a <_printf_float+0x222>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	07d8      	lsls	r0, r3, #31
 8006f68:	d50f      	bpl.n	8006f8a <_printf_float+0x242>
 8006f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	f43f af42 	beq.w	8006dfe <_printf_float+0xb6>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	f104 091a 	add.w	r9, r4, #26
 8006f82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4543      	cmp	r3, r8
 8006f88:	dc09      	bgt.n	8006f9e <_printf_float+0x256>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	079b      	lsls	r3, r3, #30
 8006f8e:	f100 8104 	bmi.w	800719a <_printf_float+0x452>
 8006f92:	68e0      	ldr	r0, [r4, #12]
 8006f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f96:	4298      	cmp	r0, r3
 8006f98:	bfb8      	it	lt
 8006f9a:	4618      	movlt	r0, r3
 8006f9c:	e731      	b.n	8006e02 <_printf_float+0xba>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	464a      	mov	r2, r9
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f af28 	beq.w	8006dfe <_printf_float+0xb6>
 8006fae:	f108 0801 	add.w	r8, r8, #1
 8006fb2:	e7e6      	b.n	8006f82 <_printf_float+0x23a>
 8006fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dc38      	bgt.n	800702c <_printf_float+0x2e4>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	4a19      	ldr	r2, [pc, #100]	; (8007028 <_printf_float+0x2e0>)
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f af1a 	beq.w	8006dfe <_printf_float+0xb6>
 8006fca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d102      	bne.n	8006fd8 <_printf_float+0x290>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d5d8      	bpl.n	8006f8a <_printf_float+0x242>
 8006fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f af0b 	beq.w	8006dfe <_printf_float+0xb6>
 8006fe8:	f04f 0900 	mov.w	r9, #0
 8006fec:	f104 0a1a 	add.w	sl, r4, #26
 8006ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff2:	425b      	negs	r3, r3
 8006ff4:	454b      	cmp	r3, r9
 8006ff6:	dc01      	bgt.n	8006ffc <_printf_float+0x2b4>
 8006ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ffa:	e794      	b.n	8006f26 <_printf_float+0x1de>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4652      	mov	r2, sl
 8007000:	4631      	mov	r1, r6
 8007002:	4628      	mov	r0, r5
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	f43f aef9 	beq.w	8006dfe <_printf_float+0xb6>
 800700c:	f109 0901 	add.w	r9, r9, #1
 8007010:	e7ee      	b.n	8006ff0 <_printf_float+0x2a8>
 8007012:	bf00      	nop
 8007014:	7fefffff 	.word	0x7fefffff
 8007018:	0800997a 	.word	0x0800997a
 800701c:	0800997e 	.word	0x0800997e
 8007020:	08009982 	.word	0x08009982
 8007024:	08009986 	.word	0x08009986
 8007028:	0800998a 	.word	0x0800998a
 800702c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800702e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007030:	429a      	cmp	r2, r3
 8007032:	bfa8      	it	ge
 8007034:	461a      	movge	r2, r3
 8007036:	2a00      	cmp	r2, #0
 8007038:	4691      	mov	r9, r2
 800703a:	dc37      	bgt.n	80070ac <_printf_float+0x364>
 800703c:	f04f 0b00 	mov.w	fp, #0
 8007040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007044:	f104 021a 	add.w	r2, r4, #26
 8007048:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800704c:	ebaa 0309 	sub.w	r3, sl, r9
 8007050:	455b      	cmp	r3, fp
 8007052:	dc33      	bgt.n	80070bc <_printf_float+0x374>
 8007054:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007058:	429a      	cmp	r2, r3
 800705a:	db3b      	blt.n	80070d4 <_printf_float+0x38c>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	07da      	lsls	r2, r3, #31
 8007060:	d438      	bmi.n	80070d4 <_printf_float+0x38c>
 8007062:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007066:	eba2 0903 	sub.w	r9, r2, r3
 800706a:	eba2 020a 	sub.w	r2, r2, sl
 800706e:	4591      	cmp	r9, r2
 8007070:	bfa8      	it	ge
 8007072:	4691      	movge	r9, r2
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	dc34      	bgt.n	80070e4 <_printf_float+0x39c>
 800707a:	f04f 0800 	mov.w	r8, #0
 800707e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007082:	f104 0a1a 	add.w	sl, r4, #26
 8007086:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	eba3 0309 	sub.w	r3, r3, r9
 8007090:	4543      	cmp	r3, r8
 8007092:	f77f af7a 	ble.w	8006f8a <_printf_float+0x242>
 8007096:	2301      	movs	r3, #1
 8007098:	4652      	mov	r2, sl
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f aeac 	beq.w	8006dfe <_printf_float+0xb6>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	e7ec      	b.n	8007086 <_printf_float+0x33e>
 80070ac:	4613      	mov	r3, r2
 80070ae:	4631      	mov	r1, r6
 80070b0:	4642      	mov	r2, r8
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	d1c0      	bne.n	800703c <_printf_float+0x2f4>
 80070ba:	e6a0      	b.n	8006dfe <_printf_float+0xb6>
 80070bc:	2301      	movs	r3, #1
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80070c4:	47b8      	blx	r7
 80070c6:	3001      	adds	r0, #1
 80070c8:	f43f ae99 	beq.w	8006dfe <_printf_float+0xb6>
 80070cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ce:	f10b 0b01 	add.w	fp, fp, #1
 80070d2:	e7b9      	b.n	8007048 <_printf_float+0x300>
 80070d4:	4631      	mov	r1, r6
 80070d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	d1bf      	bne.n	8007062 <_printf_float+0x31a>
 80070e2:	e68c      	b.n	8006dfe <_printf_float+0xb6>
 80070e4:	464b      	mov	r3, r9
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	eb08 020a 	add.w	r2, r8, sl
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d1c2      	bne.n	800707a <_printf_float+0x332>
 80070f4:	e683      	b.n	8006dfe <_printf_float+0xb6>
 80070f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f8:	2a01      	cmp	r2, #1
 80070fa:	dc01      	bgt.n	8007100 <_printf_float+0x3b8>
 80070fc:	07db      	lsls	r3, r3, #31
 80070fe:	d539      	bpl.n	8007174 <_printf_float+0x42c>
 8007100:	2301      	movs	r3, #1
 8007102:	4642      	mov	r2, r8
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f ae77 	beq.w	8006dfe <_printf_float+0xb6>
 8007110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f ae6f 	beq.w	8006dfe <_printf_float+0xb6>
 8007120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007124:	2200      	movs	r2, #0
 8007126:	2300      	movs	r3, #0
 8007128:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800712c:	f7f9 fcf0 	bl	8000b10 <__aeabi_dcmpeq>
 8007130:	b9d8      	cbnz	r0, 800716a <_printf_float+0x422>
 8007132:	f109 33ff 	add.w	r3, r9, #4294967295
 8007136:	f108 0201 	add.w	r2, r8, #1
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	d10e      	bne.n	8007162 <_printf_float+0x41a>
 8007144:	e65b      	b.n	8006dfe <_printf_float+0xb6>
 8007146:	2301      	movs	r3, #1
 8007148:	464a      	mov	r2, r9
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f ae54 	beq.w	8006dfe <_printf_float+0xb6>
 8007156:	f108 0801 	add.w	r8, r8, #1
 800715a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800715c:	3b01      	subs	r3, #1
 800715e:	4543      	cmp	r3, r8
 8007160:	dcf1      	bgt.n	8007146 <_printf_float+0x3fe>
 8007162:	4653      	mov	r3, sl
 8007164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007168:	e6de      	b.n	8006f28 <_printf_float+0x1e0>
 800716a:	f04f 0800 	mov.w	r8, #0
 800716e:	f104 091a 	add.w	r9, r4, #26
 8007172:	e7f2      	b.n	800715a <_printf_float+0x412>
 8007174:	2301      	movs	r3, #1
 8007176:	4642      	mov	r2, r8
 8007178:	e7df      	b.n	800713a <_printf_float+0x3f2>
 800717a:	2301      	movs	r3, #1
 800717c:	464a      	mov	r2, r9
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	47b8      	blx	r7
 8007184:	3001      	adds	r0, #1
 8007186:	f43f ae3a 	beq.w	8006dfe <_printf_float+0xb6>
 800718a:	f108 0801 	add.w	r8, r8, #1
 800718e:	68e3      	ldr	r3, [r4, #12]
 8007190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007192:	1a5b      	subs	r3, r3, r1
 8007194:	4543      	cmp	r3, r8
 8007196:	dcf0      	bgt.n	800717a <_printf_float+0x432>
 8007198:	e6fb      	b.n	8006f92 <_printf_float+0x24a>
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	f104 0919 	add.w	r9, r4, #25
 80071a2:	e7f4      	b.n	800718e <_printf_float+0x446>

080071a4 <_printf_common>:
 80071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a8:	4616      	mov	r6, r2
 80071aa:	4699      	mov	r9, r3
 80071ac:	688a      	ldr	r2, [r1, #8]
 80071ae:	690b      	ldr	r3, [r1, #16]
 80071b0:	4607      	mov	r7, r0
 80071b2:	4293      	cmp	r3, r2
 80071b4:	bfb8      	it	lt
 80071b6:	4613      	movlt	r3, r2
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071be:	460c      	mov	r4, r1
 80071c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071c4:	b10a      	cbz	r2, 80071ca <_printf_common+0x26>
 80071c6:	3301      	adds	r3, #1
 80071c8:	6033      	str	r3, [r6, #0]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	0699      	lsls	r1, r3, #26
 80071ce:	bf42      	ittt	mi
 80071d0:	6833      	ldrmi	r3, [r6, #0]
 80071d2:	3302      	addmi	r3, #2
 80071d4:	6033      	strmi	r3, [r6, #0]
 80071d6:	6825      	ldr	r5, [r4, #0]
 80071d8:	f015 0506 	ands.w	r5, r5, #6
 80071dc:	d106      	bne.n	80071ec <_printf_common+0x48>
 80071de:	f104 0a19 	add.w	sl, r4, #25
 80071e2:	68e3      	ldr	r3, [r4, #12]
 80071e4:	6832      	ldr	r2, [r6, #0]
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	42ab      	cmp	r3, r5
 80071ea:	dc2b      	bgt.n	8007244 <_printf_common+0xa0>
 80071ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071f0:	1e13      	subs	r3, r2, #0
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	bf18      	it	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	0692      	lsls	r2, r2, #26
 80071fa:	d430      	bmi.n	800725e <_printf_common+0xba>
 80071fc:	4649      	mov	r1, r9
 80071fe:	4638      	mov	r0, r7
 8007200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007204:	47c0      	blx	r8
 8007206:	3001      	adds	r0, #1
 8007208:	d023      	beq.n	8007252 <_printf_common+0xae>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	f003 0306 	and.w	r3, r3, #6
 8007212:	2b04      	cmp	r3, #4
 8007214:	bf14      	ite	ne
 8007216:	2500      	movne	r5, #0
 8007218:	6833      	ldreq	r3, [r6, #0]
 800721a:	f04f 0600 	mov.w	r6, #0
 800721e:	bf08      	it	eq
 8007220:	68e5      	ldreq	r5, [r4, #12]
 8007222:	f104 041a 	add.w	r4, r4, #26
 8007226:	bf08      	it	eq
 8007228:	1aed      	subeq	r5, r5, r3
 800722a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800722e:	bf08      	it	eq
 8007230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007234:	4293      	cmp	r3, r2
 8007236:	bfc4      	itt	gt
 8007238:	1a9b      	subgt	r3, r3, r2
 800723a:	18ed      	addgt	r5, r5, r3
 800723c:	42b5      	cmp	r5, r6
 800723e:	d11a      	bne.n	8007276 <_printf_common+0xd2>
 8007240:	2000      	movs	r0, #0
 8007242:	e008      	b.n	8007256 <_printf_common+0xb2>
 8007244:	2301      	movs	r3, #1
 8007246:	4652      	mov	r2, sl
 8007248:	4649      	mov	r1, r9
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d103      	bne.n	800725a <_printf_common+0xb6>
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	3501      	adds	r5, #1
 800725c:	e7c1      	b.n	80071e2 <_printf_common+0x3e>
 800725e:	2030      	movs	r0, #48	; 0x30
 8007260:	18e1      	adds	r1, r4, r3
 8007262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800726c:	4422      	add	r2, r4
 800726e:	3302      	adds	r3, #2
 8007270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007274:	e7c2      	b.n	80071fc <_printf_common+0x58>
 8007276:	2301      	movs	r3, #1
 8007278:	4622      	mov	r2, r4
 800727a:	4649      	mov	r1, r9
 800727c:	4638      	mov	r0, r7
 800727e:	47c0      	blx	r8
 8007280:	3001      	adds	r0, #1
 8007282:	d0e6      	beq.n	8007252 <_printf_common+0xae>
 8007284:	3601      	adds	r6, #1
 8007286:	e7d9      	b.n	800723c <_printf_common+0x98>

08007288 <_printf_i>:
 8007288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	7e0f      	ldrb	r7, [r1, #24]
 800728e:	4691      	mov	r9, r2
 8007290:	2f78      	cmp	r7, #120	; 0x78
 8007292:	4680      	mov	r8, r0
 8007294:	460c      	mov	r4, r1
 8007296:	469a      	mov	sl, r3
 8007298:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800729a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800729e:	d807      	bhi.n	80072b0 <_printf_i+0x28>
 80072a0:	2f62      	cmp	r7, #98	; 0x62
 80072a2:	d80a      	bhi.n	80072ba <_printf_i+0x32>
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	f000 80d5 	beq.w	8007454 <_printf_i+0x1cc>
 80072aa:	2f58      	cmp	r7, #88	; 0x58
 80072ac:	f000 80c1 	beq.w	8007432 <_printf_i+0x1aa>
 80072b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072b8:	e03a      	b.n	8007330 <_printf_i+0xa8>
 80072ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072be:	2b15      	cmp	r3, #21
 80072c0:	d8f6      	bhi.n	80072b0 <_printf_i+0x28>
 80072c2:	a101      	add	r1, pc, #4	; (adr r1, 80072c8 <_printf_i+0x40>)
 80072c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007335 	.word	0x08007335
 80072d0:	080072b1 	.word	0x080072b1
 80072d4:	080072b1 	.word	0x080072b1
 80072d8:	080072b1 	.word	0x080072b1
 80072dc:	080072b1 	.word	0x080072b1
 80072e0:	08007335 	.word	0x08007335
 80072e4:	080072b1 	.word	0x080072b1
 80072e8:	080072b1 	.word	0x080072b1
 80072ec:	080072b1 	.word	0x080072b1
 80072f0:	080072b1 	.word	0x080072b1
 80072f4:	0800743b 	.word	0x0800743b
 80072f8:	08007361 	.word	0x08007361
 80072fc:	080073f5 	.word	0x080073f5
 8007300:	080072b1 	.word	0x080072b1
 8007304:	080072b1 	.word	0x080072b1
 8007308:	0800745d 	.word	0x0800745d
 800730c:	080072b1 	.word	0x080072b1
 8007310:	08007361 	.word	0x08007361
 8007314:	080072b1 	.word	0x080072b1
 8007318:	080072b1 	.word	0x080072b1
 800731c:	080073fd 	.word	0x080073fd
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800732c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007330:	2301      	movs	r3, #1
 8007332:	e0a0      	b.n	8007476 <_printf_i+0x1ee>
 8007334:	6820      	ldr	r0, [r4, #0]
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	0607      	lsls	r7, r0, #24
 800733a:	f103 0104 	add.w	r1, r3, #4
 800733e:	6029      	str	r1, [r5, #0]
 8007340:	d501      	bpl.n	8007346 <_printf_i+0xbe>
 8007342:	681e      	ldr	r6, [r3, #0]
 8007344:	e003      	b.n	800734e <_printf_i+0xc6>
 8007346:	0646      	lsls	r6, r0, #25
 8007348:	d5fb      	bpl.n	8007342 <_printf_i+0xba>
 800734a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800734e:	2e00      	cmp	r6, #0
 8007350:	da03      	bge.n	800735a <_printf_i+0xd2>
 8007352:	232d      	movs	r3, #45	; 0x2d
 8007354:	4276      	negs	r6, r6
 8007356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800735a:	230a      	movs	r3, #10
 800735c:	4859      	ldr	r0, [pc, #356]	; (80074c4 <_printf_i+0x23c>)
 800735e:	e012      	b.n	8007386 <_printf_i+0xfe>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	1d19      	adds	r1, r3, #4
 8007366:	6029      	str	r1, [r5, #0]
 8007368:	0605      	lsls	r5, r0, #24
 800736a:	d501      	bpl.n	8007370 <_printf_i+0xe8>
 800736c:	681e      	ldr	r6, [r3, #0]
 800736e:	e002      	b.n	8007376 <_printf_i+0xee>
 8007370:	0641      	lsls	r1, r0, #25
 8007372:	d5fb      	bpl.n	800736c <_printf_i+0xe4>
 8007374:	881e      	ldrh	r6, [r3, #0]
 8007376:	2f6f      	cmp	r7, #111	; 0x6f
 8007378:	bf0c      	ite	eq
 800737a:	2308      	moveq	r3, #8
 800737c:	230a      	movne	r3, #10
 800737e:	4851      	ldr	r0, [pc, #324]	; (80074c4 <_printf_i+0x23c>)
 8007380:	2100      	movs	r1, #0
 8007382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007386:	6865      	ldr	r5, [r4, #4]
 8007388:	2d00      	cmp	r5, #0
 800738a:	bfa8      	it	ge
 800738c:	6821      	ldrge	r1, [r4, #0]
 800738e:	60a5      	str	r5, [r4, #8]
 8007390:	bfa4      	itt	ge
 8007392:	f021 0104 	bicge.w	r1, r1, #4
 8007396:	6021      	strge	r1, [r4, #0]
 8007398:	b90e      	cbnz	r6, 800739e <_printf_i+0x116>
 800739a:	2d00      	cmp	r5, #0
 800739c:	d04b      	beq.n	8007436 <_printf_i+0x1ae>
 800739e:	4615      	mov	r5, r2
 80073a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80073a4:	fb03 6711 	mls	r7, r3, r1, r6
 80073a8:	5dc7      	ldrb	r7, [r0, r7]
 80073aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073ae:	4637      	mov	r7, r6
 80073b0:	42bb      	cmp	r3, r7
 80073b2:	460e      	mov	r6, r1
 80073b4:	d9f4      	bls.n	80073a0 <_printf_i+0x118>
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d10b      	bne.n	80073d2 <_printf_i+0x14a>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	07de      	lsls	r6, r3, #31
 80073be:	d508      	bpl.n	80073d2 <_printf_i+0x14a>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	6861      	ldr	r1, [r4, #4]
 80073c4:	4299      	cmp	r1, r3
 80073c6:	bfde      	ittt	le
 80073c8:	2330      	movle	r3, #48	; 0x30
 80073ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073d2:	1b52      	subs	r2, r2, r5
 80073d4:	6122      	str	r2, [r4, #16]
 80073d6:	464b      	mov	r3, r9
 80073d8:	4621      	mov	r1, r4
 80073da:	4640      	mov	r0, r8
 80073dc:	f8cd a000 	str.w	sl, [sp]
 80073e0:	aa03      	add	r2, sp, #12
 80073e2:	f7ff fedf 	bl	80071a4 <_printf_common>
 80073e6:	3001      	adds	r0, #1
 80073e8:	d14a      	bne.n	8007480 <_printf_i+0x1f8>
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	b004      	add	sp, #16
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	f043 0320 	orr.w	r3, r3, #32
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	2778      	movs	r7, #120	; 0x78
 80073fe:	4832      	ldr	r0, [pc, #200]	; (80074c8 <_printf_i+0x240>)
 8007400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	6829      	ldr	r1, [r5, #0]
 8007408:	061f      	lsls	r7, r3, #24
 800740a:	f851 6b04 	ldr.w	r6, [r1], #4
 800740e:	d402      	bmi.n	8007416 <_printf_i+0x18e>
 8007410:	065f      	lsls	r7, r3, #25
 8007412:	bf48      	it	mi
 8007414:	b2b6      	uxthmi	r6, r6
 8007416:	07df      	lsls	r7, r3, #31
 8007418:	bf48      	it	mi
 800741a:	f043 0320 	orrmi.w	r3, r3, #32
 800741e:	6029      	str	r1, [r5, #0]
 8007420:	bf48      	it	mi
 8007422:	6023      	strmi	r3, [r4, #0]
 8007424:	b91e      	cbnz	r6, 800742e <_printf_i+0x1a6>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	f023 0320 	bic.w	r3, r3, #32
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	2310      	movs	r3, #16
 8007430:	e7a6      	b.n	8007380 <_printf_i+0xf8>
 8007432:	4824      	ldr	r0, [pc, #144]	; (80074c4 <_printf_i+0x23c>)
 8007434:	e7e4      	b.n	8007400 <_printf_i+0x178>
 8007436:	4615      	mov	r5, r2
 8007438:	e7bd      	b.n	80073b6 <_printf_i+0x12e>
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	6826      	ldr	r6, [r4, #0]
 800743e:	1d18      	adds	r0, r3, #4
 8007440:	6961      	ldr	r1, [r4, #20]
 8007442:	6028      	str	r0, [r5, #0]
 8007444:	0635      	lsls	r5, r6, #24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	d501      	bpl.n	800744e <_printf_i+0x1c6>
 800744a:	6019      	str	r1, [r3, #0]
 800744c:	e002      	b.n	8007454 <_printf_i+0x1cc>
 800744e:	0670      	lsls	r0, r6, #25
 8007450:	d5fb      	bpl.n	800744a <_printf_i+0x1c2>
 8007452:	8019      	strh	r1, [r3, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	4615      	mov	r5, r2
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	e7bc      	b.n	80073d6 <_printf_i+0x14e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	2100      	movs	r1, #0
 8007460:	1d1a      	adds	r2, r3, #4
 8007462:	602a      	str	r2, [r5, #0]
 8007464:	681d      	ldr	r5, [r3, #0]
 8007466:	6862      	ldr	r2, [r4, #4]
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f9d4 	bl	8007816 <memchr>
 800746e:	b108      	cbz	r0, 8007474 <_printf_i+0x1ec>
 8007470:	1b40      	subs	r0, r0, r5
 8007472:	6060      	str	r0, [r4, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	6123      	str	r3, [r4, #16]
 8007478:	2300      	movs	r3, #0
 800747a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747e:	e7aa      	b.n	80073d6 <_printf_i+0x14e>
 8007480:	462a      	mov	r2, r5
 8007482:	4649      	mov	r1, r9
 8007484:	4640      	mov	r0, r8
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	47d0      	blx	sl
 800748a:	3001      	adds	r0, #1
 800748c:	d0ad      	beq.n	80073ea <_printf_i+0x162>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	079b      	lsls	r3, r3, #30
 8007492:	d413      	bmi.n	80074bc <_printf_i+0x234>
 8007494:	68e0      	ldr	r0, [r4, #12]
 8007496:	9b03      	ldr	r3, [sp, #12]
 8007498:	4298      	cmp	r0, r3
 800749a:	bfb8      	it	lt
 800749c:	4618      	movlt	r0, r3
 800749e:	e7a6      	b.n	80073ee <_printf_i+0x166>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4632      	mov	r2, r6
 80074a4:	4649      	mov	r1, r9
 80074a6:	4640      	mov	r0, r8
 80074a8:	47d0      	blx	sl
 80074aa:	3001      	adds	r0, #1
 80074ac:	d09d      	beq.n	80073ea <_printf_i+0x162>
 80074ae:	3501      	adds	r5, #1
 80074b0:	68e3      	ldr	r3, [r4, #12]
 80074b2:	9903      	ldr	r1, [sp, #12]
 80074b4:	1a5b      	subs	r3, r3, r1
 80074b6:	42ab      	cmp	r3, r5
 80074b8:	dcf2      	bgt.n	80074a0 <_printf_i+0x218>
 80074ba:	e7eb      	b.n	8007494 <_printf_i+0x20c>
 80074bc:	2500      	movs	r5, #0
 80074be:	f104 0619 	add.w	r6, r4, #25
 80074c2:	e7f5      	b.n	80074b0 <_printf_i+0x228>
 80074c4:	0800998c 	.word	0x0800998c
 80074c8:	0800999d 	.word	0x0800999d

080074cc <std>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	e9c0 3300 	strd	r3, r3, [r0]
 80074d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	8181      	strh	r1, [r0, #12]
 80074de:	6643      	str	r3, [r0, #100]	; 0x64
 80074e0:	81c2      	strh	r2, [r0, #14]
 80074e2:	6183      	str	r3, [r0, #24]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2208      	movs	r2, #8
 80074e8:	305c      	adds	r0, #92	; 0x5c
 80074ea:	f000 f914 	bl	8007716 <memset>
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <std+0x58>)
 80074f0:	6224      	str	r4, [r4, #32]
 80074f2:	6263      	str	r3, [r4, #36]	; 0x24
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <std+0x5c>)
 80074f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <std+0x60>)
 80074fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074fc:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <std+0x64>)
 80074fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <std+0x68>)
 8007502:	429c      	cmp	r4, r3
 8007504:	d006      	beq.n	8007514 <std+0x48>
 8007506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800750a:	4294      	cmp	r4, r2
 800750c:	d002      	beq.n	8007514 <std+0x48>
 800750e:	33d0      	adds	r3, #208	; 0xd0
 8007510:	429c      	cmp	r4, r3
 8007512:	d105      	bne.n	8007520 <std+0x54>
 8007514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f000 b978 	b.w	8007810 <__retarget_lock_init_recursive>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	08007691 	.word	0x08007691
 8007528:	080076b3 	.word	0x080076b3
 800752c:	080076eb 	.word	0x080076eb
 8007530:	0800770f 	.word	0x0800770f
 8007534:	20000ae8 	.word	0x20000ae8

08007538 <stdio_exit_handler>:
 8007538:	4a02      	ldr	r2, [pc, #8]	; (8007544 <stdio_exit_handler+0xc>)
 800753a:	4903      	ldr	r1, [pc, #12]	; (8007548 <stdio_exit_handler+0x10>)
 800753c:	4803      	ldr	r0, [pc, #12]	; (800754c <stdio_exit_handler+0x14>)
 800753e:	f000 b869 	b.w	8007614 <_fwalk_sglue>
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c
 8007548:	080091ad 	.word	0x080091ad
 800754c:	20000018 	.word	0x20000018

08007550 <cleanup_stdio>:
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <cleanup_stdio+0x34>)
 8007554:	b510      	push	{r4, lr}
 8007556:	4299      	cmp	r1, r3
 8007558:	4604      	mov	r4, r0
 800755a:	d001      	beq.n	8007560 <cleanup_stdio+0x10>
 800755c:	f001 fe26 	bl	80091ac <_fflush_r>
 8007560:	68a1      	ldr	r1, [r4, #8]
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <cleanup_stdio+0x38>)
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <cleanup_stdio+0x1e>
 8007568:	4620      	mov	r0, r4
 800756a:	f001 fe1f 	bl	80091ac <_fflush_r>
 800756e:	68e1      	ldr	r1, [r4, #12]
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <cleanup_stdio+0x3c>)
 8007572:	4299      	cmp	r1, r3
 8007574:	d004      	beq.n	8007580 <cleanup_stdio+0x30>
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757c:	f001 be16 	b.w	80091ac <_fflush_r>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	20000ae8 	.word	0x20000ae8
 8007588:	20000b50 	.word	0x20000b50
 800758c:	20000bb8 	.word	0x20000bb8

08007590 <global_stdio_init.part.0>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <global_stdio_init.part.0+0x30>)
 8007594:	4c0b      	ldr	r4, [pc, #44]	; (80075c4 <global_stdio_init.part.0+0x34>)
 8007596:	4a0c      	ldr	r2, [pc, #48]	; (80075c8 <global_stdio_init.part.0+0x38>)
 8007598:	4620      	mov	r0, r4
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	2104      	movs	r1, #4
 800759e:	2200      	movs	r2, #0
 80075a0:	f7ff ff94 	bl	80074cc <std>
 80075a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075a8:	2201      	movs	r2, #1
 80075aa:	2109      	movs	r1, #9
 80075ac:	f7ff ff8e 	bl	80074cc <std>
 80075b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80075b4:	2202      	movs	r2, #2
 80075b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ba:	2112      	movs	r1, #18
 80075bc:	f7ff bf86 	b.w	80074cc <std>
 80075c0:	20000c20 	.word	0x20000c20
 80075c4:	20000ae8 	.word	0x20000ae8
 80075c8:	08007539 	.word	0x08007539

080075cc <__sfp_lock_acquire>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__sfp_lock_acquire+0x8>)
 80075ce:	f000 b920 	b.w	8007812 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20000c29 	.word	0x20000c29

080075d8 <__sfp_lock_release>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__sfp_lock_release+0x8>)
 80075da:	f000 b91b 	b.w	8007814 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20000c29 	.word	0x20000c29

080075e4 <__sinit>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	f7ff fff0 	bl	80075cc <__sfp_lock_acquire>
 80075ec:	6a23      	ldr	r3, [r4, #32]
 80075ee:	b11b      	cbz	r3, 80075f8 <__sinit+0x14>
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f7ff bff0 	b.w	80075d8 <__sfp_lock_release>
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <__sinit+0x28>)
 80075fa:	6223      	str	r3, [r4, #32]
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <__sinit+0x2c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f5      	bne.n	80075f0 <__sinit+0xc>
 8007604:	f7ff ffc4 	bl	8007590 <global_stdio_init.part.0>
 8007608:	e7f2      	b.n	80075f0 <__sinit+0xc>
 800760a:	bf00      	nop
 800760c:	08007551 	.word	0x08007551
 8007610:	20000c20 	.word	0x20000c20

08007614 <_fwalk_sglue>:
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007618:	4607      	mov	r7, r0
 800761a:	4688      	mov	r8, r1
 800761c:	4614      	mov	r4, r2
 800761e:	2600      	movs	r6, #0
 8007620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007624:	f1b9 0901 	subs.w	r9, r9, #1
 8007628:	d505      	bpl.n	8007636 <_fwalk_sglue+0x22>
 800762a:	6824      	ldr	r4, [r4, #0]
 800762c:	2c00      	cmp	r4, #0
 800762e:	d1f7      	bne.n	8007620 <_fwalk_sglue+0xc>
 8007630:	4630      	mov	r0, r6
 8007632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d907      	bls.n	800764c <_fwalk_sglue+0x38>
 800763c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007640:	3301      	adds	r3, #1
 8007642:	d003      	beq.n	800764c <_fwalk_sglue+0x38>
 8007644:	4629      	mov	r1, r5
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	4306      	orrs	r6, r0
 800764c:	3568      	adds	r5, #104	; 0x68
 800764e:	e7e9      	b.n	8007624 <_fwalk_sglue+0x10>

08007650 <siprintf>:
 8007650:	b40e      	push	{r1, r2, r3}
 8007652:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007656:	b500      	push	{lr}
 8007658:	b09c      	sub	sp, #112	; 0x70
 800765a:	ab1d      	add	r3, sp, #116	; 0x74
 800765c:	9002      	str	r0, [sp, #8]
 800765e:	9006      	str	r0, [sp, #24]
 8007660:	9107      	str	r1, [sp, #28]
 8007662:	9104      	str	r1, [sp, #16]
 8007664:	4808      	ldr	r0, [pc, #32]	; (8007688 <siprintf+0x38>)
 8007666:	4909      	ldr	r1, [pc, #36]	; (800768c <siprintf+0x3c>)
 8007668:	f853 2b04 	ldr.w	r2, [r3], #4
 800766c:	9105      	str	r1, [sp, #20]
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	a902      	add	r1, sp, #8
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	f001 fc1a 	bl	8008eac <_svfiprintf_r>
 8007678:	2200      	movs	r2, #0
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	b01c      	add	sp, #112	; 0x70
 8007680:	f85d eb04 	ldr.w	lr, [sp], #4
 8007684:	b003      	add	sp, #12
 8007686:	4770      	bx	lr
 8007688:	20000064 	.word	0x20000064
 800768c:	ffff0208 	.word	0xffff0208

08007690 <__sread>:
 8007690:	b510      	push	{r4, lr}
 8007692:	460c      	mov	r4, r1
 8007694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007698:	f000 f86c 	bl	8007774 <_read_r>
 800769c:	2800      	cmp	r0, #0
 800769e:	bfab      	itete	ge
 80076a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076a2:	89a3      	ldrhlt	r3, [r4, #12]
 80076a4:	181b      	addge	r3, r3, r0
 80076a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076aa:	bfac      	ite	ge
 80076ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ae:	81a3      	strhlt	r3, [r4, #12]
 80076b0:	bd10      	pop	{r4, pc}

080076b2 <__swrite>:
 80076b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b6:	461f      	mov	r7, r3
 80076b8:	898b      	ldrh	r3, [r1, #12]
 80076ba:	4605      	mov	r5, r0
 80076bc:	05db      	lsls	r3, r3, #23
 80076be:	460c      	mov	r4, r1
 80076c0:	4616      	mov	r6, r2
 80076c2:	d505      	bpl.n	80076d0 <__swrite+0x1e>
 80076c4:	2302      	movs	r3, #2
 80076c6:	2200      	movs	r2, #0
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	f000 f840 	bl	8007750 <_lseek_r>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	4632      	mov	r2, r6
 80076d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076d8:	81a3      	strh	r3, [r4, #12]
 80076da:	4628      	mov	r0, r5
 80076dc:	463b      	mov	r3, r7
 80076de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	f000 b857 	b.w	8007798 <_write_r>

080076ea <__sseek>:
 80076ea:	b510      	push	{r4, lr}
 80076ec:	460c      	mov	r4, r1
 80076ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f2:	f000 f82d 	bl	8007750 <_lseek_r>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	bf15      	itete	ne
 80076fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80076fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007706:	81a3      	strheq	r3, [r4, #12]
 8007708:	bf18      	it	ne
 800770a:	81a3      	strhne	r3, [r4, #12]
 800770c:	bd10      	pop	{r4, pc}

0800770e <__sclose>:
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 b80d 	b.w	8007730 <_close_r>

08007716 <memset>:
 8007716:	4603      	mov	r3, r0
 8007718:	4402      	add	r2, r0
 800771a:	4293      	cmp	r3, r2
 800771c:	d100      	bne.n	8007720 <memset+0xa>
 800771e:	4770      	bx	lr
 8007720:	f803 1b01 	strb.w	r1, [r3], #1
 8007724:	e7f9      	b.n	800771a <memset+0x4>
	...

08007728 <_localeconv_r>:
 8007728:	4800      	ldr	r0, [pc, #0]	; (800772c <_localeconv_r+0x4>)
 800772a:	4770      	bx	lr
 800772c:	20000158 	.word	0x20000158

08007730 <_close_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	2300      	movs	r3, #0
 8007734:	4d05      	ldr	r5, [pc, #20]	; (800774c <_close_r+0x1c>)
 8007736:	4604      	mov	r4, r0
 8007738:	4608      	mov	r0, r1
 800773a:	602b      	str	r3, [r5, #0]
 800773c:	f7fa f8bc 	bl	80018b8 <_close>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_close_r+0x1a>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_close_r+0x1a>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	20000c24 	.word	0x20000c24

08007750 <_lseek_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	2200      	movs	r2, #0
 800775a:	4d05      	ldr	r5, [pc, #20]	; (8007770 <_lseek_r+0x20>)
 800775c:	602a      	str	r2, [r5, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	f7fa f8ce 	bl	8001900 <_lseek>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_lseek_r+0x1e>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_lseek_r+0x1e>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	20000c24 	.word	0x20000c24

08007774 <_read_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	2200      	movs	r2, #0
 800777e:	4d05      	ldr	r5, [pc, #20]	; (8007794 <_read_r+0x20>)
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7fa f85f 	bl	8001846 <_read>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_read_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_read_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20000c24 	.word	0x20000c24

08007798 <_write_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	4d05      	ldr	r5, [pc, #20]	; (80077b8 <_write_r+0x20>)
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7fa f86a 	bl	8001880 <_write>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_write_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_write_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20000c24 	.word	0x20000c24

080077bc <__errno>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	; (80077c4 <__errno+0x8>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000064 	.word	0x20000064

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2600      	movs	r6, #0
 80077cc:	4d0c      	ldr	r5, [pc, #48]	; (8007800 <__libc_init_array+0x38>)
 80077ce:	4c0d      	ldr	r4, [pc, #52]	; (8007804 <__libc_init_array+0x3c>)
 80077d0:	1b64      	subs	r4, r4, r5
 80077d2:	10a4      	asrs	r4, r4, #2
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	f002 f888 	bl	80098ec <_init>
 80077dc:	2600      	movs	r6, #0
 80077de:	4d0a      	ldr	r5, [pc, #40]	; (8007808 <__libc_init_array+0x40>)
 80077e0:	4c0a      	ldr	r4, [pc, #40]	; (800780c <__libc_init_array+0x44>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	08009cec 	.word	0x08009cec
 8007804:	08009cec 	.word	0x08009cec
 8007808:	08009cec 	.word	0x08009cec
 800780c:	08009cf0 	.word	0x08009cf0

08007810 <__retarget_lock_init_recursive>:
 8007810:	4770      	bx	lr

08007812 <__retarget_lock_acquire_recursive>:
 8007812:	4770      	bx	lr

08007814 <__retarget_lock_release_recursive>:
 8007814:	4770      	bx	lr

08007816 <memchr>:
 8007816:	4603      	mov	r3, r0
 8007818:	b510      	push	{r4, lr}
 800781a:	b2c9      	uxtb	r1, r1
 800781c:	4402      	add	r2, r0
 800781e:	4293      	cmp	r3, r2
 8007820:	4618      	mov	r0, r3
 8007822:	d101      	bne.n	8007828 <memchr+0x12>
 8007824:	2000      	movs	r0, #0
 8007826:	e003      	b.n	8007830 <memchr+0x1a>
 8007828:	7804      	ldrb	r4, [r0, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	428c      	cmp	r4, r1
 800782e:	d1f6      	bne.n	800781e <memchr+0x8>
 8007830:	bd10      	pop	{r4, pc}

08007832 <quorem>:
 8007832:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007836:	6903      	ldr	r3, [r0, #16]
 8007838:	690c      	ldr	r4, [r1, #16]
 800783a:	4607      	mov	r7, r0
 800783c:	42a3      	cmp	r3, r4
 800783e:	db7f      	blt.n	8007940 <quorem+0x10e>
 8007840:	3c01      	subs	r4, #1
 8007842:	f100 0514 	add.w	r5, r0, #20
 8007846:	f101 0814 	add.w	r8, r1, #20
 800784a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007858:	3301      	adds	r3, #1
 800785a:	429a      	cmp	r2, r3
 800785c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007860:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007864:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007868:	d331      	bcc.n	80078ce <quorem+0x9c>
 800786a:	f04f 0e00 	mov.w	lr, #0
 800786e:	4640      	mov	r0, r8
 8007870:	46ac      	mov	ip, r5
 8007872:	46f2      	mov	sl, lr
 8007874:	f850 2b04 	ldr.w	r2, [r0], #4
 8007878:	b293      	uxth	r3, r2
 800787a:	fb06 e303 	mla	r3, r6, r3, lr
 800787e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007882:	0c1a      	lsrs	r2, r3, #16
 8007884:	b29b      	uxth	r3, r3
 8007886:	fb06 220e 	mla	r2, r6, lr, r2
 800788a:	ebaa 0303 	sub.w	r3, sl, r3
 800788e:	f8dc a000 	ldr.w	sl, [ip]
 8007892:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007896:	fa1f fa8a 	uxth.w	sl, sl
 800789a:	4453      	add	r3, sl
 800789c:	f8dc a000 	ldr.w	sl, [ip]
 80078a0:	b292      	uxth	r2, r2
 80078a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b0:	4581      	cmp	r9, r0
 80078b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078b6:	f84c 3b04 	str.w	r3, [ip], #4
 80078ba:	d2db      	bcs.n	8007874 <quorem+0x42>
 80078bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80078c0:	b92b      	cbnz	r3, 80078ce <quorem+0x9c>
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	3b04      	subs	r3, #4
 80078c6:	429d      	cmp	r5, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	d32d      	bcc.n	8007928 <quorem+0xf6>
 80078cc:	613c      	str	r4, [r7, #16]
 80078ce:	4638      	mov	r0, r7
 80078d0:	f001 f994 	bl	8008bfc <__mcmp>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	db23      	blt.n	8007920 <quorem+0xee>
 80078d8:	4629      	mov	r1, r5
 80078da:	2000      	movs	r0, #0
 80078dc:	3601      	adds	r6, #1
 80078de:	f858 2b04 	ldr.w	r2, [r8], #4
 80078e2:	f8d1 c000 	ldr.w	ip, [r1]
 80078e6:	b293      	uxth	r3, r2
 80078e8:	1ac3      	subs	r3, r0, r3
 80078ea:	0c12      	lsrs	r2, r2, #16
 80078ec:	fa1f f08c 	uxth.w	r0, ip
 80078f0:	4403      	add	r3, r0
 80078f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80078f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007900:	45c1      	cmp	r9, r8
 8007902:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007906:	f841 3b04 	str.w	r3, [r1], #4
 800790a:	d2e8      	bcs.n	80078de <quorem+0xac>
 800790c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007910:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007914:	b922      	cbnz	r2, 8007920 <quorem+0xee>
 8007916:	3b04      	subs	r3, #4
 8007918:	429d      	cmp	r5, r3
 800791a:	461a      	mov	r2, r3
 800791c:	d30a      	bcc.n	8007934 <quorem+0x102>
 800791e:	613c      	str	r4, [r7, #16]
 8007920:	4630      	mov	r0, r6
 8007922:	b003      	add	sp, #12
 8007924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	3b04      	subs	r3, #4
 800792c:	2a00      	cmp	r2, #0
 800792e:	d1cd      	bne.n	80078cc <quorem+0x9a>
 8007930:	3c01      	subs	r4, #1
 8007932:	e7c8      	b.n	80078c6 <quorem+0x94>
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	3b04      	subs	r3, #4
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1f0      	bne.n	800791e <quorem+0xec>
 800793c:	3c01      	subs	r4, #1
 800793e:	e7eb      	b.n	8007918 <quorem+0xe6>
 8007940:	2000      	movs	r0, #0
 8007942:	e7ee      	b.n	8007922 <quorem+0xf0>
 8007944:	0000      	movs	r0, r0
	...

08007948 <_dtoa_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	4616      	mov	r6, r2
 800794e:	461f      	mov	r7, r3
 8007950:	69c4      	ldr	r4, [r0, #28]
 8007952:	b099      	sub	sp, #100	; 0x64
 8007954:	4605      	mov	r5, r0
 8007956:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800795a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800795e:	b974      	cbnz	r4, 800797e <_dtoa_r+0x36>
 8007960:	2010      	movs	r0, #16
 8007962:	f000 fe1d 	bl	80085a0 <malloc>
 8007966:	4602      	mov	r2, r0
 8007968:	61e8      	str	r0, [r5, #28]
 800796a:	b920      	cbnz	r0, 8007976 <_dtoa_r+0x2e>
 800796c:	21ef      	movs	r1, #239	; 0xef
 800796e:	4bac      	ldr	r3, [pc, #688]	; (8007c20 <_dtoa_r+0x2d8>)
 8007970:	48ac      	ldr	r0, [pc, #688]	; (8007c24 <_dtoa_r+0x2dc>)
 8007972:	f001 fc7b 	bl	800926c <__assert_func>
 8007976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800797a:	6004      	str	r4, [r0, #0]
 800797c:	60c4      	str	r4, [r0, #12]
 800797e:	69eb      	ldr	r3, [r5, #28]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	b151      	cbz	r1, 800799a <_dtoa_r+0x52>
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	2301      	movs	r3, #1
 8007988:	4093      	lsls	r3, r2
 800798a:	604a      	str	r2, [r1, #4]
 800798c:	608b      	str	r3, [r1, #8]
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fefa 	bl	8008788 <_Bfree>
 8007994:	2200      	movs	r2, #0
 8007996:	69eb      	ldr	r3, [r5, #28]
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	1e3b      	subs	r3, r7, #0
 800799c:	bfaf      	iteee	ge
 800799e:	2300      	movge	r3, #0
 80079a0:	2201      	movlt	r2, #1
 80079a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079a6:	9305      	strlt	r3, [sp, #20]
 80079a8:	bfa8      	it	ge
 80079aa:	f8c8 3000 	strge.w	r3, [r8]
 80079ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80079b2:	4b9d      	ldr	r3, [pc, #628]	; (8007c28 <_dtoa_r+0x2e0>)
 80079b4:	bfb8      	it	lt
 80079b6:	f8c8 2000 	strlt.w	r2, [r8]
 80079ba:	ea33 0309 	bics.w	r3, r3, r9
 80079be:	d119      	bne.n	80079f4 <_dtoa_r+0xac>
 80079c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80079c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079cc:	4333      	orrs	r3, r6
 80079ce:	f000 8589 	beq.w	80084e4 <_dtoa_r+0xb9c>
 80079d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079d4:	b953      	cbnz	r3, 80079ec <_dtoa_r+0xa4>
 80079d6:	4b95      	ldr	r3, [pc, #596]	; (8007c2c <_dtoa_r+0x2e4>)
 80079d8:	e023      	b.n	8007a22 <_dtoa_r+0xda>
 80079da:	4b95      	ldr	r3, [pc, #596]	; (8007c30 <_dtoa_r+0x2e8>)
 80079dc:	9303      	str	r3, [sp, #12]
 80079de:	3308      	adds	r3, #8
 80079e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	9803      	ldr	r0, [sp, #12]
 80079e6:	b019      	add	sp, #100	; 0x64
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	4b8f      	ldr	r3, [pc, #572]	; (8007c2c <_dtoa_r+0x2e4>)
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	3303      	adds	r3, #3
 80079f2:	e7f5      	b.n	80079e0 <_dtoa_r+0x98>
 80079f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80079f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80079fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a00:	2200      	movs	r2, #0
 8007a02:	2300      	movs	r3, #0
 8007a04:	f7f9 f884 	bl	8000b10 <__aeabi_dcmpeq>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	b160      	cbz	r0, 8007a26 <_dtoa_r+0xde>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8562 	beq.w	80084de <_dtoa_r+0xb96>
 8007a1a:	4b86      	ldr	r3, [pc, #536]	; (8007c34 <_dtoa_r+0x2ec>)
 8007a1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	e7de      	b.n	80079e4 <_dtoa_r+0x9c>
 8007a26:	ab16      	add	r3, sp, #88	; 0x58
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	ab17      	add	r3, sp, #92	; 0x5c
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	4628      	mov	r0, r5
 8007a30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007a34:	f001 f98a 	bl	8008d4c <__d2b>
 8007a38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	d07e      	beq.n	8007b40 <_dtoa_r+0x1f8>
 8007a42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4b75      	ldr	r3, [pc, #468]	; (8007c38 <_dtoa_r+0x2f0>)
 8007a62:	f7f8 fc35 	bl	80002d0 <__aeabi_dsub>
 8007a66:	a368      	add	r3, pc, #416	; (adr r3, 8007c08 <_dtoa_r+0x2c0>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fde8 	bl	8000640 <__aeabi_dmul>
 8007a70:	a367      	add	r3, pc, #412	; (adr r3, 8007c10 <_dtoa_r+0x2c8>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fc2d 	bl	80002d4 <__adddf3>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	460f      	mov	r7, r1
 8007a80:	f7f8 fd74 	bl	800056c <__aeabi_i2d>
 8007a84:	a364      	add	r3, pc, #400	; (adr r3, 8007c18 <_dtoa_r+0x2d0>)
 8007a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8a:	f7f8 fdd9 	bl	8000640 <__aeabi_dmul>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4630      	mov	r0, r6
 8007a94:	4639      	mov	r1, r7
 8007a96:	f7f8 fc1d 	bl	80002d4 <__adddf3>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	f7f9 f87f 	bl	8000ba0 <__aeabi_d2iz>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4683      	mov	fp, r0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f9 f83a 	bl	8000b24 <__aeabi_dcmplt>
 8007ab0:	b148      	cbz	r0, 8007ac6 <_dtoa_r+0x17e>
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f7f8 fd5a 	bl	800056c <__aeabi_i2d>
 8007ab8:	4632      	mov	r2, r6
 8007aba:	463b      	mov	r3, r7
 8007abc:	f7f9 f828 	bl	8000b10 <__aeabi_dcmpeq>
 8007ac0:	b908      	cbnz	r0, 8007ac6 <_dtoa_r+0x17e>
 8007ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ac6:	f1bb 0f16 	cmp.w	fp, #22
 8007aca:	d857      	bhi.n	8007b7c <_dtoa_r+0x234>
 8007acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ad0:	4b5a      	ldr	r3, [pc, #360]	; (8007c3c <_dtoa_r+0x2f4>)
 8007ad2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f7f9 f823 	bl	8000b24 <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d04e      	beq.n	8007b80 <_dtoa_r+0x238>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ae8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007aec:	1b1b      	subs	r3, r3, r4
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	bf46      	itte	mi
 8007af2:	f1c3 0901 	rsbmi	r9, r3, #1
 8007af6:	2300      	movmi	r3, #0
 8007af8:	f04f 0900 	movpl.w	r9, #0
 8007afc:	9209      	str	r2, [sp, #36]	; 0x24
 8007afe:	bf48      	it	mi
 8007b00:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007b02:	f1bb 0f00 	cmp.w	fp, #0
 8007b06:	db3d      	blt.n	8007b84 <_dtoa_r+0x23c>
 8007b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007b0e:	445b      	add	r3, fp
 8007b10:	9309      	str	r3, [sp, #36]	; 0x24
 8007b12:	2300      	movs	r3, #0
 8007b14:	930a      	str	r3, [sp, #40]	; 0x28
 8007b16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b18:	2b09      	cmp	r3, #9
 8007b1a:	d867      	bhi.n	8007bec <_dtoa_r+0x2a4>
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	bfc4      	itt	gt
 8007b20:	3b04      	subgt	r3, #4
 8007b22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007b24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b26:	bfc8      	it	gt
 8007b28:	2400      	movgt	r4, #0
 8007b2a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b2e:	bfd8      	it	le
 8007b30:	2401      	movle	r4, #1
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f200 8086 	bhi.w	8007c44 <_dtoa_r+0x2fc>
 8007b38:	e8df f003 	tbb	[pc, r3]
 8007b3c:	5637392c 	.word	0x5637392c
 8007b40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007b44:	441c      	add	r4, r3
 8007b46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007b4a:	2b20      	cmp	r3, #32
 8007b4c:	bfc1      	itttt	gt
 8007b4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b52:	fa09 f903 	lslgt.w	r9, r9, r3
 8007b56:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8007b5a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007b5e:	bfd6      	itet	le
 8007b60:	f1c3 0320 	rsble	r3, r3, #32
 8007b64:	ea49 0003 	orrgt.w	r0, r9, r3
 8007b68:	fa06 f003 	lslle.w	r0, r6, r3
 8007b6c:	f7f8 fcee 	bl	800054c <__aeabi_ui2d>
 8007b70:	2201      	movs	r2, #1
 8007b72:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007b76:	3c01      	subs	r4, #1
 8007b78:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b7a:	e76f      	b.n	8007a5c <_dtoa_r+0x114>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e7b3      	b.n	8007ae8 <_dtoa_r+0x1a0>
 8007b80:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b82:	e7b2      	b.n	8007aea <_dtoa_r+0x1a2>
 8007b84:	f1cb 0300 	rsb	r3, fp, #0
 8007b88:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	eba9 090b 	sub.w	r9, r9, fp
 8007b90:	930e      	str	r3, [sp, #56]	; 0x38
 8007b92:	e7c0      	b.n	8007b16 <_dtoa_r+0x1ce>
 8007b94:	2300      	movs	r3, #0
 8007b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc55      	bgt.n	8007c4a <_dtoa_r+0x302>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	9306      	str	r3, [sp, #24]
 8007ba4:	9308      	str	r3, [sp, #32]
 8007ba6:	9223      	str	r2, [sp, #140]	; 0x8c
 8007ba8:	e00b      	b.n	8007bc2 <_dtoa_r+0x27a>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e7f3      	b.n	8007b96 <_dtoa_r+0x24e>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007bb4:	445b      	add	r3, fp
 8007bb6:	9306      	str	r3, [sp, #24]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	9308      	str	r3, [sp, #32]
 8007bbe:	bfb8      	it	lt
 8007bc0:	2301      	movlt	r3, #1
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	69e8      	ldr	r0, [r5, #28]
 8007bc8:	f102 0614 	add.w	r6, r2, #20
 8007bcc:	429e      	cmp	r6, r3
 8007bce:	d940      	bls.n	8007c52 <_dtoa_r+0x30a>
 8007bd0:	6041      	str	r1, [r0, #4]
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fd98 	bl	8008708 <_Balloc>
 8007bd8:	9003      	str	r0, [sp, #12]
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d13c      	bne.n	8007c58 <_dtoa_r+0x310>
 8007bde:	4602      	mov	r2, r0
 8007be0:	f240 11af 	movw	r1, #431	; 0x1af
 8007be4:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <_dtoa_r+0x2f8>)
 8007be6:	e6c3      	b.n	8007970 <_dtoa_r+0x28>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7e1      	b.n	8007bb0 <_dtoa_r+0x268>
 8007bec:	2401      	movs	r4, #1
 8007bee:	2300      	movs	r3, #0
 8007bf0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007bf2:	9322      	str	r3, [sp, #136]	; 0x88
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	2312      	movs	r3, #18
 8007c00:	e7d1      	b.n	8007ba6 <_dtoa_r+0x25e>
 8007c02:	bf00      	nop
 8007c04:	f3af 8000 	nop.w
 8007c08:	636f4361 	.word	0x636f4361
 8007c0c:	3fd287a7 	.word	0x3fd287a7
 8007c10:	8b60c8b3 	.word	0x8b60c8b3
 8007c14:	3fc68a28 	.word	0x3fc68a28
 8007c18:	509f79fb 	.word	0x509f79fb
 8007c1c:	3fd34413 	.word	0x3fd34413
 8007c20:	080099bb 	.word	0x080099bb
 8007c24:	080099d2 	.word	0x080099d2
 8007c28:	7ff00000 	.word	0x7ff00000
 8007c2c:	080099b7 	.word	0x080099b7
 8007c30:	080099ae 	.word	0x080099ae
 8007c34:	0800998b 	.word	0x0800998b
 8007c38:	3ff80000 	.word	0x3ff80000
 8007c3c:	08009ac0 	.word	0x08009ac0
 8007c40:	08009a2a 	.word	0x08009a2a
 8007c44:	2301      	movs	r3, #1
 8007c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c48:	e7d4      	b.n	8007bf4 <_dtoa_r+0x2ac>
 8007c4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c4c:	9306      	str	r3, [sp, #24]
 8007c4e:	9308      	str	r3, [sp, #32]
 8007c50:	e7b7      	b.n	8007bc2 <_dtoa_r+0x27a>
 8007c52:	3101      	adds	r1, #1
 8007c54:	0052      	lsls	r2, r2, #1
 8007c56:	e7b7      	b.n	8007bc8 <_dtoa_r+0x280>
 8007c58:	69eb      	ldr	r3, [r5, #28]
 8007c5a:	9a03      	ldr	r2, [sp, #12]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	9b08      	ldr	r3, [sp, #32]
 8007c60:	2b0e      	cmp	r3, #14
 8007c62:	f200 80a8 	bhi.w	8007db6 <_dtoa_r+0x46e>
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	f000 80a5 	beq.w	8007db6 <_dtoa_r+0x46e>
 8007c6c:	f1bb 0f00 	cmp.w	fp, #0
 8007c70:	dd34      	ble.n	8007cdc <_dtoa_r+0x394>
 8007c72:	4b9a      	ldr	r3, [pc, #616]	; (8007edc <_dtoa_r+0x594>)
 8007c74:	f00b 020f 	and.w	r2, fp, #15
 8007c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007c80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c84:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c88:	ea4f 142b 	mov.w	r4, fp, asr #4
 8007c8c:	d016      	beq.n	8007cbc <_dtoa_r+0x374>
 8007c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c92:	4b93      	ldr	r3, [pc, #588]	; (8007ee0 <_dtoa_r+0x598>)
 8007c94:	2703      	movs	r7, #3
 8007c96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c9a:	f7f8 fdfb 	bl	8000894 <__aeabi_ddiv>
 8007c9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca2:	f004 040f 	and.w	r4, r4, #15
 8007ca6:	4e8e      	ldr	r6, [pc, #568]	; (8007ee0 <_dtoa_r+0x598>)
 8007ca8:	b954      	cbnz	r4, 8007cc0 <_dtoa_r+0x378>
 8007caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007cae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cb2:	f7f8 fdef 	bl	8000894 <__aeabi_ddiv>
 8007cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cba:	e029      	b.n	8007d10 <_dtoa_r+0x3c8>
 8007cbc:	2702      	movs	r7, #2
 8007cbe:	e7f2      	b.n	8007ca6 <_dtoa_r+0x35e>
 8007cc0:	07e1      	lsls	r1, r4, #31
 8007cc2:	d508      	bpl.n	8007cd6 <_dtoa_r+0x38e>
 8007cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ccc:	f7f8 fcb8 	bl	8000640 <__aeabi_dmul>
 8007cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cd4:	3701      	adds	r7, #1
 8007cd6:	1064      	asrs	r4, r4, #1
 8007cd8:	3608      	adds	r6, #8
 8007cda:	e7e5      	b.n	8007ca8 <_dtoa_r+0x360>
 8007cdc:	f000 80a5 	beq.w	8007e2a <_dtoa_r+0x4e2>
 8007ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ce4:	f1cb 0400 	rsb	r4, fp, #0
 8007ce8:	4b7c      	ldr	r3, [pc, #496]	; (8007edc <_dtoa_r+0x594>)
 8007cea:	f004 020f 	and.w	r2, r4, #15
 8007cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fca3 	bl	8000640 <__aeabi_dmul>
 8007cfa:	2702      	movs	r7, #2
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d02:	4e77      	ldr	r6, [pc, #476]	; (8007ee0 <_dtoa_r+0x598>)
 8007d04:	1124      	asrs	r4, r4, #4
 8007d06:	2c00      	cmp	r4, #0
 8007d08:	f040 8084 	bne.w	8007e14 <_dtoa_r+0x4cc>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1d2      	bne.n	8007cb6 <_dtoa_r+0x36e>
 8007d10:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8087 	beq.w	8007e2e <_dtoa_r+0x4e6>
 8007d20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d24:	2200      	movs	r2, #0
 8007d26:	4b6f      	ldr	r3, [pc, #444]	; (8007ee4 <_dtoa_r+0x59c>)
 8007d28:	f7f8 fefc 	bl	8000b24 <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d07e      	beq.n	8007e2e <_dtoa_r+0x4e6>
 8007d30:	9b08      	ldr	r3, [sp, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d07b      	beq.n	8007e2e <_dtoa_r+0x4e6>
 8007d36:	9b06      	ldr	r3, [sp, #24]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dd38      	ble.n	8007dae <_dtoa_r+0x466>
 8007d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d40:	2200      	movs	r2, #0
 8007d42:	4b69      	ldr	r3, [pc, #420]	; (8007ee8 <_dtoa_r+0x5a0>)
 8007d44:	f7f8 fc7c 	bl	8000640 <__aeabi_dmul>
 8007d48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d4c:	9c06      	ldr	r4, [sp, #24]
 8007d4e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007d52:	3701      	adds	r7, #1
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7f8 fc09 	bl	800056c <__aeabi_i2d>
 8007d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5e:	f7f8 fc6f 	bl	8000640 <__aeabi_dmul>
 8007d62:	2200      	movs	r2, #0
 8007d64:	4b61      	ldr	r3, [pc, #388]	; (8007eec <_dtoa_r+0x5a4>)
 8007d66:	f7f8 fab5 	bl	80002d4 <__adddf3>
 8007d6a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d72:	9611      	str	r6, [sp, #68]	; 0x44
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	d15d      	bne.n	8007e34 <_dtoa_r+0x4ec>
 8007d78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	4b5c      	ldr	r3, [pc, #368]	; (8007ef0 <_dtoa_r+0x5a8>)
 8007d80:	f7f8 faa6 	bl	80002d0 <__aeabi_dsub>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d8c:	4633      	mov	r3, r6
 8007d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d90:	f7f8 fee6 	bl	8000b60 <__aeabi_dcmpgt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f040 8295 	bne.w	80082c4 <_dtoa_r+0x97c>
 8007d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007da0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007da4:	f7f8 febe 	bl	8000b24 <__aeabi_dcmplt>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f040 8289 	bne.w	80082c0 <_dtoa_r+0x978>
 8007dae:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007db2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007db6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f2c0 8151 	blt.w	8008060 <_dtoa_r+0x718>
 8007dbe:	f1bb 0f0e 	cmp.w	fp, #14
 8007dc2:	f300 814d 	bgt.w	8008060 <_dtoa_r+0x718>
 8007dc6:	4b45      	ldr	r3, [pc, #276]	; (8007edc <_dtoa_r+0x594>)
 8007dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dd0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007dd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f280 80da 	bge.w	8007f90 <_dtoa_r+0x648>
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f300 80d6 	bgt.w	8007f90 <_dtoa_r+0x648>
 8007de4:	f040 826b 	bne.w	80082be <_dtoa_r+0x976>
 8007de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dec:	2200      	movs	r2, #0
 8007dee:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <_dtoa_r+0x5a8>)
 8007df0:	f7f8 fc26 	bl	8000640 <__aeabi_dmul>
 8007df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df8:	f7f8 fea8 	bl	8000b4c <__aeabi_dcmpge>
 8007dfc:	9c08      	ldr	r4, [sp, #32]
 8007dfe:	4626      	mov	r6, r4
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f040 8241 	bne.w	8008288 <_dtoa_r+0x940>
 8007e06:	2331      	movs	r3, #49	; 0x31
 8007e08:	9f03      	ldr	r7, [sp, #12]
 8007e0a:	f10b 0b01 	add.w	fp, fp, #1
 8007e0e:	f807 3b01 	strb.w	r3, [r7], #1
 8007e12:	e23d      	b.n	8008290 <_dtoa_r+0x948>
 8007e14:	07e2      	lsls	r2, r4, #31
 8007e16:	d505      	bpl.n	8007e24 <_dtoa_r+0x4dc>
 8007e18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e1c:	f7f8 fc10 	bl	8000640 <__aeabi_dmul>
 8007e20:	2301      	movs	r3, #1
 8007e22:	3701      	adds	r7, #1
 8007e24:	1064      	asrs	r4, r4, #1
 8007e26:	3608      	adds	r6, #8
 8007e28:	e76d      	b.n	8007d06 <_dtoa_r+0x3be>
 8007e2a:	2702      	movs	r7, #2
 8007e2c:	e770      	b.n	8007d10 <_dtoa_r+0x3c8>
 8007e2e:	46d8      	mov	r8, fp
 8007e30:	9c08      	ldr	r4, [sp, #32]
 8007e32:	e78f      	b.n	8007d54 <_dtoa_r+0x40c>
 8007e34:	9903      	ldr	r1, [sp, #12]
 8007e36:	4b29      	ldr	r3, [pc, #164]	; (8007edc <_dtoa_r+0x594>)
 8007e38:	4421      	add	r1, r4
 8007e3a:	9112      	str	r1, [sp, #72]	; 0x48
 8007e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e3e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e4a:	2900      	cmp	r1, #0
 8007e4c:	d054      	beq.n	8007ef8 <_dtoa_r+0x5b0>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	4928      	ldr	r1, [pc, #160]	; (8007ef4 <_dtoa_r+0x5ac>)
 8007e52:	f7f8 fd1f 	bl	8000894 <__aeabi_ddiv>
 8007e56:	463b      	mov	r3, r7
 8007e58:	4632      	mov	r2, r6
 8007e5a:	f7f8 fa39 	bl	80002d0 <__aeabi_dsub>
 8007e5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e62:	9f03      	ldr	r7, [sp, #12]
 8007e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e68:	f7f8 fe9a 	bl	8000ba0 <__aeabi_d2iz>
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	f7f8 fb7d 	bl	800056c <__aeabi_i2d>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e7a:	f7f8 fa29 	bl	80002d0 <__aeabi_dsub>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	3430      	adds	r4, #48	; 0x30
 8007e84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e8c:	f807 4b01 	strb.w	r4, [r7], #1
 8007e90:	f7f8 fe48 	bl	8000b24 <__aeabi_dcmplt>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d173      	bne.n	8007f80 <_dtoa_r+0x638>
 8007e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	4911      	ldr	r1, [pc, #68]	; (8007ee4 <_dtoa_r+0x59c>)
 8007ea0:	f7f8 fa16 	bl	80002d0 <__aeabi_dsub>
 8007ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ea8:	f7f8 fe3c 	bl	8000b24 <__aeabi_dcmplt>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	f040 80b6 	bne.w	800801e <_dtoa_r+0x6d6>
 8007eb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb4:	429f      	cmp	r7, r3
 8007eb6:	f43f af7a 	beq.w	8007dae <_dtoa_r+0x466>
 8007eba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <_dtoa_r+0x5a0>)
 8007ec2:	f7f8 fbbd 	bl	8000640 <__aeabi_dmul>
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <_dtoa_r+0x5a0>)
 8007ed2:	f7f8 fbb5 	bl	8000640 <__aeabi_dmul>
 8007ed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eda:	e7c3      	b.n	8007e64 <_dtoa_r+0x51c>
 8007edc:	08009ac0 	.word	0x08009ac0
 8007ee0:	08009a98 	.word	0x08009a98
 8007ee4:	3ff00000 	.word	0x3ff00000
 8007ee8:	40240000 	.word	0x40240000
 8007eec:	401c0000 	.word	0x401c0000
 8007ef0:	40140000 	.word	0x40140000
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	4630      	mov	r0, r6
 8007efa:	4639      	mov	r1, r7
 8007efc:	f7f8 fba0 	bl	8000640 <__aeabi_dmul>
 8007f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f06:	9c03      	ldr	r4, [sp, #12]
 8007f08:	9314      	str	r3, [sp, #80]	; 0x50
 8007f0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f0e:	f7f8 fe47 	bl	8000ba0 <__aeabi_d2iz>
 8007f12:	9015      	str	r0, [sp, #84]	; 0x54
 8007f14:	f7f8 fb2a 	bl	800056c <__aeabi_i2d>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f20:	f7f8 f9d6 	bl	80002d0 <__aeabi_dsub>
 8007f24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f26:	4606      	mov	r6, r0
 8007f28:	3330      	adds	r3, #48	; 0x30
 8007f2a:	f804 3b01 	strb.w	r3, [r4], #1
 8007f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f30:	460f      	mov	r7, r1
 8007f32:	429c      	cmp	r4, r3
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	d124      	bne.n	8007f84 <_dtoa_r+0x63c>
 8007f3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f3e:	4baf      	ldr	r3, [pc, #700]	; (80081fc <_dtoa_r+0x8b4>)
 8007f40:	f7f8 f9c8 	bl	80002d4 <__adddf3>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fe08 	bl	8000b60 <__aeabi_dcmpgt>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d163      	bne.n	800801c <_dtoa_r+0x6d4>
 8007f54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f58:	2000      	movs	r0, #0
 8007f5a:	49a8      	ldr	r1, [pc, #672]	; (80081fc <_dtoa_r+0x8b4>)
 8007f5c:	f7f8 f9b8 	bl	80002d0 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fddc 	bl	8000b24 <__aeabi_dcmplt>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f43f af1e 	beq.w	8007dae <_dtoa_r+0x466>
 8007f72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007f74:	1e7b      	subs	r3, r7, #1
 8007f76:	9314      	str	r3, [sp, #80]	; 0x50
 8007f78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d0f8      	beq.n	8007f72 <_dtoa_r+0x62a>
 8007f80:	46c3      	mov	fp, r8
 8007f82:	e03b      	b.n	8007ffc <_dtoa_r+0x6b4>
 8007f84:	4b9e      	ldr	r3, [pc, #632]	; (8008200 <_dtoa_r+0x8b8>)
 8007f86:	f7f8 fb5b 	bl	8000640 <__aeabi_dmul>
 8007f8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f8e:	e7bc      	b.n	8007f0a <_dtoa_r+0x5c2>
 8007f90:	9f03      	ldr	r7, [sp, #12]
 8007f92:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fc79 	bl	8000894 <__aeabi_ddiv>
 8007fa2:	f7f8 fdfd 	bl	8000ba0 <__aeabi_d2iz>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f7f8 fae0 	bl	800056c <__aeabi_i2d>
 8007fac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fb0:	f7f8 fb46 	bl	8000640 <__aeabi_dmul>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4640      	mov	r0, r8
 8007fba:	4649      	mov	r1, r9
 8007fbc:	f7f8 f988 	bl	80002d0 <__aeabi_dsub>
 8007fc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007fc4:	f807 6b01 	strb.w	r6, [r7], #1
 8007fc8:	9e03      	ldr	r6, [sp, #12]
 8007fca:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007fce:	1bbe      	subs	r6, r7, r6
 8007fd0:	45b4      	cmp	ip, r6
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	d136      	bne.n	8008046 <_dtoa_r+0x6fe>
 8007fd8:	f7f8 f97c 	bl	80002d4 <__adddf3>
 8007fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	4689      	mov	r9, r1
 8007fe4:	f7f8 fdbc 	bl	8000b60 <__aeabi_dcmpgt>
 8007fe8:	bb58      	cbnz	r0, 8008042 <_dtoa_r+0x6fa>
 8007fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 fd8d 	bl	8000b10 <__aeabi_dcmpeq>
 8007ff6:	b108      	cbz	r0, 8007ffc <_dtoa_r+0x6b4>
 8007ff8:	07e3      	lsls	r3, r4, #31
 8007ffa:	d422      	bmi.n	8008042 <_dtoa_r+0x6fa>
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	4628      	mov	r0, r5
 8008000:	f000 fbc2 	bl	8008788 <_Bfree>
 8008004:	2300      	movs	r3, #0
 8008006:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008008:	703b      	strb	r3, [r7, #0]
 800800a:	f10b 0301 	add.w	r3, fp, #1
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008012:	2b00      	cmp	r3, #0
 8008014:	f43f ace6 	beq.w	80079e4 <_dtoa_r+0x9c>
 8008018:	601f      	str	r7, [r3, #0]
 800801a:	e4e3      	b.n	80079e4 <_dtoa_r+0x9c>
 800801c:	4627      	mov	r7, r4
 800801e:	463b      	mov	r3, r7
 8008020:	461f      	mov	r7, r3
 8008022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008026:	2a39      	cmp	r2, #57	; 0x39
 8008028:	d107      	bne.n	800803a <_dtoa_r+0x6f2>
 800802a:	9a03      	ldr	r2, [sp, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d1f7      	bne.n	8008020 <_dtoa_r+0x6d8>
 8008030:	2230      	movs	r2, #48	; 0x30
 8008032:	9903      	ldr	r1, [sp, #12]
 8008034:	f108 0801 	add.w	r8, r8, #1
 8008038:	700a      	strb	r2, [r1, #0]
 800803a:	781a      	ldrb	r2, [r3, #0]
 800803c:	3201      	adds	r2, #1
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	e79e      	b.n	8007f80 <_dtoa_r+0x638>
 8008042:	46d8      	mov	r8, fp
 8008044:	e7eb      	b.n	800801e <_dtoa_r+0x6d6>
 8008046:	2200      	movs	r2, #0
 8008048:	4b6d      	ldr	r3, [pc, #436]	; (8008200 <_dtoa_r+0x8b8>)
 800804a:	f7f8 faf9 	bl	8000640 <__aeabi_dmul>
 800804e:	2200      	movs	r2, #0
 8008050:	2300      	movs	r3, #0
 8008052:	4680      	mov	r8, r0
 8008054:	4689      	mov	r9, r1
 8008056:	f7f8 fd5b 	bl	8000b10 <__aeabi_dcmpeq>
 800805a:	2800      	cmp	r0, #0
 800805c:	d09b      	beq.n	8007f96 <_dtoa_r+0x64e>
 800805e:	e7cd      	b.n	8007ffc <_dtoa_r+0x6b4>
 8008060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008062:	2a00      	cmp	r2, #0
 8008064:	f000 80c4 	beq.w	80081f0 <_dtoa_r+0x8a8>
 8008068:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800806a:	2a01      	cmp	r2, #1
 800806c:	f300 80a8 	bgt.w	80081c0 <_dtoa_r+0x878>
 8008070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008072:	2a00      	cmp	r2, #0
 8008074:	f000 80a0 	beq.w	80081b8 <_dtoa_r+0x870>
 8008078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800807c:	464f      	mov	r7, r9
 800807e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008082:	2101      	movs	r1, #1
 8008084:	441a      	add	r2, r3
 8008086:	4628      	mov	r0, r5
 8008088:	4499      	add	r9, r3
 800808a:	9209      	str	r2, [sp, #36]	; 0x24
 800808c:	f000 fc32 	bl	80088f4 <__i2b>
 8008090:	4606      	mov	r6, r0
 8008092:	b15f      	cbz	r7, 80080ac <_dtoa_r+0x764>
 8008094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd08      	ble.n	80080ac <_dtoa_r+0x764>
 800809a:	42bb      	cmp	r3, r7
 800809c:	bfa8      	it	ge
 800809e:	463b      	movge	r3, r7
 80080a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a2:	eba9 0903 	sub.w	r9, r9, r3
 80080a6:	1aff      	subs	r7, r7, r3
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ae:	b1f3      	cbz	r3, 80080ee <_dtoa_r+0x7a6>
 80080b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80a0 	beq.w	80081f8 <_dtoa_r+0x8b0>
 80080b8:	2c00      	cmp	r4, #0
 80080ba:	dd10      	ble.n	80080de <_dtoa_r+0x796>
 80080bc:	4631      	mov	r1, r6
 80080be:	4622      	mov	r2, r4
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 fcd5 	bl	8008a70 <__pow5mult>
 80080c6:	4652      	mov	r2, sl
 80080c8:	4601      	mov	r1, r0
 80080ca:	4606      	mov	r6, r0
 80080cc:	4628      	mov	r0, r5
 80080ce:	f000 fc27 	bl	8008920 <__multiply>
 80080d2:	4680      	mov	r8, r0
 80080d4:	4651      	mov	r1, sl
 80080d6:	4628      	mov	r0, r5
 80080d8:	f000 fb56 	bl	8008788 <_Bfree>
 80080dc:	46c2      	mov	sl, r8
 80080de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e0:	1b1a      	subs	r2, r3, r4
 80080e2:	d004      	beq.n	80080ee <_dtoa_r+0x7a6>
 80080e4:	4651      	mov	r1, sl
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 fcc2 	bl	8008a70 <__pow5mult>
 80080ec:	4682      	mov	sl, r0
 80080ee:	2101      	movs	r1, #1
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fbff 	bl	80088f4 <__i2b>
 80080f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f8:	4604      	mov	r4, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f340 8082 	ble.w	8008204 <_dtoa_r+0x8bc>
 8008100:	461a      	mov	r2, r3
 8008102:	4601      	mov	r1, r0
 8008104:	4628      	mov	r0, r5
 8008106:	f000 fcb3 	bl	8008a70 <__pow5mult>
 800810a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800810c:	4604      	mov	r4, r0
 800810e:	2b01      	cmp	r3, #1
 8008110:	dd7b      	ble.n	800820a <_dtoa_r+0x8c2>
 8008112:	f04f 0800 	mov.w	r8, #0
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800811c:	6918      	ldr	r0, [r3, #16]
 800811e:	f000 fb9b 	bl	8008858 <__hi0bits>
 8008122:	f1c0 0020 	rsb	r0, r0, #32
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	4418      	add	r0, r3
 800812a:	f010 001f 	ands.w	r0, r0, #31
 800812e:	f000 8092 	beq.w	8008256 <_dtoa_r+0x90e>
 8008132:	f1c0 0320 	rsb	r3, r0, #32
 8008136:	2b04      	cmp	r3, #4
 8008138:	f340 8085 	ble.w	8008246 <_dtoa_r+0x8fe>
 800813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813e:	f1c0 001c 	rsb	r0, r0, #28
 8008142:	4403      	add	r3, r0
 8008144:	4481      	add	r9, r0
 8008146:	4407      	add	r7, r0
 8008148:	9309      	str	r3, [sp, #36]	; 0x24
 800814a:	f1b9 0f00 	cmp.w	r9, #0
 800814e:	dd05      	ble.n	800815c <_dtoa_r+0x814>
 8008150:	4651      	mov	r1, sl
 8008152:	464a      	mov	r2, r9
 8008154:	4628      	mov	r0, r5
 8008156:	f000 fce5 	bl	8008b24 <__lshift>
 800815a:	4682      	mov	sl, r0
 800815c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	dd05      	ble.n	800816e <_dtoa_r+0x826>
 8008162:	4621      	mov	r1, r4
 8008164:	461a      	mov	r2, r3
 8008166:	4628      	mov	r0, r5
 8008168:	f000 fcdc 	bl	8008b24 <__lshift>
 800816c:	4604      	mov	r4, r0
 800816e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d072      	beq.n	800825a <_dtoa_r+0x912>
 8008174:	4621      	mov	r1, r4
 8008176:	4650      	mov	r0, sl
 8008178:	f000 fd40 	bl	8008bfc <__mcmp>
 800817c:	2800      	cmp	r0, #0
 800817e:	da6c      	bge.n	800825a <_dtoa_r+0x912>
 8008180:	2300      	movs	r3, #0
 8008182:	4651      	mov	r1, sl
 8008184:	220a      	movs	r2, #10
 8008186:	4628      	mov	r0, r5
 8008188:	f000 fb20 	bl	80087cc <__multadd>
 800818c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818e:	4682      	mov	sl, r0
 8008190:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 81ac 	beq.w	80084f2 <_dtoa_r+0xbaa>
 800819a:	2300      	movs	r3, #0
 800819c:	4631      	mov	r1, r6
 800819e:	220a      	movs	r2, #10
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 fb13 	bl	80087cc <__multadd>
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	4606      	mov	r6, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f300 8093 	bgt.w	80082d6 <_dtoa_r+0x98e>
 80081b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	dc59      	bgt.n	800826a <_dtoa_r+0x922>
 80081b6:	e08e      	b.n	80082d6 <_dtoa_r+0x98e>
 80081b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081be:	e75d      	b.n	800807c <_dtoa_r+0x734>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	1e5c      	subs	r4, r3, #1
 80081c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	bfbf      	itttt	lt
 80081ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80081ce:	1ae3      	sublt	r3, r4, r3
 80081d0:	18d2      	addlt	r2, r2, r3
 80081d2:	bfa8      	it	ge
 80081d4:	1b1c      	subge	r4, r3, r4
 80081d6:	9b08      	ldr	r3, [sp, #32]
 80081d8:	bfbe      	ittt	lt
 80081da:	940a      	strlt	r4, [sp, #40]	; 0x28
 80081dc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80081de:	2400      	movlt	r4, #0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfb5      	itete	lt
 80081e4:	eba9 0703 	sublt.w	r7, r9, r3
 80081e8:	464f      	movge	r7, r9
 80081ea:	2300      	movlt	r3, #0
 80081ec:	9b08      	ldrge	r3, [sp, #32]
 80081ee:	e747      	b.n	8008080 <_dtoa_r+0x738>
 80081f0:	464f      	mov	r7, r9
 80081f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80081f6:	e74c      	b.n	8008092 <_dtoa_r+0x74a>
 80081f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fa:	e773      	b.n	80080e4 <_dtoa_r+0x79c>
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	40240000 	.word	0x40240000
 8008204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008206:	2b01      	cmp	r3, #1
 8008208:	dc18      	bgt.n	800823c <_dtoa_r+0x8f4>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	b9b3      	cbnz	r3, 800823c <_dtoa_r+0x8f4>
 800820e:	9b05      	ldr	r3, [sp, #20]
 8008210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008214:	b993      	cbnz	r3, 800823c <_dtoa_r+0x8f4>
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800821c:	0d1b      	lsrs	r3, r3, #20
 800821e:	051b      	lsls	r3, r3, #20
 8008220:	b17b      	cbz	r3, 8008242 <_dtoa_r+0x8fa>
 8008222:	f04f 0801 	mov.w	r8, #1
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	f109 0901 	add.w	r9, r9, #1
 800822c:	3301      	adds	r3, #1
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	f47f af6f 	bne.w	8008116 <_dtoa_r+0x7ce>
 8008238:	2001      	movs	r0, #1
 800823a:	e774      	b.n	8008126 <_dtoa_r+0x7de>
 800823c:	f04f 0800 	mov.w	r8, #0
 8008240:	e7f6      	b.n	8008230 <_dtoa_r+0x8e8>
 8008242:	4698      	mov	r8, r3
 8008244:	e7f4      	b.n	8008230 <_dtoa_r+0x8e8>
 8008246:	d080      	beq.n	800814a <_dtoa_r+0x802>
 8008248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800824a:	331c      	adds	r3, #28
 800824c:	441a      	add	r2, r3
 800824e:	4499      	add	r9, r3
 8008250:	441f      	add	r7, r3
 8008252:	9209      	str	r2, [sp, #36]	; 0x24
 8008254:	e779      	b.n	800814a <_dtoa_r+0x802>
 8008256:	4603      	mov	r3, r0
 8008258:	e7f6      	b.n	8008248 <_dtoa_r+0x900>
 800825a:	9b08      	ldr	r3, [sp, #32]
 800825c:	2b00      	cmp	r3, #0
 800825e:	dc34      	bgt.n	80082ca <_dtoa_r+0x982>
 8008260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008262:	2b02      	cmp	r3, #2
 8008264:	dd31      	ble.n	80082ca <_dtoa_r+0x982>
 8008266:	9b08      	ldr	r3, [sp, #32]
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	9b06      	ldr	r3, [sp, #24]
 800826c:	b963      	cbnz	r3, 8008288 <_dtoa_r+0x940>
 800826e:	4621      	mov	r1, r4
 8008270:	2205      	movs	r2, #5
 8008272:	4628      	mov	r0, r5
 8008274:	f000 faaa 	bl	80087cc <__multadd>
 8008278:	4601      	mov	r1, r0
 800827a:	4604      	mov	r4, r0
 800827c:	4650      	mov	r0, sl
 800827e:	f000 fcbd 	bl	8008bfc <__mcmp>
 8008282:	2800      	cmp	r0, #0
 8008284:	f73f adbf 	bgt.w	8007e06 <_dtoa_r+0x4be>
 8008288:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800828a:	9f03      	ldr	r7, [sp, #12]
 800828c:	ea6f 0b03 	mvn.w	fp, r3
 8008290:	f04f 0800 	mov.w	r8, #0
 8008294:	4621      	mov	r1, r4
 8008296:	4628      	mov	r0, r5
 8008298:	f000 fa76 	bl	8008788 <_Bfree>
 800829c:	2e00      	cmp	r6, #0
 800829e:	f43f aead 	beq.w	8007ffc <_dtoa_r+0x6b4>
 80082a2:	f1b8 0f00 	cmp.w	r8, #0
 80082a6:	d005      	beq.n	80082b4 <_dtoa_r+0x96c>
 80082a8:	45b0      	cmp	r8, r6
 80082aa:	d003      	beq.n	80082b4 <_dtoa_r+0x96c>
 80082ac:	4641      	mov	r1, r8
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fa6a 	bl	8008788 <_Bfree>
 80082b4:	4631      	mov	r1, r6
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 fa66 	bl	8008788 <_Bfree>
 80082bc:	e69e      	b.n	8007ffc <_dtoa_r+0x6b4>
 80082be:	2400      	movs	r4, #0
 80082c0:	4626      	mov	r6, r4
 80082c2:	e7e1      	b.n	8008288 <_dtoa_r+0x940>
 80082c4:	46c3      	mov	fp, r8
 80082c6:	4626      	mov	r6, r4
 80082c8:	e59d      	b.n	8007e06 <_dtoa_r+0x4be>
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80c8 	beq.w	8008462 <_dtoa_r+0xb1a>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	9306      	str	r3, [sp, #24]
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	dd05      	ble.n	80082e6 <_dtoa_r+0x99e>
 80082da:	4631      	mov	r1, r6
 80082dc:	463a      	mov	r2, r7
 80082de:	4628      	mov	r0, r5
 80082e0:	f000 fc20 	bl	8008b24 <__lshift>
 80082e4:	4606      	mov	r6, r0
 80082e6:	f1b8 0f00 	cmp.w	r8, #0
 80082ea:	d05b      	beq.n	80083a4 <_dtoa_r+0xa5c>
 80082ec:	4628      	mov	r0, r5
 80082ee:	6871      	ldr	r1, [r6, #4]
 80082f0:	f000 fa0a 	bl	8008708 <_Balloc>
 80082f4:	4607      	mov	r7, r0
 80082f6:	b928      	cbnz	r0, 8008304 <_dtoa_r+0x9bc>
 80082f8:	4602      	mov	r2, r0
 80082fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80082fe:	4b81      	ldr	r3, [pc, #516]	; (8008504 <_dtoa_r+0xbbc>)
 8008300:	f7ff bb36 	b.w	8007970 <_dtoa_r+0x28>
 8008304:	6932      	ldr	r2, [r6, #16]
 8008306:	f106 010c 	add.w	r1, r6, #12
 800830a:	3202      	adds	r2, #2
 800830c:	0092      	lsls	r2, r2, #2
 800830e:	300c      	adds	r0, #12
 8008310:	f000 ff9e 	bl	8009250 <memcpy>
 8008314:	2201      	movs	r2, #1
 8008316:	4639      	mov	r1, r7
 8008318:	4628      	mov	r0, r5
 800831a:	f000 fc03 	bl	8008b24 <__lshift>
 800831e:	46b0      	mov	r8, r6
 8008320:	4606      	mov	r6, r0
 8008322:	9b03      	ldr	r3, [sp, #12]
 8008324:	9a03      	ldr	r2, [sp, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	9b06      	ldr	r3, [sp, #24]
 800832c:	4413      	add	r3, r2
 800832e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	930a      	str	r3, [sp, #40]	; 0x28
 8008338:	9b08      	ldr	r3, [sp, #32]
 800833a:	4621      	mov	r1, r4
 800833c:	3b01      	subs	r3, #1
 800833e:	4650      	mov	r0, sl
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	f7ff fa76 	bl	8007832 <quorem>
 8008346:	4641      	mov	r1, r8
 8008348:	9006      	str	r0, [sp, #24]
 800834a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800834e:	4650      	mov	r0, sl
 8008350:	f000 fc54 	bl	8008bfc <__mcmp>
 8008354:	4632      	mov	r2, r6
 8008356:	9009      	str	r0, [sp, #36]	; 0x24
 8008358:	4621      	mov	r1, r4
 800835a:	4628      	mov	r0, r5
 800835c:	f000 fc6a 	bl	8008c34 <__mdiff>
 8008360:	68c2      	ldr	r2, [r0, #12]
 8008362:	4607      	mov	r7, r0
 8008364:	bb02      	cbnz	r2, 80083a8 <_dtoa_r+0xa60>
 8008366:	4601      	mov	r1, r0
 8008368:	4650      	mov	r0, sl
 800836a:	f000 fc47 	bl	8008bfc <__mcmp>
 800836e:	4602      	mov	r2, r0
 8008370:	4639      	mov	r1, r7
 8008372:	4628      	mov	r0, r5
 8008374:	920c      	str	r2, [sp, #48]	; 0x30
 8008376:	f000 fa07 	bl	8008788 <_Bfree>
 800837a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800837c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800837e:	9f08      	ldr	r7, [sp, #32]
 8008380:	ea43 0102 	orr.w	r1, r3, r2
 8008384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008386:	4319      	orrs	r1, r3
 8008388:	d110      	bne.n	80083ac <_dtoa_r+0xa64>
 800838a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800838e:	d029      	beq.n	80083e4 <_dtoa_r+0xa9c>
 8008390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd02      	ble.n	800839c <_dtoa_r+0xa54>
 8008396:	9b06      	ldr	r3, [sp, #24]
 8008398:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	f883 9000 	strb.w	r9, [r3]
 80083a2:	e777      	b.n	8008294 <_dtoa_r+0x94c>
 80083a4:	4630      	mov	r0, r6
 80083a6:	e7ba      	b.n	800831e <_dtoa_r+0x9d6>
 80083a8:	2201      	movs	r2, #1
 80083aa:	e7e1      	b.n	8008370 <_dtoa_r+0xa28>
 80083ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	db04      	blt.n	80083bc <_dtoa_r+0xa74>
 80083b2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80083b4:	430b      	orrs	r3, r1
 80083b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083b8:	430b      	orrs	r3, r1
 80083ba:	d120      	bne.n	80083fe <_dtoa_r+0xab6>
 80083bc:	2a00      	cmp	r2, #0
 80083be:	dded      	ble.n	800839c <_dtoa_r+0xa54>
 80083c0:	4651      	mov	r1, sl
 80083c2:	2201      	movs	r2, #1
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 fbad 	bl	8008b24 <__lshift>
 80083ca:	4621      	mov	r1, r4
 80083cc:	4682      	mov	sl, r0
 80083ce:	f000 fc15 	bl	8008bfc <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	dc03      	bgt.n	80083de <_dtoa_r+0xa96>
 80083d6:	d1e1      	bne.n	800839c <_dtoa_r+0xa54>
 80083d8:	f019 0f01 	tst.w	r9, #1
 80083dc:	d0de      	beq.n	800839c <_dtoa_r+0xa54>
 80083de:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083e2:	d1d8      	bne.n	8008396 <_dtoa_r+0xa4e>
 80083e4:	2339      	movs	r3, #57	; 0x39
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	7013      	strb	r3, [r2, #0]
 80083ea:	463b      	mov	r3, r7
 80083ec:	461f      	mov	r7, r3
 80083ee:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	2a39      	cmp	r2, #57	; 0x39
 80083f6:	d06b      	beq.n	80084d0 <_dtoa_r+0xb88>
 80083f8:	3201      	adds	r2, #1
 80083fa:	701a      	strb	r2, [r3, #0]
 80083fc:	e74a      	b.n	8008294 <_dtoa_r+0x94c>
 80083fe:	2a00      	cmp	r2, #0
 8008400:	dd07      	ble.n	8008412 <_dtoa_r+0xaca>
 8008402:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008406:	d0ed      	beq.n	80083e4 <_dtoa_r+0xa9c>
 8008408:	9a04      	ldr	r2, [sp, #16]
 800840a:	f109 0301 	add.w	r3, r9, #1
 800840e:	7013      	strb	r3, [r2, #0]
 8008410:	e740      	b.n	8008294 <_dtoa_r+0x94c>
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008416:	f803 9c01 	strb.w	r9, [r3, #-1]
 800841a:	4293      	cmp	r3, r2
 800841c:	d042      	beq.n	80084a4 <_dtoa_r+0xb5c>
 800841e:	4651      	mov	r1, sl
 8008420:	2300      	movs	r3, #0
 8008422:	220a      	movs	r2, #10
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f9d1 	bl	80087cc <__multadd>
 800842a:	45b0      	cmp	r8, r6
 800842c:	4682      	mov	sl, r0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	f04f 020a 	mov.w	r2, #10
 8008436:	4641      	mov	r1, r8
 8008438:	4628      	mov	r0, r5
 800843a:	d107      	bne.n	800844c <_dtoa_r+0xb04>
 800843c:	f000 f9c6 	bl	80087cc <__multadd>
 8008440:	4680      	mov	r8, r0
 8008442:	4606      	mov	r6, r0
 8008444:	9b08      	ldr	r3, [sp, #32]
 8008446:	3301      	adds	r3, #1
 8008448:	9308      	str	r3, [sp, #32]
 800844a:	e775      	b.n	8008338 <_dtoa_r+0x9f0>
 800844c:	f000 f9be 	bl	80087cc <__multadd>
 8008450:	4631      	mov	r1, r6
 8008452:	4680      	mov	r8, r0
 8008454:	2300      	movs	r3, #0
 8008456:	220a      	movs	r2, #10
 8008458:	4628      	mov	r0, r5
 800845a:	f000 f9b7 	bl	80087cc <__multadd>
 800845e:	4606      	mov	r6, r0
 8008460:	e7f0      	b.n	8008444 <_dtoa_r+0xafc>
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	9306      	str	r3, [sp, #24]
 8008466:	9f03      	ldr	r7, [sp, #12]
 8008468:	4621      	mov	r1, r4
 800846a:	4650      	mov	r0, sl
 800846c:	f7ff f9e1 	bl	8007832 <quorem>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008476:	f807 9b01 	strb.w	r9, [r7], #1
 800847a:	1afa      	subs	r2, r7, r3
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	4293      	cmp	r3, r2
 8008480:	dd07      	ble.n	8008492 <_dtoa_r+0xb4a>
 8008482:	4651      	mov	r1, sl
 8008484:	2300      	movs	r3, #0
 8008486:	220a      	movs	r2, #10
 8008488:	4628      	mov	r0, r5
 800848a:	f000 f99f 	bl	80087cc <__multadd>
 800848e:	4682      	mov	sl, r0
 8008490:	e7ea      	b.n	8008468 <_dtoa_r+0xb20>
 8008492:	9b06      	ldr	r3, [sp, #24]
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	bfcc      	ite	gt
 800849c:	461f      	movgt	r7, r3
 800849e:	2701      	movle	r7, #1
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	441f      	add	r7, r3
 80084a4:	4651      	mov	r1, sl
 80084a6:	2201      	movs	r2, #1
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 fb3b 	bl	8008b24 <__lshift>
 80084ae:	4621      	mov	r1, r4
 80084b0:	4682      	mov	sl, r0
 80084b2:	f000 fba3 	bl	8008bfc <__mcmp>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	dc97      	bgt.n	80083ea <_dtoa_r+0xaa2>
 80084ba:	d102      	bne.n	80084c2 <_dtoa_r+0xb7a>
 80084bc:	f019 0f01 	tst.w	r9, #1
 80084c0:	d193      	bne.n	80083ea <_dtoa_r+0xaa2>
 80084c2:	463b      	mov	r3, r7
 80084c4:	461f      	mov	r7, r3
 80084c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084ca:	2a30      	cmp	r2, #48	; 0x30
 80084cc:	d0fa      	beq.n	80084c4 <_dtoa_r+0xb7c>
 80084ce:	e6e1      	b.n	8008294 <_dtoa_r+0x94c>
 80084d0:	9a03      	ldr	r2, [sp, #12]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d18a      	bne.n	80083ec <_dtoa_r+0xaa4>
 80084d6:	2331      	movs	r3, #49	; 0x31
 80084d8:	f10b 0b01 	add.w	fp, fp, #1
 80084dc:	e797      	b.n	800840e <_dtoa_r+0xac6>
 80084de:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <_dtoa_r+0xbc0>)
 80084e0:	f7ff ba9f 	b.w	8007a22 <_dtoa_r+0xda>
 80084e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f aa77 	bne.w	80079da <_dtoa_r+0x92>
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <_dtoa_r+0xbc4>)
 80084ee:	f7ff ba98 	b.w	8007a22 <_dtoa_r+0xda>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dcb6      	bgt.n	8008466 <_dtoa_r+0xb1e>
 80084f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	f73f aeb5 	bgt.w	800826a <_dtoa_r+0x922>
 8008500:	e7b1      	b.n	8008466 <_dtoa_r+0xb1e>
 8008502:	bf00      	nop
 8008504:	08009a2a 	.word	0x08009a2a
 8008508:	0800998a 	.word	0x0800998a
 800850c:	080099ae 	.word	0x080099ae

08008510 <_free_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4605      	mov	r5, r0
 8008514:	2900      	cmp	r1, #0
 8008516:	d040      	beq.n	800859a <_free_r+0x8a>
 8008518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851c:	1f0c      	subs	r4, r1, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	bfb8      	it	lt
 8008522:	18e4      	addlt	r4, r4, r3
 8008524:	f000 f8e4 	bl	80086f0 <__malloc_lock>
 8008528:	4a1c      	ldr	r2, [pc, #112]	; (800859c <_free_r+0x8c>)
 800852a:	6813      	ldr	r3, [r2, #0]
 800852c:	b933      	cbnz	r3, 800853c <_free_r+0x2c>
 800852e:	6063      	str	r3, [r4, #4]
 8008530:	6014      	str	r4, [r2, #0]
 8008532:	4628      	mov	r0, r5
 8008534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008538:	f000 b8e0 	b.w	80086fc <__malloc_unlock>
 800853c:	42a3      	cmp	r3, r4
 800853e:	d908      	bls.n	8008552 <_free_r+0x42>
 8008540:	6820      	ldr	r0, [r4, #0]
 8008542:	1821      	adds	r1, r4, r0
 8008544:	428b      	cmp	r3, r1
 8008546:	bf01      	itttt	eq
 8008548:	6819      	ldreq	r1, [r3, #0]
 800854a:	685b      	ldreq	r3, [r3, #4]
 800854c:	1809      	addeq	r1, r1, r0
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	e7ed      	b.n	800852e <_free_r+0x1e>
 8008552:	461a      	mov	r2, r3
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	b10b      	cbz	r3, 800855c <_free_r+0x4c>
 8008558:	42a3      	cmp	r3, r4
 800855a:	d9fa      	bls.n	8008552 <_free_r+0x42>
 800855c:	6811      	ldr	r1, [r2, #0]
 800855e:	1850      	adds	r0, r2, r1
 8008560:	42a0      	cmp	r0, r4
 8008562:	d10b      	bne.n	800857c <_free_r+0x6c>
 8008564:	6820      	ldr	r0, [r4, #0]
 8008566:	4401      	add	r1, r0
 8008568:	1850      	adds	r0, r2, r1
 800856a:	4283      	cmp	r3, r0
 800856c:	6011      	str	r1, [r2, #0]
 800856e:	d1e0      	bne.n	8008532 <_free_r+0x22>
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4408      	add	r0, r1
 8008576:	6010      	str	r0, [r2, #0]
 8008578:	6053      	str	r3, [r2, #4]
 800857a:	e7da      	b.n	8008532 <_free_r+0x22>
 800857c:	d902      	bls.n	8008584 <_free_r+0x74>
 800857e:	230c      	movs	r3, #12
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	e7d6      	b.n	8008532 <_free_r+0x22>
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	1821      	adds	r1, r4, r0
 8008588:	428b      	cmp	r3, r1
 800858a:	bf01      	itttt	eq
 800858c:	6819      	ldreq	r1, [r3, #0]
 800858e:	685b      	ldreq	r3, [r3, #4]
 8008590:	1809      	addeq	r1, r1, r0
 8008592:	6021      	streq	r1, [r4, #0]
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	6054      	str	r4, [r2, #4]
 8008598:	e7cb      	b.n	8008532 <_free_r+0x22>
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	20000c2c 	.word	0x20000c2c

080085a0 <malloc>:
 80085a0:	4b02      	ldr	r3, [pc, #8]	; (80085ac <malloc+0xc>)
 80085a2:	4601      	mov	r1, r0
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	f000 b823 	b.w	80085f0 <_malloc_r>
 80085aa:	bf00      	nop
 80085ac:	20000064 	.word	0x20000064

080085b0 <sbrk_aligned>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4e0e      	ldr	r6, [pc, #56]	; (80085ec <sbrk_aligned+0x3c>)
 80085b4:	460c      	mov	r4, r1
 80085b6:	6831      	ldr	r1, [r6, #0]
 80085b8:	4605      	mov	r5, r0
 80085ba:	b911      	cbnz	r1, 80085c2 <sbrk_aligned+0x12>
 80085bc:	f000 fe38 	bl	8009230 <_sbrk_r>
 80085c0:	6030      	str	r0, [r6, #0]
 80085c2:	4621      	mov	r1, r4
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 fe33 	bl	8009230 <_sbrk_r>
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	d00a      	beq.n	80085e4 <sbrk_aligned+0x34>
 80085ce:	1cc4      	adds	r4, r0, #3
 80085d0:	f024 0403 	bic.w	r4, r4, #3
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d007      	beq.n	80085e8 <sbrk_aligned+0x38>
 80085d8:	1a21      	subs	r1, r4, r0
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 fe28 	bl	8009230 <_sbrk_r>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d101      	bne.n	80085e8 <sbrk_aligned+0x38>
 80085e4:	f04f 34ff 	mov.w	r4, #4294967295
 80085e8:	4620      	mov	r0, r4
 80085ea:	bd70      	pop	{r4, r5, r6, pc}
 80085ec:	20000c30 	.word	0x20000c30

080085f0 <_malloc_r>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	1ccd      	adds	r5, r1, #3
 80085f6:	f025 0503 	bic.w	r5, r5, #3
 80085fa:	3508      	adds	r5, #8
 80085fc:	2d0c      	cmp	r5, #12
 80085fe:	bf38      	it	cc
 8008600:	250c      	movcc	r5, #12
 8008602:	2d00      	cmp	r5, #0
 8008604:	4607      	mov	r7, r0
 8008606:	db01      	blt.n	800860c <_malloc_r+0x1c>
 8008608:	42a9      	cmp	r1, r5
 800860a:	d905      	bls.n	8008618 <_malloc_r+0x28>
 800860c:	230c      	movs	r3, #12
 800860e:	2600      	movs	r6, #0
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	4630      	mov	r0, r6
 8008614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086ec <_malloc_r+0xfc>
 800861c:	f000 f868 	bl	80086f0 <__malloc_lock>
 8008620:	f8d8 3000 	ldr.w	r3, [r8]
 8008624:	461c      	mov	r4, r3
 8008626:	bb5c      	cbnz	r4, 8008680 <_malloc_r+0x90>
 8008628:	4629      	mov	r1, r5
 800862a:	4638      	mov	r0, r7
 800862c:	f7ff ffc0 	bl	80085b0 <sbrk_aligned>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	4604      	mov	r4, r0
 8008634:	d155      	bne.n	80086e2 <_malloc_r+0xf2>
 8008636:	f8d8 4000 	ldr.w	r4, [r8]
 800863a:	4626      	mov	r6, r4
 800863c:	2e00      	cmp	r6, #0
 800863e:	d145      	bne.n	80086cc <_malloc_r+0xdc>
 8008640:	2c00      	cmp	r4, #0
 8008642:	d048      	beq.n	80086d6 <_malloc_r+0xe6>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	4631      	mov	r1, r6
 8008648:	4638      	mov	r0, r7
 800864a:	eb04 0903 	add.w	r9, r4, r3
 800864e:	f000 fdef 	bl	8009230 <_sbrk_r>
 8008652:	4581      	cmp	r9, r0
 8008654:	d13f      	bne.n	80086d6 <_malloc_r+0xe6>
 8008656:	6821      	ldr	r1, [r4, #0]
 8008658:	4638      	mov	r0, r7
 800865a:	1a6d      	subs	r5, r5, r1
 800865c:	4629      	mov	r1, r5
 800865e:	f7ff ffa7 	bl	80085b0 <sbrk_aligned>
 8008662:	3001      	adds	r0, #1
 8008664:	d037      	beq.n	80086d6 <_malloc_r+0xe6>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	442b      	add	r3, r5
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	f8d8 3000 	ldr.w	r3, [r8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d038      	beq.n	80086e6 <_malloc_r+0xf6>
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	42a2      	cmp	r2, r4
 8008678:	d12b      	bne.n	80086d2 <_malloc_r+0xe2>
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
 800867e:	e00f      	b.n	80086a0 <_malloc_r+0xb0>
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	1b52      	subs	r2, r2, r5
 8008684:	d41f      	bmi.n	80086c6 <_malloc_r+0xd6>
 8008686:	2a0b      	cmp	r2, #11
 8008688:	d917      	bls.n	80086ba <_malloc_r+0xca>
 800868a:	1961      	adds	r1, r4, r5
 800868c:	42a3      	cmp	r3, r4
 800868e:	6025      	str	r5, [r4, #0]
 8008690:	bf18      	it	ne
 8008692:	6059      	strne	r1, [r3, #4]
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	bf08      	it	eq
 8008698:	f8c8 1000 	streq.w	r1, [r8]
 800869c:	5162      	str	r2, [r4, r5]
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	4638      	mov	r0, r7
 80086a2:	f104 060b 	add.w	r6, r4, #11
 80086a6:	f000 f829 	bl	80086fc <__malloc_unlock>
 80086aa:	f026 0607 	bic.w	r6, r6, #7
 80086ae:	1d23      	adds	r3, r4, #4
 80086b0:	1af2      	subs	r2, r6, r3
 80086b2:	d0ae      	beq.n	8008612 <_malloc_r+0x22>
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	50a3      	str	r3, [r4, r2]
 80086b8:	e7ab      	b.n	8008612 <_malloc_r+0x22>
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	6862      	ldr	r2, [r4, #4]
 80086be:	d1dd      	bne.n	800867c <_malloc_r+0x8c>
 80086c0:	f8c8 2000 	str.w	r2, [r8]
 80086c4:	e7ec      	b.n	80086a0 <_malloc_r+0xb0>
 80086c6:	4623      	mov	r3, r4
 80086c8:	6864      	ldr	r4, [r4, #4]
 80086ca:	e7ac      	b.n	8008626 <_malloc_r+0x36>
 80086cc:	4634      	mov	r4, r6
 80086ce:	6876      	ldr	r6, [r6, #4]
 80086d0:	e7b4      	b.n	800863c <_malloc_r+0x4c>
 80086d2:	4613      	mov	r3, r2
 80086d4:	e7cc      	b.n	8008670 <_malloc_r+0x80>
 80086d6:	230c      	movs	r3, #12
 80086d8:	4638      	mov	r0, r7
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	f000 f80e 	bl	80086fc <__malloc_unlock>
 80086e0:	e797      	b.n	8008612 <_malloc_r+0x22>
 80086e2:	6025      	str	r5, [r4, #0]
 80086e4:	e7dc      	b.n	80086a0 <_malloc_r+0xb0>
 80086e6:	605b      	str	r3, [r3, #4]
 80086e8:	deff      	udf	#255	; 0xff
 80086ea:	bf00      	nop
 80086ec:	20000c2c 	.word	0x20000c2c

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f7ff b88e 	b.w	8007812 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000c28 	.word	0x20000c28

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f7ff b889 	b.w	8007814 <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	20000c28 	.word	0x20000c28

08008708 <_Balloc>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	69c6      	ldr	r6, [r0, #28]
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	b976      	cbnz	r6, 8008730 <_Balloc+0x28>
 8008712:	2010      	movs	r0, #16
 8008714:	f7ff ff44 	bl	80085a0 <malloc>
 8008718:	4602      	mov	r2, r0
 800871a:	61e0      	str	r0, [r4, #28]
 800871c:	b920      	cbnz	r0, 8008728 <_Balloc+0x20>
 800871e:	216b      	movs	r1, #107	; 0x6b
 8008720:	4b17      	ldr	r3, [pc, #92]	; (8008780 <_Balloc+0x78>)
 8008722:	4818      	ldr	r0, [pc, #96]	; (8008784 <_Balloc+0x7c>)
 8008724:	f000 fda2 	bl	800926c <__assert_func>
 8008728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800872c:	6006      	str	r6, [r0, #0]
 800872e:	60c6      	str	r6, [r0, #12]
 8008730:	69e6      	ldr	r6, [r4, #28]
 8008732:	68f3      	ldr	r3, [r6, #12]
 8008734:	b183      	cbz	r3, 8008758 <_Balloc+0x50>
 8008736:	69e3      	ldr	r3, [r4, #28]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800873e:	b9b8      	cbnz	r0, 8008770 <_Balloc+0x68>
 8008740:	2101      	movs	r1, #1
 8008742:	fa01 f605 	lsl.w	r6, r1, r5
 8008746:	1d72      	adds	r2, r6, #5
 8008748:	4620      	mov	r0, r4
 800874a:	0092      	lsls	r2, r2, #2
 800874c:	f000 fdac 	bl	80092a8 <_calloc_r>
 8008750:	b160      	cbz	r0, 800876c <_Balloc+0x64>
 8008752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008756:	e00e      	b.n	8008776 <_Balloc+0x6e>
 8008758:	2221      	movs	r2, #33	; 0x21
 800875a:	2104      	movs	r1, #4
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fda3 	bl	80092a8 <_calloc_r>
 8008762:	69e3      	ldr	r3, [r4, #28]
 8008764:	60f0      	str	r0, [r6, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e4      	bne.n	8008736 <_Balloc+0x2e>
 800876c:	2000      	movs	r0, #0
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	6802      	ldr	r2, [r0, #0]
 8008772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008776:	2300      	movs	r3, #0
 8008778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800877c:	e7f7      	b.n	800876e <_Balloc+0x66>
 800877e:	bf00      	nop
 8008780:	080099bb 	.word	0x080099bb
 8008784:	08009a3b 	.word	0x08009a3b

08008788 <_Bfree>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	69c6      	ldr	r6, [r0, #28]
 800878c:	4605      	mov	r5, r0
 800878e:	460c      	mov	r4, r1
 8008790:	b976      	cbnz	r6, 80087b0 <_Bfree+0x28>
 8008792:	2010      	movs	r0, #16
 8008794:	f7ff ff04 	bl	80085a0 <malloc>
 8008798:	4602      	mov	r2, r0
 800879a:	61e8      	str	r0, [r5, #28]
 800879c:	b920      	cbnz	r0, 80087a8 <_Bfree+0x20>
 800879e:	218f      	movs	r1, #143	; 0x8f
 80087a0:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <_Bfree+0x3c>)
 80087a2:	4809      	ldr	r0, [pc, #36]	; (80087c8 <_Bfree+0x40>)
 80087a4:	f000 fd62 	bl	800926c <__assert_func>
 80087a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087ac:	6006      	str	r6, [r0, #0]
 80087ae:	60c6      	str	r6, [r0, #12]
 80087b0:	b13c      	cbz	r4, 80087c2 <_Bfree+0x3a>
 80087b2:	69eb      	ldr	r3, [r5, #28]
 80087b4:	6862      	ldr	r2, [r4, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087bc:	6021      	str	r1, [r4, #0]
 80087be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	080099bb 	.word	0x080099bb
 80087c8:	08009a3b 	.word	0x08009a3b

080087cc <__multadd>:
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d0:	4607      	mov	r7, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	461e      	mov	r6, r3
 80087d6:	2000      	movs	r0, #0
 80087d8:	690d      	ldr	r5, [r1, #16]
 80087da:	f101 0c14 	add.w	ip, r1, #20
 80087de:	f8dc 3000 	ldr.w	r3, [ip]
 80087e2:	3001      	adds	r0, #1
 80087e4:	b299      	uxth	r1, r3
 80087e6:	fb02 6101 	mla	r1, r2, r1, r6
 80087ea:	0c1e      	lsrs	r6, r3, #16
 80087ec:	0c0b      	lsrs	r3, r1, #16
 80087ee:	fb02 3306 	mla	r3, r2, r6, r3
 80087f2:	b289      	uxth	r1, r1
 80087f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087f8:	4285      	cmp	r5, r0
 80087fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008802:	dcec      	bgt.n	80087de <__multadd+0x12>
 8008804:	b30e      	cbz	r6, 800884a <__multadd+0x7e>
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc19      	bgt.n	8008840 <__multadd+0x74>
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	4638      	mov	r0, r7
 8008810:	3101      	adds	r1, #1
 8008812:	f7ff ff79 	bl	8008708 <_Balloc>
 8008816:	4680      	mov	r8, r0
 8008818:	b928      	cbnz	r0, 8008826 <__multadd+0x5a>
 800881a:	4602      	mov	r2, r0
 800881c:	21ba      	movs	r1, #186	; 0xba
 800881e:	4b0c      	ldr	r3, [pc, #48]	; (8008850 <__multadd+0x84>)
 8008820:	480c      	ldr	r0, [pc, #48]	; (8008854 <__multadd+0x88>)
 8008822:	f000 fd23 	bl	800926c <__assert_func>
 8008826:	6922      	ldr	r2, [r4, #16]
 8008828:	f104 010c 	add.w	r1, r4, #12
 800882c:	3202      	adds	r2, #2
 800882e:	0092      	lsls	r2, r2, #2
 8008830:	300c      	adds	r0, #12
 8008832:	f000 fd0d 	bl	8009250 <memcpy>
 8008836:	4621      	mov	r1, r4
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ffa5 	bl	8008788 <_Bfree>
 800883e:	4644      	mov	r4, r8
 8008840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008844:	3501      	adds	r5, #1
 8008846:	615e      	str	r6, [r3, #20]
 8008848:	6125      	str	r5, [r4, #16]
 800884a:	4620      	mov	r0, r4
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	08009a2a 	.word	0x08009a2a
 8008854:	08009a3b 	.word	0x08009a3b

08008858 <__hi0bits>:
 8008858:	0c02      	lsrs	r2, r0, #16
 800885a:	0412      	lsls	r2, r2, #16
 800885c:	4603      	mov	r3, r0
 800885e:	b9ca      	cbnz	r2, 8008894 <__hi0bits+0x3c>
 8008860:	0403      	lsls	r3, r0, #16
 8008862:	2010      	movs	r0, #16
 8008864:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008868:	bf04      	itt	eq
 800886a:	021b      	lsleq	r3, r3, #8
 800886c:	3008      	addeq	r0, #8
 800886e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008872:	bf04      	itt	eq
 8008874:	011b      	lsleq	r3, r3, #4
 8008876:	3004      	addeq	r0, #4
 8008878:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800887c:	bf04      	itt	eq
 800887e:	009b      	lsleq	r3, r3, #2
 8008880:	3002      	addeq	r0, #2
 8008882:	2b00      	cmp	r3, #0
 8008884:	db05      	blt.n	8008892 <__hi0bits+0x3a>
 8008886:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800888a:	f100 0001 	add.w	r0, r0, #1
 800888e:	bf08      	it	eq
 8008890:	2020      	moveq	r0, #32
 8008892:	4770      	bx	lr
 8008894:	2000      	movs	r0, #0
 8008896:	e7e5      	b.n	8008864 <__hi0bits+0xc>

08008898 <__lo0bits>:
 8008898:	6803      	ldr	r3, [r0, #0]
 800889a:	4602      	mov	r2, r0
 800889c:	f013 0007 	ands.w	r0, r3, #7
 80088a0:	d00b      	beq.n	80088ba <__lo0bits+0x22>
 80088a2:	07d9      	lsls	r1, r3, #31
 80088a4:	d421      	bmi.n	80088ea <__lo0bits+0x52>
 80088a6:	0798      	lsls	r0, r3, #30
 80088a8:	bf49      	itett	mi
 80088aa:	085b      	lsrmi	r3, r3, #1
 80088ac:	089b      	lsrpl	r3, r3, #2
 80088ae:	2001      	movmi	r0, #1
 80088b0:	6013      	strmi	r3, [r2, #0]
 80088b2:	bf5c      	itt	pl
 80088b4:	2002      	movpl	r0, #2
 80088b6:	6013      	strpl	r3, [r2, #0]
 80088b8:	4770      	bx	lr
 80088ba:	b299      	uxth	r1, r3
 80088bc:	b909      	cbnz	r1, 80088c2 <__lo0bits+0x2a>
 80088be:	2010      	movs	r0, #16
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	b2d9      	uxtb	r1, r3
 80088c4:	b909      	cbnz	r1, 80088ca <__lo0bits+0x32>
 80088c6:	3008      	adds	r0, #8
 80088c8:	0a1b      	lsrs	r3, r3, #8
 80088ca:	0719      	lsls	r1, r3, #28
 80088cc:	bf04      	itt	eq
 80088ce:	091b      	lsreq	r3, r3, #4
 80088d0:	3004      	addeq	r0, #4
 80088d2:	0799      	lsls	r1, r3, #30
 80088d4:	bf04      	itt	eq
 80088d6:	089b      	lsreq	r3, r3, #2
 80088d8:	3002      	addeq	r0, #2
 80088da:	07d9      	lsls	r1, r3, #31
 80088dc:	d403      	bmi.n	80088e6 <__lo0bits+0x4e>
 80088de:	085b      	lsrs	r3, r3, #1
 80088e0:	f100 0001 	add.w	r0, r0, #1
 80088e4:	d003      	beq.n	80088ee <__lo0bits+0x56>
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	4770      	bx	lr
 80088ea:	2000      	movs	r0, #0
 80088ec:	4770      	bx	lr
 80088ee:	2020      	movs	r0, #32
 80088f0:	4770      	bx	lr
	...

080088f4 <__i2b>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	460c      	mov	r4, r1
 80088f8:	2101      	movs	r1, #1
 80088fa:	f7ff ff05 	bl	8008708 <_Balloc>
 80088fe:	4602      	mov	r2, r0
 8008900:	b928      	cbnz	r0, 800890e <__i2b+0x1a>
 8008902:	f240 1145 	movw	r1, #325	; 0x145
 8008906:	4b04      	ldr	r3, [pc, #16]	; (8008918 <__i2b+0x24>)
 8008908:	4804      	ldr	r0, [pc, #16]	; (800891c <__i2b+0x28>)
 800890a:	f000 fcaf 	bl	800926c <__assert_func>
 800890e:	2301      	movs	r3, #1
 8008910:	6144      	str	r4, [r0, #20]
 8008912:	6103      	str	r3, [r0, #16]
 8008914:	bd10      	pop	{r4, pc}
 8008916:	bf00      	nop
 8008918:	08009a2a 	.word	0x08009a2a
 800891c:	08009a3b 	.word	0x08009a3b

08008920 <__multiply>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	4691      	mov	r9, r2
 8008926:	690a      	ldr	r2, [r1, #16]
 8008928:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800892c:	460c      	mov	r4, r1
 800892e:	429a      	cmp	r2, r3
 8008930:	bfbe      	ittt	lt
 8008932:	460b      	movlt	r3, r1
 8008934:	464c      	movlt	r4, r9
 8008936:	4699      	movlt	r9, r3
 8008938:	6927      	ldr	r7, [r4, #16]
 800893a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800893e:	68a3      	ldr	r3, [r4, #8]
 8008940:	6861      	ldr	r1, [r4, #4]
 8008942:	eb07 060a 	add.w	r6, r7, sl
 8008946:	42b3      	cmp	r3, r6
 8008948:	b085      	sub	sp, #20
 800894a:	bfb8      	it	lt
 800894c:	3101      	addlt	r1, #1
 800894e:	f7ff fedb 	bl	8008708 <_Balloc>
 8008952:	b930      	cbnz	r0, 8008962 <__multiply+0x42>
 8008954:	4602      	mov	r2, r0
 8008956:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800895a:	4b43      	ldr	r3, [pc, #268]	; (8008a68 <__multiply+0x148>)
 800895c:	4843      	ldr	r0, [pc, #268]	; (8008a6c <__multiply+0x14c>)
 800895e:	f000 fc85 	bl	800926c <__assert_func>
 8008962:	f100 0514 	add.w	r5, r0, #20
 8008966:	462b      	mov	r3, r5
 8008968:	2200      	movs	r2, #0
 800896a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800896e:	4543      	cmp	r3, r8
 8008970:	d321      	bcc.n	80089b6 <__multiply+0x96>
 8008972:	f104 0314 	add.w	r3, r4, #20
 8008976:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800897a:	f109 0314 	add.w	r3, r9, #20
 800897e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008982:	9202      	str	r2, [sp, #8]
 8008984:	1b3a      	subs	r2, r7, r4
 8008986:	3a15      	subs	r2, #21
 8008988:	f022 0203 	bic.w	r2, r2, #3
 800898c:	3204      	adds	r2, #4
 800898e:	f104 0115 	add.w	r1, r4, #21
 8008992:	428f      	cmp	r7, r1
 8008994:	bf38      	it	cc
 8008996:	2204      	movcc	r2, #4
 8008998:	9201      	str	r2, [sp, #4]
 800899a:	9a02      	ldr	r2, [sp, #8]
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d80c      	bhi.n	80089bc <__multiply+0x9c>
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	dd03      	ble.n	80089ae <__multiply+0x8e>
 80089a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d05a      	beq.n	8008a64 <__multiply+0x144>
 80089ae:	6106      	str	r6, [r0, #16]
 80089b0:	b005      	add	sp, #20
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	f843 2b04 	str.w	r2, [r3], #4
 80089ba:	e7d8      	b.n	800896e <__multiply+0x4e>
 80089bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80089c0:	f1ba 0f00 	cmp.w	sl, #0
 80089c4:	d023      	beq.n	8008a0e <__multiply+0xee>
 80089c6:	46a9      	mov	r9, r5
 80089c8:	f04f 0c00 	mov.w	ip, #0
 80089cc:	f104 0e14 	add.w	lr, r4, #20
 80089d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089d4:	f8d9 1000 	ldr.w	r1, [r9]
 80089d8:	fa1f fb82 	uxth.w	fp, r2
 80089dc:	b289      	uxth	r1, r1
 80089de:	fb0a 110b 	mla	r1, sl, fp, r1
 80089e2:	4461      	add	r1, ip
 80089e4:	f8d9 c000 	ldr.w	ip, [r9]
 80089e8:	0c12      	lsrs	r2, r2, #16
 80089ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80089ee:	fb0a c202 	mla	r2, sl, r2, ip
 80089f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089f6:	b289      	uxth	r1, r1
 80089f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089fc:	4577      	cmp	r7, lr
 80089fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a02:	f849 1b04 	str.w	r1, [r9], #4
 8008a06:	d8e3      	bhi.n	80089d0 <__multiply+0xb0>
 8008a08:	9a01      	ldr	r2, [sp, #4]
 8008a0a:	f845 c002 	str.w	ip, [r5, r2]
 8008a0e:	9a03      	ldr	r2, [sp, #12]
 8008a10:	3304      	adds	r3, #4
 8008a12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a16:	f1b9 0f00 	cmp.w	r9, #0
 8008a1a:	d021      	beq.n	8008a60 <__multiply+0x140>
 8008a1c:	46ae      	mov	lr, r5
 8008a1e:	f04f 0a00 	mov.w	sl, #0
 8008a22:	6829      	ldr	r1, [r5, #0]
 8008a24:	f104 0c14 	add.w	ip, r4, #20
 8008a28:	f8bc b000 	ldrh.w	fp, [ip]
 8008a2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a30:	b289      	uxth	r1, r1
 8008a32:	fb09 220b 	mla	r2, r9, fp, r2
 8008a36:	4452      	add	r2, sl
 8008a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8008a40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a48:	f8be 1000 	ldrh.w	r1, [lr]
 8008a4c:	4567      	cmp	r7, ip
 8008a4e:	fb09 110a 	mla	r1, r9, sl, r1
 8008a52:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a5a:	d8e5      	bhi.n	8008a28 <__multiply+0x108>
 8008a5c:	9a01      	ldr	r2, [sp, #4]
 8008a5e:	50a9      	str	r1, [r5, r2]
 8008a60:	3504      	adds	r5, #4
 8008a62:	e79a      	b.n	800899a <__multiply+0x7a>
 8008a64:	3e01      	subs	r6, #1
 8008a66:	e79c      	b.n	80089a2 <__multiply+0x82>
 8008a68:	08009a2a 	.word	0x08009a2a
 8008a6c:	08009a3b 	.word	0x08009a3b

08008a70 <__pow5mult>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4615      	mov	r5, r2
 8008a76:	f012 0203 	ands.w	r2, r2, #3
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	d007      	beq.n	8008a90 <__pow5mult+0x20>
 8008a80:	4c25      	ldr	r4, [pc, #148]	; (8008b18 <__pow5mult+0xa8>)
 8008a82:	3a01      	subs	r2, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a8a:	f7ff fe9f 	bl	80087cc <__multadd>
 8008a8e:	4607      	mov	r7, r0
 8008a90:	10ad      	asrs	r5, r5, #2
 8008a92:	d03d      	beq.n	8008b10 <__pow5mult+0xa0>
 8008a94:	69f4      	ldr	r4, [r6, #28]
 8008a96:	b97c      	cbnz	r4, 8008ab8 <__pow5mult+0x48>
 8008a98:	2010      	movs	r0, #16
 8008a9a:	f7ff fd81 	bl	80085a0 <malloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	61f0      	str	r0, [r6, #28]
 8008aa2:	b928      	cbnz	r0, 8008ab0 <__pow5mult+0x40>
 8008aa4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008aa8:	4b1c      	ldr	r3, [pc, #112]	; (8008b1c <__pow5mult+0xac>)
 8008aaa:	481d      	ldr	r0, [pc, #116]	; (8008b20 <__pow5mult+0xb0>)
 8008aac:	f000 fbde 	bl	800926c <__assert_func>
 8008ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ab4:	6004      	str	r4, [r0, #0]
 8008ab6:	60c4      	str	r4, [r0, #12]
 8008ab8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ac0:	b94c      	cbnz	r4, 8008ad6 <__pow5mult+0x66>
 8008ac2:	f240 2171 	movw	r1, #625	; 0x271
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ff14 	bl	80088f4 <__i2b>
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	f04f 0900 	mov.w	r9, #0
 8008ada:	07eb      	lsls	r3, r5, #31
 8008adc:	d50a      	bpl.n	8008af4 <__pow5mult+0x84>
 8008ade:	4639      	mov	r1, r7
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7ff ff1c 	bl	8008920 <__multiply>
 8008ae8:	4680      	mov	r8, r0
 8008aea:	4639      	mov	r1, r7
 8008aec:	4630      	mov	r0, r6
 8008aee:	f7ff fe4b 	bl	8008788 <_Bfree>
 8008af2:	4647      	mov	r7, r8
 8008af4:	106d      	asrs	r5, r5, #1
 8008af6:	d00b      	beq.n	8008b10 <__pow5mult+0xa0>
 8008af8:	6820      	ldr	r0, [r4, #0]
 8008afa:	b938      	cbnz	r0, 8008b0c <__pow5mult+0x9c>
 8008afc:	4622      	mov	r2, r4
 8008afe:	4621      	mov	r1, r4
 8008b00:	4630      	mov	r0, r6
 8008b02:	f7ff ff0d 	bl	8008920 <__multiply>
 8008b06:	6020      	str	r0, [r4, #0]
 8008b08:	f8c0 9000 	str.w	r9, [r0]
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	e7e4      	b.n	8008ada <__pow5mult+0x6a>
 8008b10:	4638      	mov	r0, r7
 8008b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b16:	bf00      	nop
 8008b18:	08009b88 	.word	0x08009b88
 8008b1c:	080099bb 	.word	0x080099bb
 8008b20:	08009a3b 	.word	0x08009a3b

08008b24 <__lshift>:
 8008b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	460c      	mov	r4, r1
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	4691      	mov	r9, r2
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	6849      	ldr	r1, [r1, #4]
 8008b32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b3c:	f108 0601 	add.w	r6, r8, #1
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	db0b      	blt.n	8008b5c <__lshift+0x38>
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff fddf 	bl	8008708 <_Balloc>
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	b948      	cbnz	r0, 8008b62 <__lshift+0x3e>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b54:	4b27      	ldr	r3, [pc, #156]	; (8008bf4 <__lshift+0xd0>)
 8008b56:	4828      	ldr	r0, [pc, #160]	; (8008bf8 <__lshift+0xd4>)
 8008b58:	f000 fb88 	bl	800926c <__assert_func>
 8008b5c:	3101      	adds	r1, #1
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	e7ee      	b.n	8008b40 <__lshift+0x1c>
 8008b62:	2300      	movs	r3, #0
 8008b64:	f100 0114 	add.w	r1, r0, #20
 8008b68:	f100 0210 	add.w	r2, r0, #16
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	4553      	cmp	r3, sl
 8008b70:	db33      	blt.n	8008bda <__lshift+0xb6>
 8008b72:	6920      	ldr	r0, [r4, #16]
 8008b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b78:	f104 0314 	add.w	r3, r4, #20
 8008b7c:	f019 091f 	ands.w	r9, r9, #31
 8008b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b88:	d02b      	beq.n	8008be2 <__lshift+0xbe>
 8008b8a:	468a      	mov	sl, r1
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	fa00 f009 	lsl.w	r0, r0, r9
 8008b98:	4310      	orrs	r0, r2
 8008b9a:	f84a 0b04 	str.w	r0, [sl], #4
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	459c      	cmp	ip, r3
 8008ba4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ba8:	d8f3      	bhi.n	8008b92 <__lshift+0x6e>
 8008baa:	ebac 0304 	sub.w	r3, ip, r4
 8008bae:	3b15      	subs	r3, #21
 8008bb0:	f023 0303 	bic.w	r3, r3, #3
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	f104 0015 	add.w	r0, r4, #21
 8008bba:	4584      	cmp	ip, r0
 8008bbc:	bf38      	it	cc
 8008bbe:	2304      	movcc	r3, #4
 8008bc0:	50ca      	str	r2, [r1, r3]
 8008bc2:	b10a      	cbz	r2, 8008bc8 <__lshift+0xa4>
 8008bc4:	f108 0602 	add.w	r6, r8, #2
 8008bc8:	3e01      	subs	r6, #1
 8008bca:	4638      	mov	r0, r7
 8008bcc:	4621      	mov	r1, r4
 8008bce:	612e      	str	r6, [r5, #16]
 8008bd0:	f7ff fdda 	bl	8008788 <_Bfree>
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bda:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bde:	3301      	adds	r3, #1
 8008be0:	e7c5      	b.n	8008b6e <__lshift+0x4a>
 8008be2:	3904      	subs	r1, #4
 8008be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be8:	459c      	cmp	ip, r3
 8008bea:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bee:	d8f9      	bhi.n	8008be4 <__lshift+0xc0>
 8008bf0:	e7ea      	b.n	8008bc8 <__lshift+0xa4>
 8008bf2:	bf00      	nop
 8008bf4:	08009a2a 	.word	0x08009a2a
 8008bf8:	08009a3b 	.word	0x08009a3b

08008bfc <__mcmp>:
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	690a      	ldr	r2, [r1, #16]
 8008c00:	6900      	ldr	r0, [r0, #16]
 8008c02:	b530      	push	{r4, r5, lr}
 8008c04:	1a80      	subs	r0, r0, r2
 8008c06:	d10d      	bne.n	8008c24 <__mcmp+0x28>
 8008c08:	3314      	adds	r3, #20
 8008c0a:	3114      	adds	r1, #20
 8008c0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c1c:	4295      	cmp	r5, r2
 8008c1e:	d002      	beq.n	8008c26 <__mcmp+0x2a>
 8008c20:	d304      	bcc.n	8008c2c <__mcmp+0x30>
 8008c22:	2001      	movs	r0, #1
 8008c24:	bd30      	pop	{r4, r5, pc}
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	d3f4      	bcc.n	8008c14 <__mcmp+0x18>
 8008c2a:	e7fb      	b.n	8008c24 <__mcmp+0x28>
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	e7f8      	b.n	8008c24 <__mcmp+0x28>
	...

08008c34 <__mdiff>:
 8008c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4628      	mov	r0, r5
 8008c40:	4614      	mov	r4, r2
 8008c42:	f7ff ffdb 	bl	8008bfc <__mcmp>
 8008c46:	1e06      	subs	r6, r0, #0
 8008c48:	d111      	bne.n	8008c6e <__mdiff+0x3a>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff fd5b 	bl	8008708 <_Balloc>
 8008c52:	4602      	mov	r2, r0
 8008c54:	b928      	cbnz	r0, 8008c62 <__mdiff+0x2e>
 8008c56:	f240 2137 	movw	r1, #567	; 0x237
 8008c5a:	4b3a      	ldr	r3, [pc, #232]	; (8008d44 <__mdiff+0x110>)
 8008c5c:	483a      	ldr	r0, [pc, #232]	; (8008d48 <__mdiff+0x114>)
 8008c5e:	f000 fb05 	bl	800926c <__assert_func>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c68:	4610      	mov	r0, r2
 8008c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6e:	bfa4      	itt	ge
 8008c70:	4623      	movge	r3, r4
 8008c72:	462c      	movge	r4, r5
 8008c74:	4638      	mov	r0, r7
 8008c76:	6861      	ldr	r1, [r4, #4]
 8008c78:	bfa6      	itte	ge
 8008c7a:	461d      	movge	r5, r3
 8008c7c:	2600      	movge	r6, #0
 8008c7e:	2601      	movlt	r6, #1
 8008c80:	f7ff fd42 	bl	8008708 <_Balloc>
 8008c84:	4602      	mov	r2, r0
 8008c86:	b918      	cbnz	r0, 8008c90 <__mdiff+0x5c>
 8008c88:	f240 2145 	movw	r1, #581	; 0x245
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <__mdiff+0x110>)
 8008c8e:	e7e5      	b.n	8008c5c <__mdiff+0x28>
 8008c90:	f102 0814 	add.w	r8, r2, #20
 8008c94:	46c2      	mov	sl, r8
 8008c96:	f04f 0c00 	mov.w	ip, #0
 8008c9a:	6927      	ldr	r7, [r4, #16]
 8008c9c:	60c6      	str	r6, [r0, #12]
 8008c9e:	692e      	ldr	r6, [r5, #16]
 8008ca0:	f104 0014 	add.w	r0, r4, #20
 8008ca4:	f105 0914 	add.w	r9, r5, #20
 8008ca8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008cac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cb0:	3410      	adds	r4, #16
 8008cb2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008cb6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cba:	fa1f f18b 	uxth.w	r1, fp
 8008cbe:	4461      	add	r1, ip
 8008cc0:	fa1f fc83 	uxth.w	ip, r3
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	eba1 010c 	sub.w	r1, r1, ip
 8008cca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cd8:	454e      	cmp	r6, r9
 8008cda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008cde:	f84a 1b04 	str.w	r1, [sl], #4
 8008ce2:	d8e6      	bhi.n	8008cb2 <__mdiff+0x7e>
 8008ce4:	1b73      	subs	r3, r6, r5
 8008ce6:	3b15      	subs	r3, #21
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	3515      	adds	r5, #21
 8008cee:	3304      	adds	r3, #4
 8008cf0:	42ae      	cmp	r6, r5
 8008cf2:	bf38      	it	cc
 8008cf4:	2304      	movcc	r3, #4
 8008cf6:	4418      	add	r0, r3
 8008cf8:	4443      	add	r3, r8
 8008cfa:	461e      	mov	r6, r3
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	4575      	cmp	r5, lr
 8008d00:	d30e      	bcc.n	8008d20 <__mdiff+0xec>
 8008d02:	f10e 0103 	add.w	r1, lr, #3
 8008d06:	1a09      	subs	r1, r1, r0
 8008d08:	f021 0103 	bic.w	r1, r1, #3
 8008d0c:	3803      	subs	r0, #3
 8008d0e:	4586      	cmp	lr, r0
 8008d10:	bf38      	it	cc
 8008d12:	2100      	movcc	r1, #0
 8008d14:	440b      	add	r3, r1
 8008d16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d1a:	b189      	cbz	r1, 8008d40 <__mdiff+0x10c>
 8008d1c:	6117      	str	r7, [r2, #16]
 8008d1e:	e7a3      	b.n	8008c68 <__mdiff+0x34>
 8008d20:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d24:	fa1f f188 	uxth.w	r1, r8
 8008d28:	4461      	add	r1, ip
 8008d2a:	140c      	asrs	r4, r1, #16
 8008d2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d30:	b289      	uxth	r1, r1
 8008d32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d36:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008d3a:	f846 1b04 	str.w	r1, [r6], #4
 8008d3e:	e7de      	b.n	8008cfe <__mdiff+0xca>
 8008d40:	3f01      	subs	r7, #1
 8008d42:	e7e8      	b.n	8008d16 <__mdiff+0xe2>
 8008d44:	08009a2a 	.word	0x08009a2a
 8008d48:	08009a3b 	.word	0x08009a3b

08008d4c <__d2b>:
 8008d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4617      	mov	r7, r2
 8008d52:	461c      	mov	r4, r3
 8008d54:	9e08      	ldr	r6, [sp, #32]
 8008d56:	f7ff fcd7 	bl	8008708 <_Balloc>
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b930      	cbnz	r0, 8008d6c <__d2b+0x20>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	f240 310f 	movw	r1, #783	; 0x30f
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <__d2b+0xa4>)
 8008d66:	4823      	ldr	r0, [pc, #140]	; (8008df4 <__d2b+0xa8>)
 8008d68:	f000 fa80 	bl	800926c <__assert_func>
 8008d6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008d70:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008d74:	bb24      	cbnz	r4, 8008dc0 <__d2b+0x74>
 8008d76:	2f00      	cmp	r7, #0
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	d026      	beq.n	8008dca <__d2b+0x7e>
 8008d7c:	4668      	mov	r0, sp
 8008d7e:	9700      	str	r7, [sp, #0]
 8008d80:	f7ff fd8a 	bl	8008898 <__lo0bits>
 8008d84:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d88:	b1e8      	cbz	r0, 8008dc6 <__d2b+0x7a>
 8008d8a:	f1c0 0320 	rsb	r3, r0, #32
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	430b      	orrs	r3, r1
 8008d94:	40c2      	lsrs	r2, r0
 8008d96:	616b      	str	r3, [r5, #20]
 8008d98:	9201      	str	r2, [sp, #4]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bf14      	ite	ne
 8008da0:	2102      	movne	r1, #2
 8008da2:	2101      	moveq	r1, #1
 8008da4:	61ab      	str	r3, [r5, #24]
 8008da6:	6129      	str	r1, [r5, #16]
 8008da8:	b1bc      	cbz	r4, 8008dda <__d2b+0x8e>
 8008daa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008dae:	4404      	add	r4, r0
 8008db0:	6034      	str	r4, [r6, #0]
 8008db2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	6018      	str	r0, [r3, #0]
 8008dba:	4628      	mov	r0, r5
 8008dbc:	b003      	add	sp, #12
 8008dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dc4:	e7d7      	b.n	8008d76 <__d2b+0x2a>
 8008dc6:	6169      	str	r1, [r5, #20]
 8008dc8:	e7e7      	b.n	8008d9a <__d2b+0x4e>
 8008dca:	a801      	add	r0, sp, #4
 8008dcc:	f7ff fd64 	bl	8008898 <__lo0bits>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	616b      	str	r3, [r5, #20]
 8008dd6:	3020      	adds	r0, #32
 8008dd8:	e7e5      	b.n	8008da6 <__d2b+0x5a>
 8008dda:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dde:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008de2:	6030      	str	r0, [r6, #0]
 8008de4:	6918      	ldr	r0, [r3, #16]
 8008de6:	f7ff fd37 	bl	8008858 <__hi0bits>
 8008dea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008dee:	e7e2      	b.n	8008db6 <__d2b+0x6a>
 8008df0:	08009a2a 	.word	0x08009a2a
 8008df4:	08009a3b 	.word	0x08009a3b

08008df8 <__ssputs_r>:
 8008df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	461f      	mov	r7, r3
 8008dfe:	688e      	ldr	r6, [r1, #8]
 8008e00:	4682      	mov	sl, r0
 8008e02:	42be      	cmp	r6, r7
 8008e04:	460c      	mov	r4, r1
 8008e06:	4690      	mov	r8, r2
 8008e08:	680b      	ldr	r3, [r1, #0]
 8008e0a:	d82c      	bhi.n	8008e66 <__ssputs_r+0x6e>
 8008e0c:	898a      	ldrh	r2, [r1, #12]
 8008e0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e12:	d026      	beq.n	8008e62 <__ssputs_r+0x6a>
 8008e14:	6965      	ldr	r5, [r4, #20]
 8008e16:	6909      	ldr	r1, [r1, #16]
 8008e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e1c:	eba3 0901 	sub.w	r9, r3, r1
 8008e20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e24:	1c7b      	adds	r3, r7, #1
 8008e26:	444b      	add	r3, r9
 8008e28:	106d      	asrs	r5, r5, #1
 8008e2a:	429d      	cmp	r5, r3
 8008e2c:	bf38      	it	cc
 8008e2e:	461d      	movcc	r5, r3
 8008e30:	0553      	lsls	r3, r2, #21
 8008e32:	d527      	bpl.n	8008e84 <__ssputs_r+0x8c>
 8008e34:	4629      	mov	r1, r5
 8008e36:	f7ff fbdb 	bl	80085f0 <_malloc_r>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	b360      	cbz	r0, 8008e98 <__ssputs_r+0xa0>
 8008e3e:	464a      	mov	r2, r9
 8008e40:	6921      	ldr	r1, [r4, #16]
 8008e42:	f000 fa05 	bl	8009250 <memcpy>
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	6126      	str	r6, [r4, #16]
 8008e54:	444e      	add	r6, r9
 8008e56:	6026      	str	r6, [r4, #0]
 8008e58:	463e      	mov	r6, r7
 8008e5a:	6165      	str	r5, [r4, #20]
 8008e5c:	eba5 0509 	sub.w	r5, r5, r9
 8008e60:	60a5      	str	r5, [r4, #8]
 8008e62:	42be      	cmp	r6, r7
 8008e64:	d900      	bls.n	8008e68 <__ssputs_r+0x70>
 8008e66:	463e      	mov	r6, r7
 8008e68:	4632      	mov	r2, r6
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	f000 f9c5 	bl	80091fc <memmove>
 8008e72:	2000      	movs	r0, #0
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	1b9b      	subs	r3, r3, r6
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	4433      	add	r3, r6
 8008e7e:	6023      	str	r3, [r4, #0]
 8008e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e84:	462a      	mov	r2, r5
 8008e86:	f000 fa35 	bl	80092f4 <_realloc_r>
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1e0      	bne.n	8008e52 <__ssputs_r+0x5a>
 8008e90:	4650      	mov	r0, sl
 8008e92:	6921      	ldr	r1, [r4, #16]
 8008e94:	f7ff fb3c 	bl	8008510 <_free_r>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	f8ca 3000 	str.w	r3, [sl]
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	e7e9      	b.n	8008e80 <__ssputs_r+0x88>

08008eac <_svfiprintf_r>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	898b      	ldrh	r3, [r1, #12]
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	061b      	lsls	r3, r3, #24
 8008eb8:	460d      	mov	r5, r1
 8008eba:	4614      	mov	r4, r2
 8008ebc:	b09d      	sub	sp, #116	; 0x74
 8008ebe:	d50e      	bpl.n	8008ede <_svfiprintf_r+0x32>
 8008ec0:	690b      	ldr	r3, [r1, #16]
 8008ec2:	b963      	cbnz	r3, 8008ede <_svfiprintf_r+0x32>
 8008ec4:	2140      	movs	r1, #64	; 0x40
 8008ec6:	f7ff fb93 	bl	80085f0 <_malloc_r>
 8008eca:	6028      	str	r0, [r5, #0]
 8008ecc:	6128      	str	r0, [r5, #16]
 8008ece:	b920      	cbnz	r0, 8008eda <_svfiprintf_r+0x2e>
 8008ed0:	230c      	movs	r3, #12
 8008ed2:	603b      	str	r3, [r7, #0]
 8008ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed8:	e0d0      	b.n	800907c <_svfiprintf_r+0x1d0>
 8008eda:	2340      	movs	r3, #64	; 0x40
 8008edc:	616b      	str	r3, [r5, #20]
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee2:	2320      	movs	r3, #32
 8008ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ee8:	2330      	movs	r3, #48	; 0x30
 8008eea:	f04f 0901 	mov.w	r9, #1
 8008eee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ef2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009094 <_svfiprintf_r+0x1e8>
 8008ef6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008efa:	4623      	mov	r3, r4
 8008efc:	469a      	mov	sl, r3
 8008efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f02:	b10a      	cbz	r2, 8008f08 <_svfiprintf_r+0x5c>
 8008f04:	2a25      	cmp	r2, #37	; 0x25
 8008f06:	d1f9      	bne.n	8008efc <_svfiprintf_r+0x50>
 8008f08:	ebba 0b04 	subs.w	fp, sl, r4
 8008f0c:	d00b      	beq.n	8008f26 <_svfiprintf_r+0x7a>
 8008f0e:	465b      	mov	r3, fp
 8008f10:	4622      	mov	r2, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ff6f 	bl	8008df8 <__ssputs_r>
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	f000 80a9 	beq.w	8009072 <_svfiprintf_r+0x1c6>
 8008f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f22:	445a      	add	r2, fp
 8008f24:	9209      	str	r2, [sp, #36]	; 0x24
 8008f26:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 80a1 	beq.w	8009072 <_svfiprintf_r+0x1c6>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295
 8008f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f3a:	f10a 0a01 	add.w	sl, sl, #1
 8008f3e:	9304      	str	r3, [sp, #16]
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f46:	931a      	str	r3, [sp, #104]	; 0x68
 8008f48:	4654      	mov	r4, sl
 8008f4a:	2205      	movs	r2, #5
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	4850      	ldr	r0, [pc, #320]	; (8009094 <_svfiprintf_r+0x1e8>)
 8008f52:	f7fe fc60 	bl	8007816 <memchr>
 8008f56:	9a04      	ldr	r2, [sp, #16]
 8008f58:	b9d8      	cbnz	r0, 8008f92 <_svfiprintf_r+0xe6>
 8008f5a:	06d0      	lsls	r0, r2, #27
 8008f5c:	bf44      	itt	mi
 8008f5e:	2320      	movmi	r3, #32
 8008f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f64:	0711      	lsls	r1, r2, #28
 8008f66:	bf44      	itt	mi
 8008f68:	232b      	movmi	r3, #43	; 0x2b
 8008f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f72:	2b2a      	cmp	r3, #42	; 0x2a
 8008f74:	d015      	beq.n	8008fa2 <_svfiprintf_r+0xf6>
 8008f76:	4654      	mov	r4, sl
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f04f 0c0a 	mov.w	ip, #10
 8008f7e:	9a07      	ldr	r2, [sp, #28]
 8008f80:	4621      	mov	r1, r4
 8008f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f86:	3b30      	subs	r3, #48	; 0x30
 8008f88:	2b09      	cmp	r3, #9
 8008f8a:	d94d      	bls.n	8009028 <_svfiprintf_r+0x17c>
 8008f8c:	b1b0      	cbz	r0, 8008fbc <_svfiprintf_r+0x110>
 8008f8e:	9207      	str	r2, [sp, #28]
 8008f90:	e014      	b.n	8008fbc <_svfiprintf_r+0x110>
 8008f92:	eba0 0308 	sub.w	r3, r0, r8
 8008f96:	fa09 f303 	lsl.w	r3, r9, r3
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	46a2      	mov	sl, r4
 8008f9e:	9304      	str	r3, [sp, #16]
 8008fa0:	e7d2      	b.n	8008f48 <_svfiprintf_r+0x9c>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	1d19      	adds	r1, r3, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	9103      	str	r1, [sp, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfbb      	ittet	lt
 8008fae:	425b      	neglt	r3, r3
 8008fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb4:	9307      	strge	r3, [sp, #28]
 8008fb6:	9307      	strlt	r3, [sp, #28]
 8008fb8:	bfb8      	it	lt
 8008fba:	9204      	strlt	r2, [sp, #16]
 8008fbc:	7823      	ldrb	r3, [r4, #0]
 8008fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8008fc0:	d10c      	bne.n	8008fdc <_svfiprintf_r+0x130>
 8008fc2:	7863      	ldrb	r3, [r4, #1]
 8008fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc6:	d134      	bne.n	8009032 <_svfiprintf_r+0x186>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	3402      	adds	r4, #2
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	9203      	str	r2, [sp, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bfb8      	it	lt
 8008fd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009098 <_svfiprintf_r+0x1ec>
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	7821      	ldrb	r1, [r4, #0]
 8008fe6:	f7fe fc16 	bl	8007816 <memchr>
 8008fea:	b138      	cbz	r0, 8008ffc <_svfiprintf_r+0x150>
 8008fec:	2240      	movs	r2, #64	; 0x40
 8008fee:	9b04      	ldr	r3, [sp, #16]
 8008ff0:	eba0 000a 	sub.w	r0, r0, sl
 8008ff4:	4082      	lsls	r2, r0
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	2206      	movs	r2, #6
 8009002:	4826      	ldr	r0, [pc, #152]	; (800909c <_svfiprintf_r+0x1f0>)
 8009004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009008:	f7fe fc05 	bl	8007816 <memchr>
 800900c:	2800      	cmp	r0, #0
 800900e:	d038      	beq.n	8009082 <_svfiprintf_r+0x1d6>
 8009010:	4b23      	ldr	r3, [pc, #140]	; (80090a0 <_svfiprintf_r+0x1f4>)
 8009012:	bb1b      	cbnz	r3, 800905c <_svfiprintf_r+0x1b0>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	3308      	adds	r3, #8
 800901e:	9303      	str	r3, [sp, #12]
 8009020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009022:	4433      	add	r3, r6
 8009024:	9309      	str	r3, [sp, #36]	; 0x24
 8009026:	e768      	b.n	8008efa <_svfiprintf_r+0x4e>
 8009028:	460c      	mov	r4, r1
 800902a:	2001      	movs	r0, #1
 800902c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009030:	e7a6      	b.n	8008f80 <_svfiprintf_r+0xd4>
 8009032:	2300      	movs	r3, #0
 8009034:	f04f 0c0a 	mov.w	ip, #10
 8009038:	4619      	mov	r1, r3
 800903a:	3401      	adds	r4, #1
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	4620      	mov	r0, r4
 8009040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009044:	3a30      	subs	r2, #48	; 0x30
 8009046:	2a09      	cmp	r2, #9
 8009048:	d903      	bls.n	8009052 <_svfiprintf_r+0x1a6>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0c6      	beq.n	8008fdc <_svfiprintf_r+0x130>
 800904e:	9105      	str	r1, [sp, #20]
 8009050:	e7c4      	b.n	8008fdc <_svfiprintf_r+0x130>
 8009052:	4604      	mov	r4, r0
 8009054:	2301      	movs	r3, #1
 8009056:	fb0c 2101 	mla	r1, ip, r1, r2
 800905a:	e7f0      	b.n	800903e <_svfiprintf_r+0x192>
 800905c:	ab03      	add	r3, sp, #12
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	462a      	mov	r2, r5
 8009062:	4638      	mov	r0, r7
 8009064:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <_svfiprintf_r+0x1f8>)
 8009066:	a904      	add	r1, sp, #16
 8009068:	f7fd fe6e 	bl	8006d48 <_printf_float>
 800906c:	1c42      	adds	r2, r0, #1
 800906e:	4606      	mov	r6, r0
 8009070:	d1d6      	bne.n	8009020 <_svfiprintf_r+0x174>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	065b      	lsls	r3, r3, #25
 8009076:	f53f af2d 	bmi.w	8008ed4 <_svfiprintf_r+0x28>
 800907a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800907c:	b01d      	add	sp, #116	; 0x74
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4638      	mov	r0, r7
 800908a:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <_svfiprintf_r+0x1f8>)
 800908c:	a904      	add	r1, sp, #16
 800908e:	f7fe f8fb 	bl	8007288 <_printf_i>
 8009092:	e7eb      	b.n	800906c <_svfiprintf_r+0x1c0>
 8009094:	08009b94 	.word	0x08009b94
 8009098:	08009b9a 	.word	0x08009b9a
 800909c:	08009b9e 	.word	0x08009b9e
 80090a0:	08006d49 	.word	0x08006d49
 80090a4:	08008df9 	.word	0x08008df9

080090a8 <__sflush_r>:
 80090a8:	898a      	ldrh	r2, [r1, #12]
 80090aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ac:	4605      	mov	r5, r0
 80090ae:	0710      	lsls	r0, r2, #28
 80090b0:	460c      	mov	r4, r1
 80090b2:	d457      	bmi.n	8009164 <__sflush_r+0xbc>
 80090b4:	684b      	ldr	r3, [r1, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dc04      	bgt.n	80090c4 <__sflush_r+0x1c>
 80090ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dc01      	bgt.n	80090c4 <__sflush_r+0x1c>
 80090c0:	2000      	movs	r0, #0
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d0fa      	beq.n	80090c0 <__sflush_r+0x18>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090d0:	682f      	ldr	r7, [r5, #0]
 80090d2:	6a21      	ldr	r1, [r4, #32]
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	d032      	beq.n	800913e <__sflush_r+0x96>
 80090d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	075a      	lsls	r2, r3, #29
 80090de:	d505      	bpl.n	80090ec <__sflush_r+0x44>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	1ac0      	subs	r0, r0, r3
 80090e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090e6:	b10b      	cbz	r3, 80090ec <__sflush_r+0x44>
 80090e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090ea:	1ac0      	subs	r0, r0, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	4602      	mov	r2, r0
 80090f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090f2:	4628      	mov	r0, r5
 80090f4:	6a21      	ldr	r1, [r4, #32]
 80090f6:	47b0      	blx	r6
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	d106      	bne.n	800910c <__sflush_r+0x64>
 80090fe:	6829      	ldr	r1, [r5, #0]
 8009100:	291d      	cmp	r1, #29
 8009102:	d82b      	bhi.n	800915c <__sflush_r+0xb4>
 8009104:	4a28      	ldr	r2, [pc, #160]	; (80091a8 <__sflush_r+0x100>)
 8009106:	410a      	asrs	r2, r1
 8009108:	07d6      	lsls	r6, r2, #31
 800910a:	d427      	bmi.n	800915c <__sflush_r+0xb4>
 800910c:	2200      	movs	r2, #0
 800910e:	6062      	str	r2, [r4, #4]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	04d9      	lsls	r1, r3, #19
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	d504      	bpl.n	8009122 <__sflush_r+0x7a>
 8009118:	1c42      	adds	r2, r0, #1
 800911a:	d101      	bne.n	8009120 <__sflush_r+0x78>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b903      	cbnz	r3, 8009122 <__sflush_r+0x7a>
 8009120:	6560      	str	r0, [r4, #84]	; 0x54
 8009122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009124:	602f      	str	r7, [r5, #0]
 8009126:	2900      	cmp	r1, #0
 8009128:	d0ca      	beq.n	80090c0 <__sflush_r+0x18>
 800912a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800912e:	4299      	cmp	r1, r3
 8009130:	d002      	beq.n	8009138 <__sflush_r+0x90>
 8009132:	4628      	mov	r0, r5
 8009134:	f7ff f9ec 	bl	8008510 <_free_r>
 8009138:	2000      	movs	r0, #0
 800913a:	6360      	str	r0, [r4, #52]	; 0x34
 800913c:	e7c1      	b.n	80090c2 <__sflush_r+0x1a>
 800913e:	2301      	movs	r3, #1
 8009140:	4628      	mov	r0, r5
 8009142:	47b0      	blx	r6
 8009144:	1c41      	adds	r1, r0, #1
 8009146:	d1c8      	bne.n	80090da <__sflush_r+0x32>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c5      	beq.n	80090da <__sflush_r+0x32>
 800914e:	2b1d      	cmp	r3, #29
 8009150:	d001      	beq.n	8009156 <__sflush_r+0xae>
 8009152:	2b16      	cmp	r3, #22
 8009154:	d101      	bne.n	800915a <__sflush_r+0xb2>
 8009156:	602f      	str	r7, [r5, #0]
 8009158:	e7b2      	b.n	80090c0 <__sflush_r+0x18>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	e7ae      	b.n	80090c2 <__sflush_r+0x1a>
 8009164:	690f      	ldr	r7, [r1, #16]
 8009166:	2f00      	cmp	r7, #0
 8009168:	d0aa      	beq.n	80090c0 <__sflush_r+0x18>
 800916a:	0793      	lsls	r3, r2, #30
 800916c:	bf18      	it	ne
 800916e:	2300      	movne	r3, #0
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	bf08      	it	eq
 8009174:	694b      	ldreq	r3, [r1, #20]
 8009176:	1bf6      	subs	r6, r6, r7
 8009178:	600f      	str	r7, [r1, #0]
 800917a:	608b      	str	r3, [r1, #8]
 800917c:	2e00      	cmp	r6, #0
 800917e:	dd9f      	ble.n	80090c0 <__sflush_r+0x18>
 8009180:	4633      	mov	r3, r6
 8009182:	463a      	mov	r2, r7
 8009184:	4628      	mov	r0, r5
 8009186:	6a21      	ldr	r1, [r4, #32]
 8009188:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800918c:	47e0      	blx	ip
 800918e:	2800      	cmp	r0, #0
 8009190:	dc06      	bgt.n	80091a0 <__sflush_r+0xf8>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	e790      	b.n	80090c2 <__sflush_r+0x1a>
 80091a0:	4407      	add	r7, r0
 80091a2:	1a36      	subs	r6, r6, r0
 80091a4:	e7ea      	b.n	800917c <__sflush_r+0xd4>
 80091a6:	bf00      	nop
 80091a8:	dfbffffe 	.word	0xdfbffffe

080091ac <_fflush_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	690b      	ldr	r3, [r1, #16]
 80091b0:	4605      	mov	r5, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	b913      	cbnz	r3, 80091bc <_fflush_r+0x10>
 80091b6:	2500      	movs	r5, #0
 80091b8:	4628      	mov	r0, r5
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	b118      	cbz	r0, 80091c6 <_fflush_r+0x1a>
 80091be:	6a03      	ldr	r3, [r0, #32]
 80091c0:	b90b      	cbnz	r3, 80091c6 <_fflush_r+0x1a>
 80091c2:	f7fe fa0f 	bl	80075e4 <__sinit>
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f3      	beq.n	80091b6 <_fflush_r+0xa>
 80091ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091d0:	07d0      	lsls	r0, r2, #31
 80091d2:	d404      	bmi.n	80091de <_fflush_r+0x32>
 80091d4:	0599      	lsls	r1, r3, #22
 80091d6:	d402      	bmi.n	80091de <_fflush_r+0x32>
 80091d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091da:	f7fe fb1a 	bl	8007812 <__retarget_lock_acquire_recursive>
 80091de:	4628      	mov	r0, r5
 80091e0:	4621      	mov	r1, r4
 80091e2:	f7ff ff61 	bl	80090a8 <__sflush_r>
 80091e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091e8:	4605      	mov	r5, r0
 80091ea:	07da      	lsls	r2, r3, #31
 80091ec:	d4e4      	bmi.n	80091b8 <_fflush_r+0xc>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	059b      	lsls	r3, r3, #22
 80091f2:	d4e1      	bmi.n	80091b8 <_fflush_r+0xc>
 80091f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f6:	f7fe fb0d 	bl	8007814 <__retarget_lock_release_recursive>
 80091fa:	e7dd      	b.n	80091b8 <_fflush_r+0xc>

080091fc <memmove>:
 80091fc:	4288      	cmp	r0, r1
 80091fe:	b510      	push	{r4, lr}
 8009200:	eb01 0402 	add.w	r4, r1, r2
 8009204:	d902      	bls.n	800920c <memmove+0x10>
 8009206:	4284      	cmp	r4, r0
 8009208:	4623      	mov	r3, r4
 800920a:	d807      	bhi.n	800921c <memmove+0x20>
 800920c:	1e43      	subs	r3, r0, #1
 800920e:	42a1      	cmp	r1, r4
 8009210:	d008      	beq.n	8009224 <memmove+0x28>
 8009212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800921a:	e7f8      	b.n	800920e <memmove+0x12>
 800921c:	4601      	mov	r1, r0
 800921e:	4402      	add	r2, r0
 8009220:	428a      	cmp	r2, r1
 8009222:	d100      	bne.n	8009226 <memmove+0x2a>
 8009224:	bd10      	pop	{r4, pc}
 8009226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800922a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800922e:	e7f7      	b.n	8009220 <memmove+0x24>

08009230 <_sbrk_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	2300      	movs	r3, #0
 8009234:	4d05      	ldr	r5, [pc, #20]	; (800924c <_sbrk_r+0x1c>)
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f8 fb6c 	bl	8001918 <_sbrk>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_sbrk_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_sbrk_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000c24 	.word	0x20000c24

08009250 <memcpy>:
 8009250:	440a      	add	r2, r1
 8009252:	4291      	cmp	r1, r2
 8009254:	f100 33ff 	add.w	r3, r0, #4294967295
 8009258:	d100      	bne.n	800925c <memcpy+0xc>
 800925a:	4770      	bx	lr
 800925c:	b510      	push	{r4, lr}
 800925e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009262:	4291      	cmp	r1, r2
 8009264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009268:	d1f9      	bne.n	800925e <memcpy+0xe>
 800926a:	bd10      	pop	{r4, pc}

0800926c <__assert_func>:
 800926c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800926e:	4614      	mov	r4, r2
 8009270:	461a      	mov	r2, r3
 8009272:	4b09      	ldr	r3, [pc, #36]	; (8009298 <__assert_func+0x2c>)
 8009274:	4605      	mov	r5, r0
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68d8      	ldr	r0, [r3, #12]
 800927a:	b14c      	cbz	r4, 8009290 <__assert_func+0x24>
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <__assert_func+0x30>)
 800927e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009282:	9100      	str	r1, [sp, #0]
 8009284:	462b      	mov	r3, r5
 8009286:	4906      	ldr	r1, [pc, #24]	; (80092a0 <__assert_func+0x34>)
 8009288:	f000 f870 	bl	800936c <fiprintf>
 800928c:	f000 f880 	bl	8009390 <abort>
 8009290:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <__assert_func+0x38>)
 8009292:	461c      	mov	r4, r3
 8009294:	e7f3      	b.n	800927e <__assert_func+0x12>
 8009296:	bf00      	nop
 8009298:	20000064 	.word	0x20000064
 800929c:	08009baf 	.word	0x08009baf
 80092a0:	08009bbc 	.word	0x08009bbc
 80092a4:	08009bea 	.word	0x08009bea

080092a8 <_calloc_r>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	fba1 5402 	umull	r5, r4, r1, r2
 80092ae:	b934      	cbnz	r4, 80092be <_calloc_r+0x16>
 80092b0:	4629      	mov	r1, r5
 80092b2:	f7ff f99d 	bl	80085f0 <_malloc_r>
 80092b6:	4606      	mov	r6, r0
 80092b8:	b928      	cbnz	r0, 80092c6 <_calloc_r+0x1e>
 80092ba:	4630      	mov	r0, r6
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
 80092be:	220c      	movs	r2, #12
 80092c0:	2600      	movs	r6, #0
 80092c2:	6002      	str	r2, [r0, #0]
 80092c4:	e7f9      	b.n	80092ba <_calloc_r+0x12>
 80092c6:	462a      	mov	r2, r5
 80092c8:	4621      	mov	r1, r4
 80092ca:	f7fe fa24 	bl	8007716 <memset>
 80092ce:	e7f4      	b.n	80092ba <_calloc_r+0x12>

080092d0 <__ascii_mbtowc>:
 80092d0:	b082      	sub	sp, #8
 80092d2:	b901      	cbnz	r1, 80092d6 <__ascii_mbtowc+0x6>
 80092d4:	a901      	add	r1, sp, #4
 80092d6:	b142      	cbz	r2, 80092ea <__ascii_mbtowc+0x1a>
 80092d8:	b14b      	cbz	r3, 80092ee <__ascii_mbtowc+0x1e>
 80092da:	7813      	ldrb	r3, [r2, #0]
 80092dc:	600b      	str	r3, [r1, #0]
 80092de:	7812      	ldrb	r2, [r2, #0]
 80092e0:	1e10      	subs	r0, r2, #0
 80092e2:	bf18      	it	ne
 80092e4:	2001      	movne	r0, #1
 80092e6:	b002      	add	sp, #8
 80092e8:	4770      	bx	lr
 80092ea:	4610      	mov	r0, r2
 80092ec:	e7fb      	b.n	80092e6 <__ascii_mbtowc+0x16>
 80092ee:	f06f 0001 	mvn.w	r0, #1
 80092f2:	e7f8      	b.n	80092e6 <__ascii_mbtowc+0x16>

080092f4 <_realloc_r>:
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	4680      	mov	r8, r0
 80092fa:	4614      	mov	r4, r2
 80092fc:	460e      	mov	r6, r1
 80092fe:	b921      	cbnz	r1, 800930a <_realloc_r+0x16>
 8009300:	4611      	mov	r1, r2
 8009302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009306:	f7ff b973 	b.w	80085f0 <_malloc_r>
 800930a:	b92a      	cbnz	r2, 8009318 <_realloc_r+0x24>
 800930c:	f7ff f900 	bl	8008510 <_free_r>
 8009310:	4625      	mov	r5, r4
 8009312:	4628      	mov	r0, r5
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	f000 f841 	bl	800939e <_malloc_usable_size_r>
 800931c:	4284      	cmp	r4, r0
 800931e:	4607      	mov	r7, r0
 8009320:	d802      	bhi.n	8009328 <_realloc_r+0x34>
 8009322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009326:	d812      	bhi.n	800934e <_realloc_r+0x5a>
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f7ff f960 	bl	80085f0 <_malloc_r>
 8009330:	4605      	mov	r5, r0
 8009332:	2800      	cmp	r0, #0
 8009334:	d0ed      	beq.n	8009312 <_realloc_r+0x1e>
 8009336:	42bc      	cmp	r4, r7
 8009338:	4622      	mov	r2, r4
 800933a:	4631      	mov	r1, r6
 800933c:	bf28      	it	cs
 800933e:	463a      	movcs	r2, r7
 8009340:	f7ff ff86 	bl	8009250 <memcpy>
 8009344:	4631      	mov	r1, r6
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff f8e2 	bl	8008510 <_free_r>
 800934c:	e7e1      	b.n	8009312 <_realloc_r+0x1e>
 800934e:	4635      	mov	r5, r6
 8009350:	e7df      	b.n	8009312 <_realloc_r+0x1e>

08009352 <__ascii_wctomb>:
 8009352:	4603      	mov	r3, r0
 8009354:	4608      	mov	r0, r1
 8009356:	b141      	cbz	r1, 800936a <__ascii_wctomb+0x18>
 8009358:	2aff      	cmp	r2, #255	; 0xff
 800935a:	d904      	bls.n	8009366 <__ascii_wctomb+0x14>
 800935c:	228a      	movs	r2, #138	; 0x8a
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	4770      	bx	lr
 8009366:	2001      	movs	r0, #1
 8009368:	700a      	strb	r2, [r1, #0]
 800936a:	4770      	bx	lr

0800936c <fiprintf>:
 800936c:	b40e      	push	{r1, r2, r3}
 800936e:	b503      	push	{r0, r1, lr}
 8009370:	4601      	mov	r1, r0
 8009372:	ab03      	add	r3, sp, #12
 8009374:	4805      	ldr	r0, [pc, #20]	; (800938c <fiprintf+0x20>)
 8009376:	f853 2b04 	ldr.w	r2, [r3], #4
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f000 f83d 	bl	80093fc <_vfiprintf_r>
 8009382:	b002      	add	sp, #8
 8009384:	f85d eb04 	ldr.w	lr, [sp], #4
 8009388:	b003      	add	sp, #12
 800938a:	4770      	bx	lr
 800938c:	20000064 	.word	0x20000064

08009390 <abort>:
 8009390:	2006      	movs	r0, #6
 8009392:	b508      	push	{r3, lr}
 8009394:	f000 fa0a 	bl	80097ac <raise>
 8009398:	2001      	movs	r0, #1
 800939a:	f7f8 fa4a 	bl	8001832 <_exit>

0800939e <_malloc_usable_size_r>:
 800939e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a2:	1f18      	subs	r0, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfbc      	itt	lt
 80093a8:	580b      	ldrlt	r3, [r1, r0]
 80093aa:	18c0      	addlt	r0, r0, r3
 80093ac:	4770      	bx	lr

080093ae <__sfputc_r>:
 80093ae:	6893      	ldr	r3, [r2, #8]
 80093b0:	b410      	push	{r4}
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	6093      	str	r3, [r2, #8]
 80093b8:	da07      	bge.n	80093ca <__sfputc_r+0x1c>
 80093ba:	6994      	ldr	r4, [r2, #24]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	db01      	blt.n	80093c4 <__sfputc_r+0x16>
 80093c0:	290a      	cmp	r1, #10
 80093c2:	d102      	bne.n	80093ca <__sfputc_r+0x1c>
 80093c4:	bc10      	pop	{r4}
 80093c6:	f000 b933 	b.w	8009630 <__swbuf_r>
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	1c58      	adds	r0, r3, #1
 80093ce:	6010      	str	r0, [r2, #0]
 80093d0:	7019      	strb	r1, [r3, #0]
 80093d2:	4608      	mov	r0, r1
 80093d4:	bc10      	pop	{r4}
 80093d6:	4770      	bx	lr

080093d8 <__sfputs_r>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	4614      	mov	r4, r2
 80093e0:	18d5      	adds	r5, r2, r3
 80093e2:	42ac      	cmp	r4, r5
 80093e4:	d101      	bne.n	80093ea <__sfputs_r+0x12>
 80093e6:	2000      	movs	r0, #0
 80093e8:	e007      	b.n	80093fa <__sfputs_r+0x22>
 80093ea:	463a      	mov	r2, r7
 80093ec:	4630      	mov	r0, r6
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	f7ff ffdc 	bl	80093ae <__sfputc_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d1f3      	bne.n	80093e2 <__sfputs_r+0xa>
 80093fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093fc <_vfiprintf_r>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	4614      	mov	r4, r2
 8009404:	4698      	mov	r8, r3
 8009406:	4606      	mov	r6, r0
 8009408:	b09d      	sub	sp, #116	; 0x74
 800940a:	b118      	cbz	r0, 8009414 <_vfiprintf_r+0x18>
 800940c:	6a03      	ldr	r3, [r0, #32]
 800940e:	b90b      	cbnz	r3, 8009414 <_vfiprintf_r+0x18>
 8009410:	f7fe f8e8 	bl	80075e4 <__sinit>
 8009414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009416:	07d9      	lsls	r1, r3, #31
 8009418:	d405      	bmi.n	8009426 <_vfiprintf_r+0x2a>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d402      	bmi.n	8009426 <_vfiprintf_r+0x2a>
 8009420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009422:	f7fe f9f6 	bl	8007812 <__retarget_lock_acquire_recursive>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d501      	bpl.n	8009430 <_vfiprintf_r+0x34>
 800942c:	692b      	ldr	r3, [r5, #16]
 800942e:	b99b      	cbnz	r3, 8009458 <_vfiprintf_r+0x5c>
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f93a 	bl	80096ac <__swsetup_r>
 8009438:	b170      	cbz	r0, 8009458 <_vfiprintf_r+0x5c>
 800943a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800943c:	07dc      	lsls	r4, r3, #31
 800943e:	d504      	bpl.n	800944a <_vfiprintf_r+0x4e>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b01d      	add	sp, #116	; 0x74
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	89ab      	ldrh	r3, [r5, #12]
 800944c:	0598      	lsls	r0, r3, #22
 800944e:	d4f7      	bmi.n	8009440 <_vfiprintf_r+0x44>
 8009450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009452:	f7fe f9df 	bl	8007814 <__retarget_lock_release_recursive>
 8009456:	e7f3      	b.n	8009440 <_vfiprintf_r+0x44>
 8009458:	2300      	movs	r3, #0
 800945a:	9309      	str	r3, [sp, #36]	; 0x24
 800945c:	2320      	movs	r3, #32
 800945e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009462:	2330      	movs	r3, #48	; 0x30
 8009464:	f04f 0901 	mov.w	r9, #1
 8009468:	f8cd 800c 	str.w	r8, [sp, #12]
 800946c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800961c <_vfiprintf_r+0x220>
 8009470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009474:	4623      	mov	r3, r4
 8009476:	469a      	mov	sl, r3
 8009478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800947c:	b10a      	cbz	r2, 8009482 <_vfiprintf_r+0x86>
 800947e:	2a25      	cmp	r2, #37	; 0x25
 8009480:	d1f9      	bne.n	8009476 <_vfiprintf_r+0x7a>
 8009482:	ebba 0b04 	subs.w	fp, sl, r4
 8009486:	d00b      	beq.n	80094a0 <_vfiprintf_r+0xa4>
 8009488:	465b      	mov	r3, fp
 800948a:	4622      	mov	r2, r4
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ffa2 	bl	80093d8 <__sfputs_r>
 8009494:	3001      	adds	r0, #1
 8009496:	f000 80a9 	beq.w	80095ec <_vfiprintf_r+0x1f0>
 800949a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800949c:	445a      	add	r2, fp
 800949e:	9209      	str	r2, [sp, #36]	; 0x24
 80094a0:	f89a 3000 	ldrb.w	r3, [sl]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80a1 	beq.w	80095ec <_vfiprintf_r+0x1f0>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b4:	f10a 0a01 	add.w	sl, sl, #1
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c0:	931a      	str	r3, [sp, #104]	; 0x68
 80094c2:	4654      	mov	r4, sl
 80094c4:	2205      	movs	r2, #5
 80094c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ca:	4854      	ldr	r0, [pc, #336]	; (800961c <_vfiprintf_r+0x220>)
 80094cc:	f7fe f9a3 	bl	8007816 <memchr>
 80094d0:	9a04      	ldr	r2, [sp, #16]
 80094d2:	b9d8      	cbnz	r0, 800950c <_vfiprintf_r+0x110>
 80094d4:	06d1      	lsls	r1, r2, #27
 80094d6:	bf44      	itt	mi
 80094d8:	2320      	movmi	r3, #32
 80094da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094de:	0713      	lsls	r3, r2, #28
 80094e0:	bf44      	itt	mi
 80094e2:	232b      	movmi	r3, #43	; 0x2b
 80094e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ec:	2b2a      	cmp	r3, #42	; 0x2a
 80094ee:	d015      	beq.n	800951c <_vfiprintf_r+0x120>
 80094f0:	4654      	mov	r4, sl
 80094f2:	2000      	movs	r0, #0
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	4621      	mov	r1, r4
 80094fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009500:	3b30      	subs	r3, #48	; 0x30
 8009502:	2b09      	cmp	r3, #9
 8009504:	d94d      	bls.n	80095a2 <_vfiprintf_r+0x1a6>
 8009506:	b1b0      	cbz	r0, 8009536 <_vfiprintf_r+0x13a>
 8009508:	9207      	str	r2, [sp, #28]
 800950a:	e014      	b.n	8009536 <_vfiprintf_r+0x13a>
 800950c:	eba0 0308 	sub.w	r3, r0, r8
 8009510:	fa09 f303 	lsl.w	r3, r9, r3
 8009514:	4313      	orrs	r3, r2
 8009516:	46a2      	mov	sl, r4
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	e7d2      	b.n	80094c2 <_vfiprintf_r+0xc6>
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	1d19      	adds	r1, r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	9103      	str	r1, [sp, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbb      	ittet	lt
 8009528:	425b      	neglt	r3, r3
 800952a:	f042 0202 	orrlt.w	r2, r2, #2
 800952e:	9307      	strge	r3, [sp, #28]
 8009530:	9307      	strlt	r3, [sp, #28]
 8009532:	bfb8      	it	lt
 8009534:	9204      	strlt	r2, [sp, #16]
 8009536:	7823      	ldrb	r3, [r4, #0]
 8009538:	2b2e      	cmp	r3, #46	; 0x2e
 800953a:	d10c      	bne.n	8009556 <_vfiprintf_r+0x15a>
 800953c:	7863      	ldrb	r3, [r4, #1]
 800953e:	2b2a      	cmp	r3, #42	; 0x2a
 8009540:	d134      	bne.n	80095ac <_vfiprintf_r+0x1b0>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	3402      	adds	r4, #2
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9203      	str	r2, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfb8      	it	lt
 8009550:	f04f 33ff 	movlt.w	r3, #4294967295
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009620 <_vfiprintf_r+0x224>
 800955a:	2203      	movs	r2, #3
 800955c:	4650      	mov	r0, sl
 800955e:	7821      	ldrb	r1, [r4, #0]
 8009560:	f7fe f959 	bl	8007816 <memchr>
 8009564:	b138      	cbz	r0, 8009576 <_vfiprintf_r+0x17a>
 8009566:	2240      	movs	r2, #64	; 0x40
 8009568:	9b04      	ldr	r3, [sp, #16]
 800956a:	eba0 000a 	sub.w	r0, r0, sl
 800956e:	4082      	lsls	r2, r0
 8009570:	4313      	orrs	r3, r2
 8009572:	3401      	adds	r4, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957a:	2206      	movs	r2, #6
 800957c:	4829      	ldr	r0, [pc, #164]	; (8009624 <_vfiprintf_r+0x228>)
 800957e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009582:	f7fe f948 	bl	8007816 <memchr>
 8009586:	2800      	cmp	r0, #0
 8009588:	d03f      	beq.n	800960a <_vfiprintf_r+0x20e>
 800958a:	4b27      	ldr	r3, [pc, #156]	; (8009628 <_vfiprintf_r+0x22c>)
 800958c:	bb1b      	cbnz	r3, 80095d6 <_vfiprintf_r+0x1da>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	3307      	adds	r3, #7
 8009592:	f023 0307 	bic.w	r3, r3, #7
 8009596:	3308      	adds	r3, #8
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959c:	443b      	add	r3, r7
 800959e:	9309      	str	r3, [sp, #36]	; 0x24
 80095a0:	e768      	b.n	8009474 <_vfiprintf_r+0x78>
 80095a2:	460c      	mov	r4, r1
 80095a4:	2001      	movs	r0, #1
 80095a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095aa:	e7a6      	b.n	80094fa <_vfiprintf_r+0xfe>
 80095ac:	2300      	movs	r3, #0
 80095ae:	f04f 0c0a 	mov.w	ip, #10
 80095b2:	4619      	mov	r1, r3
 80095b4:	3401      	adds	r4, #1
 80095b6:	9305      	str	r3, [sp, #20]
 80095b8:	4620      	mov	r0, r4
 80095ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095be:	3a30      	subs	r2, #48	; 0x30
 80095c0:	2a09      	cmp	r2, #9
 80095c2:	d903      	bls.n	80095cc <_vfiprintf_r+0x1d0>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0c6      	beq.n	8009556 <_vfiprintf_r+0x15a>
 80095c8:	9105      	str	r1, [sp, #20]
 80095ca:	e7c4      	b.n	8009556 <_vfiprintf_r+0x15a>
 80095cc:	4604      	mov	r4, r0
 80095ce:	2301      	movs	r3, #1
 80095d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d4:	e7f0      	b.n	80095b8 <_vfiprintf_r+0x1bc>
 80095d6:	ab03      	add	r3, sp, #12
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	462a      	mov	r2, r5
 80095dc:	4630      	mov	r0, r6
 80095de:	4b13      	ldr	r3, [pc, #76]	; (800962c <_vfiprintf_r+0x230>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	f7fd fbb1 	bl	8006d48 <_printf_float>
 80095e6:	4607      	mov	r7, r0
 80095e8:	1c78      	adds	r0, r7, #1
 80095ea:	d1d6      	bne.n	800959a <_vfiprintf_r+0x19e>
 80095ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ee:	07d9      	lsls	r1, r3, #31
 80095f0:	d405      	bmi.n	80095fe <_vfiprintf_r+0x202>
 80095f2:	89ab      	ldrh	r3, [r5, #12]
 80095f4:	059a      	lsls	r2, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_vfiprintf_r+0x202>
 80095f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fa:	f7fe f90b 	bl	8007814 <__retarget_lock_release_recursive>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	065b      	lsls	r3, r3, #25
 8009602:	f53f af1d 	bmi.w	8009440 <_vfiprintf_r+0x44>
 8009606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009608:	e71c      	b.n	8009444 <_vfiprintf_r+0x48>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4630      	mov	r0, r6
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <_vfiprintf_r+0x230>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	f7fd fe37 	bl	8007288 <_printf_i>
 800961a:	e7e4      	b.n	80095e6 <_vfiprintf_r+0x1ea>
 800961c:	08009b94 	.word	0x08009b94
 8009620:	08009b9a 	.word	0x08009b9a
 8009624:	08009b9e 	.word	0x08009b9e
 8009628:	08006d49 	.word	0x08006d49
 800962c:	080093d9 	.word	0x080093d9

08009630 <__swbuf_r>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	460e      	mov	r6, r1
 8009634:	4614      	mov	r4, r2
 8009636:	4605      	mov	r5, r0
 8009638:	b118      	cbz	r0, 8009642 <__swbuf_r+0x12>
 800963a:	6a03      	ldr	r3, [r0, #32]
 800963c:	b90b      	cbnz	r3, 8009642 <__swbuf_r+0x12>
 800963e:	f7fd ffd1 	bl	80075e4 <__sinit>
 8009642:	69a3      	ldr	r3, [r4, #24]
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	071a      	lsls	r2, r3, #28
 800964a:	d525      	bpl.n	8009698 <__swbuf_r+0x68>
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b31b      	cbz	r3, 8009698 <__swbuf_r+0x68>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	6922      	ldr	r2, [r4, #16]
 8009654:	b2f6      	uxtb	r6, r6
 8009656:	1a98      	subs	r0, r3, r2
 8009658:	6963      	ldr	r3, [r4, #20]
 800965a:	4637      	mov	r7, r6
 800965c:	4283      	cmp	r3, r0
 800965e:	dc04      	bgt.n	800966a <__swbuf_r+0x3a>
 8009660:	4621      	mov	r1, r4
 8009662:	4628      	mov	r0, r5
 8009664:	f7ff fda2 	bl	80091ac <_fflush_r>
 8009668:	b9e0      	cbnz	r0, 80096a4 <__swbuf_r+0x74>
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	3b01      	subs	r3, #1
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	6022      	str	r2, [r4, #0]
 8009676:	701e      	strb	r6, [r3, #0]
 8009678:	6962      	ldr	r2, [r4, #20]
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	429a      	cmp	r2, r3
 800967e:	d004      	beq.n	800968a <__swbuf_r+0x5a>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	07db      	lsls	r3, r3, #31
 8009684:	d506      	bpl.n	8009694 <__swbuf_r+0x64>
 8009686:	2e0a      	cmp	r6, #10
 8009688:	d104      	bne.n	8009694 <__swbuf_r+0x64>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f7ff fd8d 	bl	80091ac <_fflush_r>
 8009692:	b938      	cbnz	r0, 80096a4 <__swbuf_r+0x74>
 8009694:	4638      	mov	r0, r7
 8009696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009698:	4621      	mov	r1, r4
 800969a:	4628      	mov	r0, r5
 800969c:	f000 f806 	bl	80096ac <__swsetup_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d0d5      	beq.n	8009650 <__swbuf_r+0x20>
 80096a4:	f04f 37ff 	mov.w	r7, #4294967295
 80096a8:	e7f4      	b.n	8009694 <__swbuf_r+0x64>
	...

080096ac <__swsetup_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4b2a      	ldr	r3, [pc, #168]	; (8009758 <__swsetup_r+0xac>)
 80096b0:	4605      	mov	r5, r0
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	460c      	mov	r4, r1
 80096b6:	b118      	cbz	r0, 80096c0 <__swsetup_r+0x14>
 80096b8:	6a03      	ldr	r3, [r0, #32]
 80096ba:	b90b      	cbnz	r3, 80096c0 <__swsetup_r+0x14>
 80096bc:	f7fd ff92 	bl	80075e4 <__sinit>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096c6:	0718      	lsls	r0, r3, #28
 80096c8:	d422      	bmi.n	8009710 <__swsetup_r+0x64>
 80096ca:	06d9      	lsls	r1, r3, #27
 80096cc:	d407      	bmi.n	80096de <__swsetup_r+0x32>
 80096ce:	2309      	movs	r3, #9
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	e034      	b.n	8009748 <__swsetup_r+0x9c>
 80096de:	0758      	lsls	r0, r3, #29
 80096e0:	d512      	bpl.n	8009708 <__swsetup_r+0x5c>
 80096e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e4:	b141      	cbz	r1, 80096f8 <__swsetup_r+0x4c>
 80096e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ea:	4299      	cmp	r1, r3
 80096ec:	d002      	beq.n	80096f4 <__swsetup_r+0x48>
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7fe ff0e 	bl	8008510 <_free_r>
 80096f4:	2300      	movs	r3, #0
 80096f6:	6363      	str	r3, [r4, #52]	; 0x34
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	2300      	movs	r3, #0
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f043 0308 	orr.w	r3, r3, #8
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	b94b      	cbnz	r3, 8009728 <__swsetup_r+0x7c>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800971a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971e:	d003      	beq.n	8009728 <__swsetup_r+0x7c>
 8009720:	4621      	mov	r1, r4
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f883 	bl	800982e <__smakebuf_r>
 8009728:	89a0      	ldrh	r0, [r4, #12]
 800972a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800972e:	f010 0301 	ands.w	r3, r0, #1
 8009732:	d00a      	beq.n	800974a <__swsetup_r+0x9e>
 8009734:	2300      	movs	r3, #0
 8009736:	60a3      	str	r3, [r4, #8]
 8009738:	6963      	ldr	r3, [r4, #20]
 800973a:	425b      	negs	r3, r3
 800973c:	61a3      	str	r3, [r4, #24]
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	b943      	cbnz	r3, 8009754 <__swsetup_r+0xa8>
 8009742:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009746:	d1c4      	bne.n	80096d2 <__swsetup_r+0x26>
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	0781      	lsls	r1, r0, #30
 800974c:	bf58      	it	pl
 800974e:	6963      	ldrpl	r3, [r4, #20]
 8009750:	60a3      	str	r3, [r4, #8]
 8009752:	e7f4      	b.n	800973e <__swsetup_r+0x92>
 8009754:	2000      	movs	r0, #0
 8009756:	e7f7      	b.n	8009748 <__swsetup_r+0x9c>
 8009758:	20000064 	.word	0x20000064

0800975c <_raise_r>:
 800975c:	291f      	cmp	r1, #31
 800975e:	b538      	push	{r3, r4, r5, lr}
 8009760:	4604      	mov	r4, r0
 8009762:	460d      	mov	r5, r1
 8009764:	d904      	bls.n	8009770 <_raise_r+0x14>
 8009766:	2316      	movs	r3, #22
 8009768:	6003      	str	r3, [r0, #0]
 800976a:	f04f 30ff 	mov.w	r0, #4294967295
 800976e:	bd38      	pop	{r3, r4, r5, pc}
 8009770:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009772:	b112      	cbz	r2, 800977a <_raise_r+0x1e>
 8009774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009778:	b94b      	cbnz	r3, 800978e <_raise_r+0x32>
 800977a:	4620      	mov	r0, r4
 800977c:	f000 f830 	bl	80097e0 <_getpid_r>
 8009780:	462a      	mov	r2, r5
 8009782:	4601      	mov	r1, r0
 8009784:	4620      	mov	r0, r4
 8009786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800978a:	f000 b817 	b.w	80097bc <_kill_r>
 800978e:	2b01      	cmp	r3, #1
 8009790:	d00a      	beq.n	80097a8 <_raise_r+0x4c>
 8009792:	1c59      	adds	r1, r3, #1
 8009794:	d103      	bne.n	800979e <_raise_r+0x42>
 8009796:	2316      	movs	r3, #22
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	2001      	movs	r0, #1
 800979c:	e7e7      	b.n	800976e <_raise_r+0x12>
 800979e:	2400      	movs	r4, #0
 80097a0:	4628      	mov	r0, r5
 80097a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097a6:	4798      	blx	r3
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7e0      	b.n	800976e <_raise_r+0x12>

080097ac <raise>:
 80097ac:	4b02      	ldr	r3, [pc, #8]	; (80097b8 <raise+0xc>)
 80097ae:	4601      	mov	r1, r0
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f7ff bfd3 	b.w	800975c <_raise_r>
 80097b6:	bf00      	nop
 80097b8:	20000064 	.word	0x20000064

080097bc <_kill_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	2300      	movs	r3, #0
 80097c0:	4d06      	ldr	r5, [pc, #24]	; (80097dc <_kill_r+0x20>)
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	4611      	mov	r1, r2
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	f7f8 f822 	bl	8001812 <_kill>
 80097ce:	1c43      	adds	r3, r0, #1
 80097d0:	d102      	bne.n	80097d8 <_kill_r+0x1c>
 80097d2:	682b      	ldr	r3, [r5, #0]
 80097d4:	b103      	cbz	r3, 80097d8 <_kill_r+0x1c>
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	20000c24 	.word	0x20000c24

080097e0 <_getpid_r>:
 80097e0:	f7f8 b810 	b.w	8001804 <_getpid>

080097e4 <__swhatbuf_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	460c      	mov	r4, r1
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	4615      	mov	r5, r2
 80097ee:	2900      	cmp	r1, #0
 80097f0:	461e      	mov	r6, r3
 80097f2:	b096      	sub	sp, #88	; 0x58
 80097f4:	da0c      	bge.n	8009810 <__swhatbuf_r+0x2c>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	2100      	movs	r1, #0
 80097fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097fe:	bf0c      	ite	eq
 8009800:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009804:	2340      	movne	r3, #64	; 0x40
 8009806:	2000      	movs	r0, #0
 8009808:	6031      	str	r1, [r6, #0]
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	b016      	add	sp, #88	; 0x58
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	466a      	mov	r2, sp
 8009812:	f000 f849 	bl	80098a8 <_fstat_r>
 8009816:	2800      	cmp	r0, #0
 8009818:	dbed      	blt.n	80097f6 <__swhatbuf_r+0x12>
 800981a:	9901      	ldr	r1, [sp, #4]
 800981c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009820:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009824:	4259      	negs	r1, r3
 8009826:	4159      	adcs	r1, r3
 8009828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982c:	e7eb      	b.n	8009806 <__swhatbuf_r+0x22>

0800982e <__smakebuf_r>:
 800982e:	898b      	ldrh	r3, [r1, #12]
 8009830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009832:	079d      	lsls	r5, r3, #30
 8009834:	4606      	mov	r6, r0
 8009836:	460c      	mov	r4, r1
 8009838:	d507      	bpl.n	800984a <__smakebuf_r+0x1c>
 800983a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	2301      	movs	r3, #1
 8009844:	6163      	str	r3, [r4, #20]
 8009846:	b002      	add	sp, #8
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	466a      	mov	r2, sp
 800984c:	ab01      	add	r3, sp, #4
 800984e:	f7ff ffc9 	bl	80097e4 <__swhatbuf_r>
 8009852:	9900      	ldr	r1, [sp, #0]
 8009854:	4605      	mov	r5, r0
 8009856:	4630      	mov	r0, r6
 8009858:	f7fe feca 	bl	80085f0 <_malloc_r>
 800985c:	b948      	cbnz	r0, 8009872 <__smakebuf_r+0x44>
 800985e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009862:	059a      	lsls	r2, r3, #22
 8009864:	d4ef      	bmi.n	8009846 <__smakebuf_r+0x18>
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	f043 0302 	orr.w	r3, r3, #2
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	e7e3      	b.n	800983a <__smakebuf_r+0xc>
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	6020      	str	r0, [r4, #0]
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	6120      	str	r0, [r4, #16]
 8009880:	6163      	str	r3, [r4, #20]
 8009882:	9b01      	ldr	r3, [sp, #4]
 8009884:	b15b      	cbz	r3, 800989e <__smakebuf_r+0x70>
 8009886:	4630      	mov	r0, r6
 8009888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988c:	f000 f81e 	bl	80098cc <_isatty_r>
 8009890:	b128      	cbz	r0, 800989e <__smakebuf_r+0x70>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	f023 0303 	bic.w	r3, r3, #3
 8009898:	f043 0301 	orr.w	r3, r3, #1
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	431d      	orrs	r5, r3
 80098a2:	81a5      	strh	r5, [r4, #12]
 80098a4:	e7cf      	b.n	8009846 <__smakebuf_r+0x18>
	...

080098a8 <_fstat_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	2300      	movs	r3, #0
 80098ac:	4d06      	ldr	r5, [pc, #24]	; (80098c8 <_fstat_r+0x20>)
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	602b      	str	r3, [r5, #0]
 80098b6:	f7f8 f80a 	bl	80018ce <_fstat>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_fstat_r+0x1c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_fstat_r+0x1c>
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	20000c24 	.word	0x20000c24

080098cc <_isatty_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	2300      	movs	r3, #0
 80098d0:	4d05      	ldr	r5, [pc, #20]	; (80098e8 <_isatty_r+0x1c>)
 80098d2:	4604      	mov	r4, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	602b      	str	r3, [r5, #0]
 80098d8:	f7f8 f808 	bl	80018ec <_isatty>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_isatty_r+0x1a>
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_isatty_r+0x1a>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20000c24 	.word	0x20000c24

080098ec <_init>:
 80098ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ee:	bf00      	nop
 80098f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f2:	bc08      	pop	{r3}
 80098f4:	469e      	mov	lr, r3
 80098f6:	4770      	bx	lr

080098f8 <_fini>:
 80098f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fa:	bf00      	nop
 80098fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098fe:	bc08      	pop	{r3}
 8009900:	469e      	mov	lr, r3
 8009902:	4770      	bx	lr
